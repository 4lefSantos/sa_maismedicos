library(tidyverse)
library(readxl)
edital <- read_excel("~/GitHub/sa_maismedicos/dados/edital_maismedicos.xlsx")
View(edital)
edital <- read_excel("~/GitHub/sa_maismedicos/dados/edital_maismedicos.xlsx")
View(edital)
install.packages("rvest")
library(rvest)
link <- "https://cnes.datasus.gov.br/pages/profissionais/consulta.jsp"
page <- read_html(link)
install.packages("httr")
install.packages("httr")
library(tidyverse)
library(readxl)
library(rvest)
library(httr)
consulta_nome <- function(valor) {
resposta <- POST(url = link,
body = list(pesquisaValue = valor),
encode = "form")
pagina <- content(resposta, as = "text") |>
read_html()
resultado <- pagina |>
html_nodes("tbody") |>
html_text()
return(resultado)
}
teste <- lapply(ADEILDO RAMOS RODRIGUES, consulta_nome)
teste <- lapply("ADEILDO RAMOS RODRIGUES", consulta_nome)
View(teste)
lapply("ADEILDO RAMOS RODRIGUES", consulta_nome)
install.packages("RSelenium")
install.packages("netstat")
library(RSelenium)
library(netstat)
Swin32
binman::list_versions('chromedriver')
driver_object <- rsDriver(browser = "chrome",
chromever = '129.0.6668.59',
verbose = F,
port = free_port()
)
install.packages("wdman")
install.packages("wdman")
library(RSelenium)
library(wdman)
library(netstat)
selenium()
library(RSelenium)
library(wdman)
library(netstat)
selenium()
selenium_object <- selenium(retcommand = T, check = F)
selenium_object
binman::list_versions("chromedirver")
binman::list_versions("chromedriver")
remote_driver <- rsDriver(browser = "chrome",
chromever = "129.0.6668.60",
verbose = F,
port = free_port())
remote_driver <- rsDriver(browser = "chrome",
chromever = "114.0.5735.90",
verbose = F,
port = free_port())
binman::list_versions("chromedriver")
remote_driver <- rsDriver(browser = "chrome",
chromever = "114.0.5735.90",
verbose = F,
port = free_port())
remote_driver <- rsDriver(browser = "chrome",
chromever = "129.0.6668.70",
verbose = F,
port = free_port())
selenium_object <- chrome(retcommand = T, verbose = F, check = F)
selenium_object
remote_driver <- rsDriver(browser = "chrome",
chromever = "129.0.6668.70",
verbose = F,
port = free_port())
remote_driver <- rsDriver(browser = "chrome",
chromever = "129.0.6668.70",
verbose = F,
port = free_port())
library(RSelenium)
library(wdman)
library(netstat)
remote_driver <- rsDriver(browser = "chrome",
chromever = "129.0.6668.70",
verbose = F,
port = free_port())
remote_driver <- rsDriver(browser = "chrome",
chromever = "129.0.6668.70",
verbose = F,
port = free_port())
remote_driver <- rsDriver(browser = "chrome",
chromever = "129.0.6668.70",
verbose = F,
port = free_port())
remote_driver <- rsDriver(browser = "chrome",
chromever = "129.0.6668.70",
verbose = F,
port = free_port())
remote_driver <- rsDriver(browser = "chrome",
chromever = "129.0.6668.70",
verbose = F,
port = free_port())
remote_driver <- rsDriver(browser = "chrome",
chromever = "129.0.6668.70",
verbose = F,
port = free_port())
library(RSelenium)
library(wdman)
library(netstat)
remote_driver <- rsDriver(browser = "chrome",
chromever = "129.0.6668.70",
verbose = F,
port = free_port())
binman::list_versions("chromedriver")
library(RSelenium)
library(wdman)
library(netstat)
remote_driver <- rsDriver(browser = "chrome",
chromever = "129.0.6668.70",
verbose = F,
port = free_port())
install.packages("RSelenium")
install.packages("RSelenium")
library(RSelenium)
library(wdman)
library(netstat)
remote_driver <- rsDriver(browser = "chrome",
chromever = "129.0.6668.70",
verbose = F,
port = free_port())
remote_driver <- rsDriver(browser = "chrome",
chromever = "129.0.6668.71",
verbose = F,
port = free_port()
remote_driver <- rsDriver(browser = "chrome",
remote_driver <- rsDriver(browser = "chrome",
chromever = "129.0.6668.71",
verbose = F,
port = free_port())
remote_driver <- rsDriver(browser = "chrome",
chromever = "129.0.6668.70",
verbose = F,
port = free_port())
Sys.setlocale("LC_ALL", "C")
remote_driver <- rsDriver(browser = "chrome",
chromever = "129.0.6668.70",
verbose = F,
port = free_port())
remDr <- rs_driver_object$client
remDr <- remote_driver$client
remDr$open()
remDr$navigate('https://cnes.datasus.gov.br/pages/profissionais/consulta.jsp')
remDr$maxWindowSize()
remDr$findElement(using = "css selector", value = "#pesquisaValue")
campo_pesquisa$sendKeysToElement(list("Alef"))
campo_pesquisa <- remDr$findElement(using = "css selector", value = "#pesquisaValue")
campo_pesquisa$sendKeysToElement(list("Alef"))
library(readxl)
library(tidyverse)
edital <- read_xlsx("~/GitHub/sa_maismedicos/dados/edital_maismedicos.xlsx")
campo_pesquisa$sendKeysToElement(list(edital$nome))
campo_pesquisa$sendKeysToElement(list("edital$nome"))
campo_pesquisa$sendKeysToElement(list("Alef"))
botao_pesquisa <- remDr$findElement(using = "css selector", value = ".btn-primary")
botao_pesquisa$clickElement()
campo_pesquisa$sendKeysToElement(list("Alef"))
botao_pesquisa <- remDr$findElement(using = "css selector", value = ".btn-primary")
botao_pesquisa <- remDr$findElement(using = "css selector", value = ".btn-primary")
botao_pesquisa$clickElement()
campo_pesquisa$sendKeysToElement(list("Alef Santos"))
botao_pesquisa <- remDr$findElement(using = "css selector", value = ".btn-primary")
botao_pesquisa$clickElement()
remDr$findElement(using = 'link text', 'Pesquisar')
botao_pesquisa <- remDr$findElement(using = "css selector", value = "btn-primary")
botao_pesquisa <- remDr$findElement(using = "css selector", value = ".btn-primary")
botao_pesquisa$clickElement()
botao_pesquisa <- remDr$findElement(using = "css selector", value = ".btn.btn-primary")
botao_pesquisa$clickElement()
if (!botao_pesquisa$getElementAttribute("disabled")[[1]]) {
# Clica no botão
botao_pesquisa$clickElement()
} else {
print("O botão está desabilitado e não pode ser clicado.")
}
disabled_attr <- botao_pesquisa$getElementAttribute("disabled")[[1]]
# Verifica se o botão está habilitado (disabled_attr será NULL se o botão estiver habilitado)
if (is.null(disabled_attr)) {
# Clica no botão
botao_pesquisa$clickElement()
print("Botão clicado com sucesso!")
} else {
print("O botão está desabilitado e não pode ser clicado.")
}
# Aguarde até que o botão esteja habilitado (remover o atributo "disabled")
wait_for_element <- function(remDr, css_selector, timeout = 10) {
Sys.sleep(1)
for (i in 1:timeout) {
elem <- remDr$findElement(using = "css selector", value = css_selector)
if (is.null(elem$getElementAttribute("disabled")[[1]])) {
return(elem)
}
Sys.sleep(1)
}
stop("Elemento não ficou habilitado dentro do tempo limite.")
}
# Aguarda até que o botão esteja habilitado
botao_pesquisa <- wait_for_element(remDr, ".btn.btn-primary")
Usando XPath para encontrar o botão com o ng-click "pesquisaProfissionais"
#Usando XPath para encontrar o botão com o ng-click "pesquisaProfissionais"
botao_pesquisa <- remDr$findElement(using = "xpath", value = "//button[@ng-click='pesquisaProfissionais()']")
# Clica no botão
botao_pesquisa$clickElement()
campo_pesquisa$sendKeysToElement(list("Alef Santos"))
#Usando XPath para encontrar o botão com o ng-click "pesquisaProfissionais"
botao_pesquisa <- remDr$findElement(using = "xpath", value = "//button[@ng-click='pesquisaProfissionais()']")
# Clica no botão
botao_pesquisa$clickElement()
# Aguarde até que o botão esteja habilitado (remover o atributo "disabled")
wait_for_element <- function(remDr, css_selector, timeout = 10) {
Sys.sleep(1)
for (i in 1:timeout) {
elem <- remDr$findElement(using = "css selector", value = css_selector)
if (is.null(elem$getElementAttribute("disabled")[[1]])) {
return(elem)
}
Sys.sleep(1)
}
stop("Elemento não ficou habilitado dentro do tempo limite.")
}
isabled_attr <- botao_pesquisa$getElementAttribute("disabled")[[1]]
# Verifica se o botão está habilitado (disabled_attr será NULL se o botão estiver habilitado)
if (is.null(disabled_attr)) {
# Clica no botão
botao_pesquisa$clickElement()
print("Botão clicado com sucesso!")
} else {
print("O botão está desabilitado e não pode ser clicado.")
}
# Simula a mudança do valor de "Estado" para habilitar o botão
remDr$executeScript("angular.element(document.body).scope().Estado = true;")
# Remove o atributo "disabled" do botão
remDr$executeScript("document.querySelector('.btn.btn-primary').removeAttribute('disabled');")
# Agora, tente clicar no botão
botao_pesquisa <- remDr$findElement(using = "css selector", value = ".btn.btn-primary")
botao_pesquisa$clickElement()
remDr$executeScript("angular.element(document.body).scope().pesquisaProfissionais();")
library(RSelenium)
library(wdman)
library(netstat)
binman::list_versions("chromedriver")
driver <- rsDriver(browser = "chrome",
chromever = "129.0.6668.70",
verbose = FALSE,
port = free_port())
Sys.setlocale("LC_ALL", "C")
driver <- rsDriver(browser = "chrome",
chromever = "129.0.6668.70",
verbose = FALSE,
port = free_port())
remDr <- driver$client
remDr$open
remDr$maxWindowSize
remDr <- driver$client
remDr$open
remDr$maxWindowSize
remDr$maxWindowSize
remDr$navigate('https://cnes.datasus.gov.br/pages/profissionais/consulta.jsp')
campo_pesquisa <- remDr$findElement(using = "css selector", value = "#pesquisaValue")
campo_pesquisa$sendKeysToElement(list("Alef Santos"))
remdr <- driver$client
botao <- remdr$findElement(using = "link text", 'Pesquisar')
botao <- remDr$findElement(using = "css selector", value = ".btn.btn-primary")
botao$getElementAttribute('href')
campo_pesquisa$sendKeysToElement(list("Alef Santos", key = enter))
campo_pesquisa$sendKeysToElement(list("Alef Santos", key = 'enter'))
campo_pesquisa$sendKeysToElement(list("Alef Santos", key = 'enter'))
CNS <- remdr$findElement(using = "class name", value = "ng-binding")
CNS$getElementText()
View(edital)
campo_pesquisa$sendKeysToElement(list("ABIMAEL CRUZ NASCIMENTO", key = 'enter'))
CNS <- remdr$findElement(using = "class name", value = "ng-binding")
CNS$getElementText()
CNS <- remdr$findElement(using = "class name", value = ".ng-binding")
CNS <- remdr$findElement(using = "class name", value = "ng-binding")
CNS$getElementText()
CNS <- remDr$findElement(using = "xpath", value = "//td[@data-title='\"CNS\"']")
CNS <- remDr$findElement(using = "css selector", value = "td[data-title='\"CNS\"'][data-title-text='CNS']")
CNS <- remDr$findElement(using = "xpath", value = "//td[text()='703603000650230']")
CNS$getElementText()
CNS <- remDr$findElement(using = "class name", value = "td.ng-binding")
CNS <- remDr$findElement(using = "class name", value = "ng-binding")
CNS <- remDr$findElement(using = "xpath", value = "//td[contains(@class, 'ng-binding')]")
CNS$getElementText()
length(CNS)
library(readxl)
library(tidyverse)
View(edital)
remdr$close()
driver$server$stop()
#Abrindo dataframe
edital <- read_excel("~/GitHub/sa_maismedicos/dados/edital_maismedicos.xlsx")
binman::list_versions("chromedriver")
Sys.setlocale("LC_ALL", "C")
driver <- rsDriver(browser = "chrome",
chromever = "129.0.6668.70",
verbose = FALSE,
port = free_port())
remdr <- driver$client
remdr$open()
remdr$maxWindowSize()
edital$resultado <- NA
# Loop através dos nomes na coluna "nome"
for (i in 1:nrow(edital)) {
# Abrindo site
remdr$navigate('https://cnes.datasus.gov.br/pages/profissionais/consulta.jsp')
# Realizando a pesquisa
campo_pesquisa <- remdr$findElement(using = "css selector", value = "#pesquisaValue")
campo_pesquisa$sendKeysToElement(list(edital$nome[i], key = 'enter'))
# Retornando os valores
Sys.sleep(2)  # Aguarde um momento para garantir que a página carregue
CNS <- remdr$findElements(using = "xpath", value = "//td[contains(@class, 'ng-binding')]")
if (length(CNS) == 1) {
# Armazena o resultado no dataframe
resultado_texto <- CNS[[1]]$getElementText()
edital$resultado[i] <- resultado_texto
} else {
edital$resultado[i] <- NA  # Caso a condição não seja satisfeita
}
}
View(edital)
View(CNS)
resultados_vector <- unlist(CNS)
edital$resultado <- resultados_vector
View(edital)
resultados_lista <- vector("list", nrow(edital))
# Loop através dos nomes na coluna "nome"
for (i in 1:nrow(edital)) {
# [Seu código de raspagem aqui...]
if (length(CNS) == 1) {
# Armazena o resultado na lista
resultados_lista[[i]] <- CNS[[1]]$getElementText()
} else {
resultados_lista[[i]] <- NA  # Caso a condição não seja satisfeita
}
}
# Convertendo a lista em um vetor
resultados_vector <- unlist(resultados_lista)
# Atribuindo ao dataframe
edital$resultado <- resultados_vector
View(edital)
resultados_lista <- vector("list", nrow(edital))
# Loop através dos nomes na coluna "nome"
for (i in 1:nrow(edital)) {
# [Seu código de raspagem aqui...]
if (length(CNS) == 1) {
# Armazena o resultado na lista
resultados_lista[[i]] <- CNS[[1]]$getElementText()
} else {
resultados_lista[[i]] <- NA  # Caso a condição não seja satisfeita
}
}
# Convertendo a lista em um vetor
resultados_vector <- unlist(resultados_lista)
# Atribuindo ao dataframe
edital$resultado <- resultados_vector
View(edital)
View(CNS)
CNS[[1]][[".self"]]
CNS
resultados_vector
campo_pesquisa$sendKeysToElement(list("ABIMAEL CRUZ NASCIMENTO", key = 'enter'))
campo_pesquisa$sendKeysToElement(list("ABIMAEL CRUZ NASCIMENTO", key = 'enter'))
remdr$navigate('https://cnes.datasus.gov.br/pages/profissionais/consulta.jsp')
campo_pesquisa$sendKeysToElement(list("ABIMAEL CRUZ NASCIMENTO", key = 'enter'))
campo_pesquisa <- remdr$findElement(using = "css selector", value = "#pesquisaValue")
campo_pesquisa$sendKeysToElement(list("ABIMAEL CRUZ NASCIMENTO", key = 'enter'))
CNS <- remDr$findElement(using = "xpath", value = "//td[contains(@class, 'ng-binding')]")
remdr$close()
driver$server$stop()
driver <- rsDriver(browser = "chrome",
chromever = "129.0.6668.70",
verbose = FALSE,
port = free_port())
remdr <- driver$client
remdr$open()
driver <- rsDriver(browser = "chrome",
chromever = "129.0.6668.70",
verbose = FALSE,
port = free_port())
remdr <- driver$client
remdr$navigate('https://cnes.datasus.gov.br/pages/profissionais/consulta.jsp')
campo_pesquisa <- remdr$findElement(using = "css selector", value = "#pesquisaValue")
campo_pesquisa$sendKeysToElement(list("ABIMAEL CRUZ NASCIMENTO", key = 'enter'))
CNS <- remDr$findElement(using = "xpath", value = "//td[contains(@class, 'ng-binding')]")
CNS <- remdr$findElement(using = "xpath", value = "//td[contains(@class, 'ng-binding')]")
length(CNS)
CNS$getElementText()
if (length(CNS) > 0) {
# Armazena o texto de todos os elementos encontrados
resultados_lista[[i]] <- sapply(CNS, function(x) x$getElementText())
} else {
resultados_lista[[i]] <- NA  # Caso não haja resultados
}
if (length(CNS) > 0) {
# Armazena o texto de todos os elementos encontrados usando lapply
resultados_lista[[i]] <- unlist(lapply(CNS, function(x) x$getElementText()))
} else {
resultados_lista[[i]] <- NA  # Caso não haja resultados
}
}print(CNS)
print(CNS)
CNS$getElementText()
edital <- n_sample(edital, 10)
edital_sample <- edital %>% sample_n(10)
edital <- edital %>% sample_n(10)
resultados_vector <- character(nrow(edital))  # Cria um vetor vazio de caracteres
# Loop através dos nomes na coluna "nome"
for (i in 1:nrow(edital)) {
# Abrindo site
remdr$navigate('https://cnes.datasus.gov.br/pages/profissionais/consulta.jsp')
# Realizando a pesquisa
campo_pesquisa <- remdr$findElement(using = "css selector", value = "#pesquisaValue")
campo_pesquisa$sendKeysToElement(list(edital$nome[i], key = 'enter'))
# Retornando os valores
Sys.sleep(2)  # Aguarde um momento para garantir que a página carregue
CNS <- remdr$findElements(using = "xpath", value = "//td[contains(@class, 'ng-binding')]")
# Debug: verificar o conteúdo de CNS
print(CNS)
# Verifique se existem elementos encontrados
if (length(CNS) > 0) {
# Armazena o texto do primeiro elemento encontrado, por exemplo
resultados_vector[i] <- unlist(lapply(CNS, function(x) x$getElementText()))[1]  # Captura o primeiro texto
print(paste("Nome:", edital$nome[i], "- Resultado encontrado:", resultados_vector[i]))
} else {
resultados_vector[i] <- NA  # Caso não haja resultados
print(paste("Nome:", edital$nome[i], "- Resultado não encontrado."))
}
}
View(edital)
edital$resultado <- resultados_vector
View(edital)
resultados_vector <- character(nrow(edital))  # Cria um vetor vazio de caracteres
# Loop através dos nomes na coluna "nome"
for (i in 1:nrow(edital)) {
# Abrindo site
remdr$navigate('https://cnes.datasus.gov.br/pages/profissionais/consulta.jsp')
# Realizando a pesquisa
campo_pesquisa <- remdr$findElement(using = "css selector", value = "#pesquisaValue")
campo_pesquisa$sendKeysToElement(list(edital$nome[i], key = 'enter'))
# Retornando os valores
Sys.sleep(2)  # Aguarde um momento para garantir que a página carregue
CNS <- remdr$findElements(using = "xpath", value = "//td[contains(@class, 'ng-binding')]")
# Debug: verificar o conteúdo de CNS
print(CNS)
# Verifique se existem elementos encontrados
if (length(CNS) == 1) {  # Condição: deve haver exatamente um resultado
# Armazena o texto do único elemento encontrado
resultados_vector[i] <- unlist(lapply(CNS, function(x) x$getElementText()))[1]  # Captura o texto
print(paste("Nome:", edital$nome[i], "- Resultado encontrado:", resultados_vector[i]))
} else {
resultados_vector[i] <- NA  # Se não houver um único resultado, armazena NA
print(paste("Nome:", edital$nome[i], "- Resultado não encontrado ou múltiplos resultados."))
}
}
# Atribuindo ao dataframe
edital$resultado <- resultados_vector
View(edital)
