dremio_uid <- Sys.getenv("uid")
dremio_pwd <- Sys.getenv("datalake")
channel <- odbcDriverConnect(
sprintf("DRIVER=Dremio Connector;
HOST=%s;
PORT=%s;
UID=%s;
PWD=%s;
AUTHENTICATIONTYPE=Basic Authentication;
CONNECTIONTYPE=Direct",
dremio_host,
dremio_port,
dremio_uid,
dremio_pwd))
query <- 'SELECT * FROM "@alef_santos"."Consulta_maismedicos_2019_cns"'
CNES_cns <- sqlQuery(channel, query,
as.is = TRUE)
#identificando os CPF
lista_cpf <- CNES_cns |>
filter(COMPETEN >= 201901) |>
mutate(CNS_PROF = as.character(CNS_PROF)) |>
select(CPF_PROF, CNS_PROF, NOMEPROF) |>
distinct(CPF_PROF)
# codigo para acessar dados de datalake proprio
dremio_host <- Sys.getenv("endereco")
dremio_port <- Sys.getenv("port")
dremio_uid <- Sys.getenv("uid")
dremio_pwd <- Sys.getenv("datalake")
channel <- odbcDriverConnect(
sprintf("DRIVER=Dremio Connector;
HOST=%s;
PORT=%s;
UID=%s;
PWD=%s;
AUTHENTICATIONTYPE=Basic Authentication;
CONNECTIONTYPE=Direct",
dremio_host,
dremio_port,
dremio_uid,
dremio_pwd))
query <- 'SELECT * FROM "@alef_santos"."Consulta_maismedicos_2019"'
CNES_cpf <- sqlQuery(channel,
query,
as.is = TRUE)
lista_cns_cpf <-
CNES_cns |>
filter(COMPETEN >= 201901) |>
mutate(CNS_PROF = as.character(CNS_PROF)) |>
select(CPF_PROF, CNS_PROF) |>
distinct(CPF_PROF, CNS_PROF)
cns_inscricao <-
cns_inscricao |>
left_join(lista_cns_cpf,
by = c("cns" = "CNS_PROF"))
base_tratada <- CNES_cpf |>
left_join(cns_inscricao,
by = c("CPF_PROF" = "CPF_PROF"))
# Convertendo competência para formato data
base_tratada$COMPETEN <-
as.Date(paste0(base_tratada$COMPETEN, "01"),
format = "%Y%m%d")
# metodo para identificar quem foi selecionado e de fato foi para o programa, inclusive sendo alocado em APS
temp <-
base_tratada |>
mutate(aps = if_else((TP_UNID == "02" |
TP_UNID == "01" |
TP_UNID == "32" |
TP_UNID == "71" |
TP_UNID == "72" |
TP_UNID == "74"), "APS", "Outros")) |>
mutate(ano = year(COMPETEN)) |>
mutate(assumiu_programa =
if_else(ano == 2019 &
aps == 'APS' &
CODUFMUN == ibge_aloc,
"Foi alocado", "Não foi alocado")) |>
filter(assumiu_programa == "Foi alocado") |>
group_by(NOMEPROF, CPF_PROF, CNS_PROF) |>
slice_min(COMPETEN)
#Filtrando a base apenas com os médicos ingressantes
base_tratada2 <-
base_tratada |>
filter(CPF_PROF %in% temp$CPF_PROF) |>
janitor::clean_names() |>
mutate(ano = year(competen)) |>
select(ano, competen, ibge_aloc,
municipio_destino, uf_destino,
cnes, fantasia, nomeprof, cns_prof,
cpf_prof,
data_nascimento,
data_formacao, participou_pmmb,
sexo) |>
filter(ano > 2018)
atuacao_previa <-
base_tratada |>
mutate(ano = year(COMPETEN)) |>
filter(ano < 2019 & CODUFMUN == ibge_aloc) |>
group_by(COMPETEN, ibge_aloc, CPF_PROF) |>
count() |>
group_by(ibge_aloc, CPF_PROF) |>
count() |>
mutate(atuacao_previa = "Sim") |>
mutate(anos_atuacao = n/12)
unique(atuacao_previa$CPF_PROF)
View(atuacao_previa)
View(atuacao_previa)
atuacao_previa <-
base_tratada |>
mutate(ano = year(COMPETEN)) |>
filter(ano < 2019 & CODUFMUN == ibge_aloc) |>
group_by(COMPETEN, ibge_aloc, nome, CPF_PROF) |>
count() |>
group_by(ibge_aloc, CPF_PROF) |>
count() |>
mutate(atuacao_previa = "Sim") |>
mutate(anos_atuacao = n/12)
atuacao_previa <-
base_tratada |>
mutate(ano = year(COMPETEN)) |>
filter(ano < 2019 & CODUFMUN == ibge_aloc) |>
group_by(COMPETEN, ibge_aloc, CPF_PROF) |>
count() |>
group_by(ibge_aloc, CPF_PROF) |>
count() |>
mutate(atuacao_previa = "Sim") |>
mutate(anos_atuacao = n/12)
base_tratada2 |>
left_join(atuacao_previa,
by = c("CPF_PROF"))
base_tratada2 |>
left_join(atuacao_previa,
by = c("CPF_PROF"="CPF_PROF"))
base_tratada2 |>
left_join(atuacao_previa,
by = c("cpf_prof"="CPF_PROF"))
View(base_tratada2)
base_tratada2 <-
base_tratada |>
filter(CPF_PROF %in% temp$CPF_PROF) |>
janitor::clean_names() |>
mutate(ano = year(competen)) |>
select(ano, competen, ibge_aloc,
municipio_destino, uf_destino,
cnes, fantasia, nomeprof, cns_prof,
cpf_prof, data_nascimento,
data_formacao, participou_pmmb,
sexo) |>
filter(ano > "2019-05-01")
View(base_tratada2)
base_tratada2 <-
base_tratada |>
filter(CPF_PROF %in% temp$CPF_PROF) |>
janitor::clean_names() |>
mutate(ano = year(competen)) |>
select(ano, competen, ibge_aloc,
municipio_destino, uf_destino,
cnes, fantasia, nomeprof, cns_prof,
cpf_prof, data_nascimento,
data_formacao, participou_pmmb,
sexo) |>
filter(ano > 2019)
base_tratada2 <-
base_tratada |>
filter(CPF_PROF %in% temp$CPF_PROF) |>
janitor::clean_names() |>
mutate(ano = year(competen)) |>
select(ano, competen, ibge_aloc,
municipio_destino, uf_destino,
cnes, fantasia, nomeprof, cns_prof,
cpf_prof, data_nascimento,
data_formacao, participou_pmmb,
sexo) |>
filter(ano > 2018)
View(base_tratada2)
base_tratada2 <-
base_tratada |>
filter(CPF_PROF %in% temp$CPF_PROF) |>
janitor::clean_names() |>
mutate(ano = year(competen)) |>
select(ano, competen, ibge_aloc,
municipio_destino, uf_destino,
cnes, fantasia, nomeprof, cns_prof,
cpf_prof, data_nascimento,
data_formacao, participou_pmmb,
sexo) |>
filter(ano > 2019-04-01)
base_tratada2 <-
base_tratada |>
filter(CPF_PROF %in% temp$CPF_PROF) |>
janitor::clean_names() |>
mutate(ano = year(competen)) |>
select(ano, competen, ibge_aloc,
municipio_destino, uf_destino,
cnes, fantasia, nomeprof, cns_prof,
cpf_prof, data_nascimento,
data_formacao, participou_pmmb,
sexo) |>
filter(ano > '2019-04-01')
base_tratada2 <-
base_tratada |>
filter(CPF_PROF %in% temp$CPF_PROF) |>
janitor::clean_names() |>
mutate(ano = year(competen)) |>
select(ano, competen, ibge_aloc,
municipio_destino, uf_destino,
cnes, fantasia, nomeprof, cns_prof,
cpf_prof, data_nascimento,
data_formacao, participou_pmmb,
sexo) |>
filter(competen > '2019-05-01')
base_tratada2 <-
base_tratada2 |>
left_join(atuacao_previa,
by = c("cpf_prof"="CPF_PROF"))
View(base_tratada2)
base_tratada2 <-
base_tratada2 |>
left_join(atuacao_previa,
by = c("cpf_prof"="CPF_PROF")) |>
rename(ibge_aloc = ibge_aloc.x)
base_tratada2 <-
base_tratada |>
filter(CPF_PROF %in% temp$CPF_PROF) |>
janitor::clean_names() |>
mutate(ano = year(competen)) |>
select(ano, competen, ibge_aloc,
municipio_destino, uf_destino,
cnes, fantasia, nomeprof, cns_prof,
cpf_prof, data_nascimento,
data_formacao, participou_pmmb,
sexo) |>
filter(competen > '2019-05-01')
atuacao_previa <-
base_tratada |>
mutate(ano = year(COMPETEN)) |>
filter(ano < 2019 & CODUFMUN == ibge_aloc) |>
group_by(COMPETEN, ibge_aloc, CPF_PROF) |>
count() |>
group_by(ibge_aloc, CPF_PROF) |>
count() |>
mutate(atuacao_previa = "Sim") |>
mutate(anos_atuacao = n/12)
View(base_tratada2)
base_tratada3 <-
base_tratada2 |>
left_join(atuacao_previa,
by = c("cpf_prof"="CPF_PROF")) |>
rename(ibge_aloc = ibge_aloc.x)
View(base_tratada3)
View(base_tratada3)
atuacao_previa <-
base_tratada |>
mutate(ano = year(COMPETEN)) |>
filter(ano < 2019 & CODUFMUN == ibge_aloc) |>
group_by(COMPETEN, ibge_aloc, CPF_PROF) |>
count() |>
group_by(ibge_aloc, CPF_PROF) |>
count() |>
mutate(atuacao_previa = "Sim") |>
mutate(anos_atuacao = n/12) |>
select(-ibge_aloc)
atuacao_previa <-
base_tratada |>
mutate(ano = year(COMPETEN)) |>
filter(ano < 2019 & CODUFMUN == ibge_aloc) |>
group_by(COMPETEN, ibge_aloc, CPF_PROF) |>
count() |>
group_by(ibge_aloc, CPF_PROF) |>
count() |>
mutate(atuacao_previa = "Sim") |>
mutate(anos_atuacao = n/12) |>
ungroup() |>
select(-ibge_aloc)
View(atuacao_previa)
base_tratada3 <-
base_tratada2 |>
left_join(atuacao_previa,
by = c("cpf_prof"="CPF_PROF"))
atuacao_previa <-
base_tratada |>
mutate(ano = year(COMPETEN)) |>
filter(ano < 2019 & CODUFMUN == ibge_aloc) |>
group_by(COMPETEN, ibge_aloc, CPF_PROF) |>
count() |>
group_by(ibge_aloc, CPF_PROF) |>
count() |>
mutate(atuacao_previa = "Sim") |>
mutate(anos_atuacao = n/12) |>
ungroup() |>
select(-ibge_aloc, -n)
#|warning: FALSE
library(tidyverse)
library(readxl)
library(geosphere)
library(TraMineR)
library(TraMineRextras)
library(factoextra)
library(genderBR)
library(lubridate)
library(writexl)
library(RODBC)
library(estimatr)
library(plm)
#install.packages("plm")
cns_inscricao <-
read_excel("~/GitHub/sa_maismedicos/01_dados/Editais/2019/Edital_11_2019_resultado_cns.xlsx") |>
select(nome,
uf_aloc,
municipio_aloc,
ibge_aloc,
participou_pmmb,
data_nascimento,
data_formacao,
fase,
resultado) |>
rename(cns = resultado) |>
rename(municipio_destino = municipio_aloc) |>
rename(uf_destino = uf_aloc) |>
mutate(cns = as.character(cns)) |>
filter(!is.na(cns))
cns_inscricao <-
cns_inscricao |>
mutate(sexo = get_gender(nome)) |>
filter(!is.na(sexo))
# codigo para acessar dados de datalake proprio
dremio_host <- Sys.getenv("endereco")
dremio_port <- Sys.getenv("port")
dremio_uid <- Sys.getenv("uid")
dremio_pwd <- Sys.getenv("datalake")
channel <- odbcDriverConnect(
sprintf("DRIVER=Dremio Connector;
HOST=%s;
PORT=%s;
UID=%s;
PWD=%s;
AUTHENTICATIONTYPE=Basic Authentication;
CONNECTIONTYPE=Direct",
dremio_host,
dremio_port,
dremio_uid,
dremio_pwd))
query <- 'SELECT * FROM "@alef_santos"."Consulta_maismedicos_2019_cns"'
CNES_cns <- sqlQuery(channel, query,
as.is = TRUE)
#identificando os CPF
lista_cpf <- CNES_cns |>
filter(COMPETEN >= 201901) |>
mutate(CNS_PROF = as.character(CNS_PROF)) |>
select(CPF_PROF, CNS_PROF, NOMEPROF) |>
distinct(CPF_PROF)
# codigo para acessar dados de datalake proprio
dremio_host <- Sys.getenv("endereco")
dremio_port <- Sys.getenv("port")
dremio_uid <- Sys.getenv("uid")
dremio_pwd <- Sys.getenv("datalake")
channel <- odbcDriverConnect(
sprintf("DRIVER=Dremio Connector;
HOST=%s;
PORT=%s;
UID=%s;
PWD=%s;
AUTHENTICATIONTYPE=Basic Authentication;
CONNECTIONTYPE=Direct",
dremio_host,
dremio_port,
dremio_uid,
dremio_pwd))
query <- 'SELECT * FROM "@alef_santos"."Consulta_maismedicos_2019"'
CNES_cpf <- sqlQuery(channel,
query,
as.is = TRUE)
lista_cns_cpf <-
CNES_cns |>
filter(COMPETEN >= 201901) |>
mutate(CNS_PROF = as.character(CNS_PROF)) |>
select(CPF_PROF, CNS_PROF) |>
distinct(CPF_PROF, CNS_PROF)
cns_inscricao <-
cns_inscricao |>
left_join(lista_cns_cpf,
by = c("cns" = "CNS_PROF"))
base_tratada <- CNES_cpf |>
left_join(cns_inscricao,
by = c("CPF_PROF" = "CPF_PROF"))
# Convertendo competência para formato data
base_tratada$COMPETEN <-
as.Date(paste0(base_tratada$COMPETEN, "01"),
format = "%Y%m%d")
# metodo para identificar quem foi selecionado e de fato foi para o programa, inclusive sendo alocado em APS
temp <-
base_tratada |>
mutate(aps = if_else((TP_UNID == "02" |
TP_UNID == "01" |
TP_UNID == "32" |
TP_UNID == "71" |
TP_UNID == "72" |
TP_UNID == "74"),
"APS", "Outros")) |>
mutate(ano = year(COMPETEN)) |>
mutate(assumiu_programa =
if_else(ano == 2019 &
aps == 'APS' &
CODUFMUN == ibge_aloc,
"Foi alocado", "Não foi alocado")) |>
filter(assumiu_programa == "Foi alocado") |>
group_by(NOMEPROF, CPF_PROF, CNS_PROF) |>
slice_min(COMPETEN)
#Filtrando a base apenas com os médicos ingressantes
base_tratada2 <-
base_tratada |>
filter(CPF_PROF %in% temp$CPF_PROF) |>
janitor::clean_names() |>
mutate(ano = year(competen)) |>
select(ano, competen, ibge_aloc,
municipio_destino, uf_destino,
cnes, fantasia, nomeprof, cns_prof,
cpf_prof, data_nascimento,
data_formacao, participou_pmmb,
sexo) |>
filter(competen > '2019-05-01')
atuacao_previa <-
base_tratada |>
mutate(ano = year(COMPETEN)) |>
filter(ano < 2019 & CODUFMUN == ibge_aloc) |>
group_by(COMPETEN, ibge_aloc, CPF_PROF) |>
count() |>
group_by(ibge_aloc, CPF_PROF) |>
count() |>
mutate(atuacao_previa = "Sim") |>
mutate(anos_atuacao = n/12) |>
ungroup() |>
select(-ibge_aloc, -n)
base_tratada3 <-
base_tratada2 |>
left_join(atuacao_previa,
by = c("cpf_prof"="CPF_PROF"))
View(base_tratada3)
base_tratada3 <-
base_tratada2 |>
left_join(atuacao_previa,
by = c("cpf_prof"="CPF_PROF")) |>
mutate(atuacao_previa =
if_else(atuacao_previa == "Sim", "Sim", "Não"),
anos_atuacao =
if_else(anos_atuacao > 0, anos_atuacao, 0))
base_tratada3 <-
base_tratada2 |>
left_join(atuacao_previa,
by = c("cpf_prof"="CPF_PROF")) |>
mutate(atuacao_previa =
if_else(atuacao_previa == "Sim", "Sim", "Não")) |>
mutate(anos_atuacao =
if_else(anos_atuacao > 0, anos_atuacao, 0))
base_tratada3 <-
base_tratada2 |>
left_join(atuacao_previa,
by = c("cpf_prof"="CPF_PROF")) |>
mutate(atuacao_previa =
if_else(atuacao_previa == "Sim", "Sim", "Não"))
base_tratada3 <-
base_tratada2 |>
left_join(atuacao_previa,
by = c("cpf_prof"="CPF_PROF")) |>
mutate(atuacao_previa =
if_else(atuacao_previa == "Sim","Sim", "Não"))
atuacao <-
base_tratada |>
mutate(ano = year(COMPETEN)) |>
filter(ano < 2019 & CODUFMUN == ibge_aloc) |>
group_by(COMPETEN, ibge_aloc, CPF_PROF) |>
count() |>
group_by(ibge_aloc, CPF_PROF) |>
count() |>
mutate(atuacao_previa = "Sim") |>
mutate(anos_atuacao = n/12) |>
ungroup() |>
select(-ibge_aloc, -n)
base_tratada3 <-
base_tratada2 |>
left_join(atuacao,
by = c("cpf_prof"="CPF_PROF")) |>
mutate(atuacao_previa =
if_else(atuacao_previa == "Sim","Sim","Não"))
base_tratada3 <-
base_tratada2 |>
left_join(atuacao,
by = c("cpf_prof"="CPF_PROF")) |>
mutate(atuacao_previa =
if_else(atuacao_previa == "Sim","Sim","Não"))
base_tratada3 <-
base_tratada2 |>
left_join(atuacao,
by = c("cpf_prof"="CPF_PROF")) |>
mutate(atuacao_previa =
if_else(atuacao_previa == "Sim","Sim","Não"))
base_tratada3 <-
base_tratada2 |>
left_join(atuacao,
by = c("cpf_prof"="CPF_PROF")) |>
mutate(atuacao_previa =
if_else(atuacao_previa == "Sim","Sim","Não"))
View(base_tratada3)
base_tratada3$atuacao_previa[is.na(base_tratada3$atuacao_previa)] <- 0
base_tratada3$atuacao_previa[is.na(base_tratada3$atuacao_previa)] <- "Não"
base_tratada3 <-
base_tratada2 |>
left_join(atuacao,
by = c("cpf_prof"="CPF_PROF")) |>
mutate(atuacao_previa =
if_else(atuacao_previa == "Sim","Sim","Não"))
base_tratada3$atuacao_previa[is.na(base_tratada3$atuacao_previa)] <- "Não"
base_tratada3$anos_atuacao[is.na(base_tratada3$anos_atuacao)] <- 0
