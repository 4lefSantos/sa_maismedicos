dremio_host <- Sys.getenv("endereco")
dremio_port <- Sys.getenv("port")
dremio_uid <- Sys.getenv("uid")
dremio_pwd <- Sys.getenv("datalake")
channel <- odbcDriverConnect(sprintf("DRIVER=Dremio Connector;
HOST=%s;
PORT=%s;
UID=%s;
PWD=%s;
AUTHENTICATIONTYPE=Basic Authentication;
CONNECTIONTYPE=Direct",
dremio_host,
dremio_port,
dremio_uid,
dremio_pwd))
query <- 'SELECT * FROM "@alef_santos"."pmmb_pibpercapita"'
pib_percapita <- sqlQuery(channel, query,
as.is = TRUE)
base_tratada$ano_competencia <- year(base_tratada$COMPETEN)
pib_percapita$ano <- as.numeric(pib_percapita$ano)
teste <- base_tratada |>
left_join(pib_percapita, by = c("CODUFMUN" = "codigo_municipio", "ano_competencia" = "ano"))
View(teste)
View(pib_percapita)
pib_percapita <- pib_percapita |>
mutate(pib_percapita = as.numeric(pib_percapita$ano)) |>
mutate(codigo_municipio = substring(codigo_municipio,1,6))
pib_percapita <- pib_percapita |>
mutate(pib_percapita = as.numeric(pib_percapita)) |>
mutate(codigo_municipio = substring(codigo_municipio,1,6))
teste <- base_tratada |>
left_join(pib_percapita, by = c("CODUFMUN" = "codigo_municipio", "ano_competencia" = "ano"))
View(teste)
View(pib_percapita)
View(base_tratada)
=======
# install.packages("genderBR")
edital_1 <- read_excel("01_dados/Editais/2019/Edital N° 11 Maio de 2019 - PRIMEIRA FASE- CICLO 18 - RESULTADO.xlsx")
library(readxl)
(
edital_1 <- read_excel("01_dados/Editais/2019/Edital N° 11 Maio de 2019 - PRIMEIRA FASE- CICLO 18 - RESULTADO.xlsx")
edital_1 <- read_excel("01_dados/Editais/2019/Edital_11_maio_2019_primeira_fase_ciclo_18_resultado.xlsx")
edital_1 <- read_excel("01_dados/Editais/2019/Edital_11_maio_2019_primeira_fase_ciclo_18_resultado.xlsx")
View(edital_1)
edital_2_preliminar <- read_excel("01_dados/Editais/2019/Edital_11_maio_2019_segunda_fase_ciclo_18_preliminar.xlsx")
edital_2_resultado <- read_excel("01_dados/Editais/2019/Edital_11_maio_2019_segunda_fase_ciclo_18_resultado.xlsx")
View(edital_2_resultado)
View(edital_2_preliminar)
library(tidyverse)
edital_2_resultado <- read_excel("01_dados/Editais/2019/Edital_11_maio_2019_segunda_fase_ciclo_18_resultado.xlsx") |>
mutate(homolog = "Homologado")
View(edital_2_resultado)
edital_2_resultado <- read_excel("01_dados/Editais/2019/Edital_11_maio_2019_segunda_fase_ciclo_18_resultado.xlsx") |>
mutate(homolog = "Homologado") |>
select(NOME, homolog)
edital_2 <- edital_2_preliminar |>
left_join(edital_2_resultado, by = c("nome" == "NOME"))
edital_2 <- edital_2_preliminar |>
left_join(edital_2_resultado, by = c("nome" = "NOME"))
View(edital_2)
edital_2 <- edital_2_preliminar |>
left_join(edital_2_resultado, by = c("nome" = "NOME")) |>
filter(homolog == is.na())
edital_2 <- edital_2_preliminar |>
left_join(edital_2_resultado, by = c("nome" = "NOME")) |>
filter(is.na(homolog))
View(edital_2)
edital_2 <- edital_2_preliminar |>
left_join(edital_2_resultado, by = c("nome" = "NOME")) |>
filter(!is.na(homolog))
View(edital_2)
edital_1 <- read_excel("01_dados/Editais/2019/Edital_11_maio_2019_primeira_fase_ciclo_18_resultado.xlsx") |>
mutate(fase == "1")
edital_1 <- read_excel("01_dados/Editais/2019/Edital_11_maio_2019_primeira_fase_ciclo_18_resultado.xlsx") |>
mutate(fase = "1")
View(edital_1)
edital_2 <- edital_2_preliminar |>
left_join(edital_2_resultado, by = c("nome" = "NOME")) |>
filter(!is.na(homolog)) |>
mutate(fase = "2")
View(edital_2)
edital_2 <- edital_2 |>
select(-homolog)
edital <- bind_rows(edital_1, edital_2)
edital_2$ibge_2 <- as.character(edital_2$ibge_2)
edital_2$ibge_3 <- as.character(edital_2$ibge_3)
edital_2$ibge_4 <- as.character(edital_2$ibge_4)
edital <- bind_rows(edital_1, edital_2)
View(edital)
View(edital)
edital_1 <- read_excel("01_dados/Editais/2019/Edital_11_maio_2019_primeira_fase_ciclo_18_resultado.xlsx") |>
mutate(fase = "1")
edital_2_preliminar <- read_excel("01_dados/Editais/2019/Edital_11_maio_2019_segunda_fase_ciclo_18_preliminar.xlsx")
edital_2_resultado <- read_excel("01_dados/Editais/2019/Edital_11_maio_2019_segunda_fase_ciclo_18_resultado.xlsx") |>
mutate(homolog = "Homologado") |>
select(NOME, homolog)
edital_2 <- edital_2_preliminar |>
left_join(edital_2_resultado, by = c("nome" = "NOME")) |>
filter(!is.na(homolog)) |>
mutate(fase = "2")
edital_2 <- edital_2 |>
select(-homolog)
edital_2$ibge_2 <- as.character(edital_2$ibge_2)
edital_2$ibge_3 <- as.character(edital_2$ibge_3)
edital_2$ibge_4 <- as.character(edital_2$ibge_4)
edital <- bind_rows(edital_1, edital_2)
View(edital)
edital <- bind_rows(edital_1, edital_2) |>
select(-atendido)
View(edital)
library(writexl)
write_xlsx(edital, "01_dados/Editais/2019/Edital_11_2019_resultado.xlsx")
library(readxl)
library(tidyverse)
library(RSelenium)
library(wdman)
library(netstat)
library(writexl)
#Abrindo dataframe
edital <- read_excel("01_dados/Editais/2019/Edital_11_2019_resultado.xlsx")
binman::list_versions("chromedriver")
Sys.setlocale("LC_ALL", "C")
driver <- rsDriver(browser = "chrome",
chromever = "129.0.6668.70",
verbose = FALSE,
port = free_port())
remdr <- driver$client
remdr$maxWindowSize()
edital$resultado <- NA  # Cria a coluna de resultado inicialmente com NA
# Inicializando o dataframe com uma coluna para resultados
edital$resultado <- NA  # Cria a coluna de resultado inicialmente com NA
View(edital)
View(edital)
for (i in 1:nrow(edital)) {
# Abrindo o site
remdr$navigate('https://cnes.datasus.gov.br/pages/profissionais/consulta.jsp')
# Realizando a pesquisa
campo_pesquisa <- remdr$findElement(using = "css selector", value = "#pesquisaValue")
campo_pesquisa$sendKeysToElement(list(edital$nome[i], key = 'enter'))
# Aguardando o carregamento da p??gina
Sys.sleep(1)  # Aguarde um momento para garantir que a p??gina carregue
# Verificando se existe o elemento na segunda linha da tabela
existe_segunda_linha <- tryCatch({
remdr$findElement(using = "xpath", value = "/html/body/div[2]/main/div/div[2]/div/div[4]/table/tbody/tr[2]/td[1]")
}, error = function(e) {
NULL  # Retorna NULL se o elemento n??o for encontrado
})
# Se a segunda linha for encontrada, armazena NA e pula para o pr??ximo nome
if (!is.null(existe_segunda_linha)) {
edital$resultado[i] <- NA
print(paste("Nome:", edital$nome[i], "- Encontrado mais de um resultado, armazenando como NA."))
next  # Pula para o pr??ximo item do loop
}
# Tentando capturar o CNS da primeira linha com tryCatch para evitar erros se n??o for encontrado
CNS <- tryCatch({
remdr$findElement(using = "xpath", value = "/html/body/div[2]/main/div/div[2]/div/div[4]/table/tbody/tr/td[1]")
}, error = function(e) {
NULL  # Retorna NULL se ocorrer um erro
})
# Verifique se o elemento CNS foi encontrado
if (!is.null(CNS)) {
resultado <- CNS$getElementText()[[1]]  # Captura o texto do elemento
edital$resultado[i] <- resultado
print(paste("Nome:", edital$nome[i], "- Resultado encontrado:", resultado))
} else {
edital$resultado[i] <- NA  # Caso n??o haja resultados ou elemento n??o seja encontrado
print(paste("Nome:", edital$nome[i], "- Resultado n??o encontrado."))
}
}
View(edital)
write_xlsx(edital, "01_dados/Editais/2019/Edital_11_2019_resultado_cns.xlsx")
string_vetor <- edital$cns
# Exemplo de vetor no formato atual
string_vetor <- edital$resultado
string_vetor_sem_aspas_duplas <- gsub('^"|"$', '', string_vetor)
vetor <- unlist(strsplit(string_vetor_sem_aspas_duplas, ","))
vetor_com_aspas_simples <- paste0("'", vetor, "'")
resultado_final <- paste(vetor_com_aspas_simples, collapse = ",")
# Exibir o resultado
resultado_final (editado)
resultado_final(editado)
resultado_final
edital <- edital |>
filter(!is.na(resultado))
string_vetor <- edital$resultado
# Remover as aspas duplas do início e do fim
string_vetor_sem_aspas_duplas <- gsub('^"|"$', '', string_vetor)
# Dividir a string em um vetor de elementos separados por vírgula
vetor <- unlist(strsplit(string_vetor_sem_aspas_duplas, ","))
# Adicionar aspas simples em cada elemento
vetor_com_aspas_simples <- paste0("'", vetor, "'")
# Colapsar em uma única string separada por vírgulas
resultado_final <- paste(vetor_com_aspas_simples, collapse = ",")
# Exibir o resultado
resultado_final
View(edital)
>>>>>>> parent of 4eb6311 (UPDATE)
library(tidyverse)
library(readxl)
library(geosphere)
library(TraMineR)
library(TraMineRextras)
library(factoextra)
library(genderBR)
library(lubridate)
library(writexl)
library(RODBC)
#install.packages("lubridate")
View(base_tratada)
View(teste)
base_tratada <- base_tratada |>
left_join(pib_percapita, by = c("CODUFMUN" = "codigo_municipio", "ano_competencia" = "ano"))
# codigo para acessar dados de datalake proprio
dremio_host <- Sys.getenv("endereco")
dremio_port <- Sys.getenv("port")
dremio_uid <- Sys.getenv("uid")
dremio_pwd <- Sys.getenv("datalake")
channel <- odbcDriverConnect(sprintf("DRIVER=Dremio Connector;
HOST=%s;
PORT=%s;
UID=%s;
PWD=%s;
AUTHENTICATIONTYPE=Basic Authentication;
CONNECTIONTYPE=Direct",
dremio_host,
dremio_port,
dremio_uid,
dremio_pwd))
query <- 'SELECT * FROM "@alef_santos"."pmmb_leitos"'
leitos <- sqlQuery(channel, query,
as.is = TRUE)
View(leitos)
View(leitos)
leitos <- leitos |>
select(cnes, ano, qt_total) |>
mutate(ano = as.numeric(ano))
teste <- base_tratada |>
left_join(leitos, by = c("CNES" = "cnes", "ano_competencia" = "ano"))
View(teste)
teste <- base_tratada |>
left_join(leitos, by = c("CNES" = "cnes", "ano_competencia" = "ano")) |>
rename(qt_leitos = qt_total)
View(teste)
teste <- base_tratada |>
left_join(leitos, by = c("CNES" = "cnes", "ano_competencia" = "ano")) |>
rename(qt_leitos = qt_total) |>
mutate(qt_leitosmilhab = (qt_leitos/populacao)*1000)
View(teste)
teste <- base_tratada |>
left_join(leitos, by = c("CNES" = "cnes", "ano_competencia" = "ano")) |>
rename(qt_leitos = qt_total) |>
mutate(qt_leitos = as.numeric(qt_leitos))
mutate(qt_leitosmilhab = (qt_leitos/populacao)*1000)
teste <- base_tratada |>
left_join(leitos, by = c("CNES" = "cnes", "ano_competencia" = "ano")) |>
rename(qt_leitos = qt_total) |>
mutate(qt_leitos = as.numeric(qt_leitos))
mutate(qt_leitosmilhab = (qt_leitos/populacao)*1000)
View(teste)
teste <- leitos |>
select(cnes, ano, qt_total) |>
mutate(ano = as.numeric(ano))
teste <- base_tratada |>
left_join(leitos, by = c("CNES" = "cnes", "ano_competencia" = "ano")) |>
rename(qt_leitos = qt_total) |>
mutate(qt_leitos = as.numeric(qt_leitos))
mutate(qt_leitosmilhab = (qt_leitos/populacao)*1000)
teste <- base_tratada |>
left_join(leitos, by = c("CNES" = "cnes", "ano_competencia" = "ano")) |>
rename(qt_leitos = qt_total)
teste <- base_tratada |>
left_join(leitos, by = c("CNES" = "cnes", "ano_competencia" = "ano")) |>
rename(qt_leitos = qt_total) |>
mutate(qt_leitos = as.numeric(qt_leitos)) |>
mutate(qt_leitosmilhab = (qt_leitos/populacao)*1000)
View(teste)
teste <- base_tratada |>
left_join(leitos, by = c("CNES" = "cnes", "ano_competencia" = "ano")) |>
rename(qt_leitos_cnes = qt_total) |>
mutate(qt_leitos_cnes = as.numeric(qt_leitos_cnes))
base_tratada <- base_tratada |>
left_join(leitos, by = c("CNES" = "cnes", "ano_competencia" = "ano")) |>
rename(qt_leitos_cnes = qt_total) |>
mutate(qt_leitos_cnes = as.numeric(qt_leitos_cnes))
# codigo para acessar dados de datalake proprio
dremio_host <- Sys.getenv("endereco")
dremio_port <- Sys.getenv("port")
dremio_uid <- Sys.getenv("uid")
dremio_pwd <- Sys.getenv("datalake")
channel <- odbcDriverConnect(sprintf("DRIVER=Dremio Connector;
HOST=%s;
PORT=%s;
UID=%s;
PWD=%s;
AUTHENTICATIONTYPE=Basic Authentication;
CONNECTIONTYPE=Direct",
dremio_host,
dremio_port,
dremio_uid,
dremio_pwd))
query <- 'SELECT * FROM "@alef_santos"."pmmb_equipe_cnes"'
leitos <- sqlQuery(channel, query,
as.is = TRUE)
# codigo para acessar dados de datalake proprio
dremio_host <- Sys.getenv("endereco")
dremio_port <- Sys.getenv("port")
dremio_uid <- Sys.getenv("uid")
dremio_pwd <- Sys.getenv("datalake")
channel <- odbcDriverConnect(sprintf("DRIVER=Dremio Connector;
HOST=%s;
PORT=%s;
UID=%s;
PWD=%s;
AUTHENTICATIONTYPE=Basic Authentication;
CONNECTIONTYPE=Direct",
dremio_host,
dremio_port,
dremio_uid,
dremio_pwd))
query <- 'SELECT * FROM "@alef_santos"."pmmb_equipe_cnes"'
equipe_saude <- sqlQuery(channel, query,
as.is = TRUE)
View(equipe_saude)
teste <- equipe_saude |>
select(CNES, ano, FTE_40)
View(teste)
teste <- equipe_saude |>
select(CNES, ano, categoria, FTE_40)
View(teste)
aux <- equipe_saude |>
distinct(categoria)
View(aux)
teste <- equipe_saude |>
select(CNES, ano, categoria, FTE_40) |>
mutate(categoria = case_when(categoria =
"Técnico ou Auxiliar de Enfermagem" ~ "tec_aux_enf",
categoria = "Cirurgião Dentista" ~ "dentista",
categoria = "Agente Comunitário de Saúde" ~ "agente_saude",
categoria = "Enfermeiro" ~ "enfermeiro",
TRUE ~ NA))
teste <- equipe_saude |>
select(CNES, ano, categoria, FTE_40) |>
mutate(categoria = case_when(categoria ==
"Técnico ou Auxiliar de Enfermagem" ~ "tec_aux_enf",
categoria == "Cirurgião Dentista" ~ "dentista",
categoria == "Agente Comunitário de Saúde" ~ "agente_saude",
categoria == "Enfermeiro" ~ "enfermeiro",
TRUE ~ NA))
View(teste)
equipe_saude <- equipe_saude |>
select(CNES, ano, categoria, FTE_40) |>
mutate(categoria = case_when(categoria ==
"Técnico ou Auxiliar de Enfermagem" ~ "tec_aux_enf",
categoria == "Cirurgião Dentista" ~ "dentista",
categoria == "Agente Comunitário de Saúde" ~ "agente_saude",
categoria == "Enfermeiro" ~ "enfermeiro",
TRUE ~ NA))
View(equipe_saude)
teste <- equipe_saude |>
pivot_longer(cols = -c(CNES, ano),
names_to = categoria,
values_to = FTE_40)
View(equipe_saude)
teste <- equipe_saude |>
pivot_longer(equipe_saude, cols = -c(CNES, ano),
names_to = categoria,
values_to = FTE_40)
teste <- equipe_saude |>
pivot_longer(cols = -c(CNES, ano),
names_to = categoria,
values_to = FTE_40)
teste <- equipe_saude |>
pivot_longer(cols = -c(CNES, ano),
names_to = "categoria",
values_to = "FTE_40")
teste <- equipe_saude |>
pivot_longer(cols = -c(CNES, ano),
names_to = "categoria",
values_to = FTE_40)
teste <- equipe_saude |>
pivot_longer(cols = -c(CNES, ano),
names_to = "categoria",
values_to = "FTE_40")
teste <- equipe_saude |>
pivot_longer(
cols = where(is.numeric) & -c(CNES, ano),
names_to = "categoria",
values_to = "FTE_40"
)
teste <- equipe_saude |>
pivot_longer(
cols = where(is.numeric) & -c(CNES, ano),
names_to = "categoria_long",
values_to = "FTE_40"
)
View(teste)
teste <- equipe_saude |>
gather(key = "categoria", value = "FTE_40", -CNES, -ano)
View(teste)
teste <- equipe_saude |>
gather(key = "categoria", value = "FTE_40")
View(teste)
teste <- equipe_saude |>
spread(key = categoria, value = FTE_40)
View(equipe_saude)
teste <- equipe_saude |>
pivot_wider(names_from = categoria, values_from =  = FTE_40)
teste <- equipe_saude |>
pivot_wider(names_from = categoria, values_from = FTE_40)
View(teste)
View(teste)
View(equipe_saude)
# codigo para acessar dados de datalake proprio
dremio_host <- Sys.getenv("endereco")
dremio_port <- Sys.getenv("port")
dremio_uid <- Sys.getenv("uid")
dremio_pwd <- Sys.getenv("datalake")
channel <- odbcDriverConnect(sprintf("DRIVER=Dremio Connector;
HOST=%s;
PORT=%s;
UID=%s;
PWD=%s;
AUTHENTICATIONTYPE=Basic Authentication;
CONNECTIONTYPE=Direct",
dremio_host,
dremio_port,
dremio_uid,
dremio_pwd))
query <- 'SELECT * FROM "@alef_santos"."pmmb_equipe_cnes"'
equipe_saude <- sqlQuery(channel, query,
as.is = TRUE)
View(equipe_saude)
pop_ocupada_mun <- read_excel("01_dados/Editais/2019/pop_ocupada_mun.xlsx")
pop_ocupada_mun <- read_excel("C:/Users/alefs/OneDrive/Documentos/GitHub/sa_maismedicos/01_dados/Editais/2019/pop_ocupada_mun.xlsx")
View(pop_ocupada_mun)
teste <-  pop_ocupada_mun |>
select(-municipio) |>
pivot_longer(cols = -cod_ibge,
names_to = "ano",
values_to = "pop_ocupada")
teste <- pop_ocupada_mun |>
select(-municipio) |>
mutate(across(-cod_ibge, as.character)) |>  # Converte todas as colunas, exceto cod_ibge, para "character"
pivot_longer(
cols = -cod_ibge,
names_to = "ano",
values_to = "pop_ocupada"
)
View(teste)
teste <- pop_ocupada_mun |>
select(-municipio) |>
mutate(across(-cod_ibge, as.numeric)) |>  # Converte todas as colunas, exceto cod_ibge, para "character"
pivot_longer(
cols = -cod_ibge,
names_to = "ano",
values_to = "pop_ocupada"
)
View(teste)
pop_ocupada_mun <- read_excel("C:/Users/alefs/OneDrive/Documentos/GitHub/sa_maismedicos/01_dados/Editais/2019/pop_ocupada_mun.xlsx") |>
select(-municipio) |>
mutate(across(-cod_ibge, as.numeric)) |>  # Converte todas as colunas, exceto cod_ibge, para "character"
pivot_longer(
cols = -cod_ibge,
names_to = "ano",
values_to = "pop_ocupada"
)
View(pop_ocupada_mun)
View(base_tratada)
pop_ocupada_mun <- read_excel("C:/Users/alefs/OneDrive/Documentos/GitHub/sa_maismedicos/01_dados/Editais/2019/pop_ocupada_mun.xlsx") |>
select(-municipio) |>
mutate(across(-cod_ibge, as.numeric)) |>  # Converte todas as colunas, exceto cod_ibge, para "character"
pivot_longer(
cols = -cod_ibge,
names_to = "ano",
values_to = "pop_ocupada"
) |>
mutate(ano = as.numeric(ano))
View(pop_ocupada_mun)
pop_ocupada_mun <- read_excel("C:/Users/alefs/OneDrive/Documentos/GitHub/sa_maismedicos/01_dados/Editais/2019/pop_ocupada_mun.xlsx") |>
select(-municipio) |>
mutate(across(-cod_ibge, as.numeric)) |>  # Converte todas as colunas, exceto cod_ibge, para "character"
pivot_longer(
cols = -cod_ibge,
names_to = "ano",
values_to = "pop_ocupada"
) |>
mutate(ano = as.numeric(ano))
View(pop_ocupada_mun)
teste <- base_tratada |>
left_join(pop_ocupada_mun, by = c("CODUFMUN" = "cod_ibge", "ano_competencia" = "ano"))
View(teste)
pop_ocupada_mun <- read_excel("C:/Users/alefs/OneDrive/Documentos/GitHub/sa_maismedicos/01_dados/Editais/2019/pop_ocupada_mun.xlsx") |>
select(-municipio) |>
mutate(across(-cod_ibge, as.numeric)) |>  # Converte todas as colunas, exceto cod_ibge, para "character"
pivot_longer(
cols = -cod_ibge,
names_to = "ano",
values_to = "pop_ocupada"
) |>
mutate(ano = as.numeric(ano)) |>
mutate(cod_ibge = substring(cod_ibge,1,6))
teste <- base_tratada |>
left_join(pop_ocupada_mun, by = c("CODUFMUN" = "cod_ibge", "ano_competencia" = "ano"))
View(teste)
teste <- base_tratada |>
left_join(pop_ocupada_mun, by = c("CODUFMUN" = "cod_ibge", "ano_competencia" = "ano")) |>
mutate(tx_pop_ocupada = pop_ocupada/populacao)
View(teste)
base_tratada <- base_tratada |>
left_join(pop_ocupada_mun, by = c("CODUFMUN" = "cod_ibge", "ano_competencia" = "ano")) |>
mutate(tx_pop_ocupada = pop_ocupada/populacao)
View(base_tratada)
