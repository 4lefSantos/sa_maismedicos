base_tratada <-
maismedicos_completo |>
left_join(cns_inscricao, by = c("CNS_PROF" = "cns")) |>
mutate(COMPETEN = as.character(COMPETEN)) |>
mutate(ano = substr(COMPETEN, 1, 4)) |>
filter(COMPETEN == '201906' | COMPETEN == '202406') |>
mutate(mesma_cidade = if_else((municipio_destino == CODUFMUN), "Mesma cidade", "Outra cidade")) |>
mutate(mesmo_estado = if_else((uf_destino == uf_sigla), "Mesmo estado", "Outro estado")) |>
mutate(migracao = case_when(
# Do Norte para outras regiões
(uf_destino %in% c("AM", "AP", "TO", "AC", "RR", "RO", "PA")) &
uf_sigla %in% c("SC", "RS", "PR") ~ "Saiu do norte e foi para o sul",
(uf_destino %in% c("AM", "AP", "TO", "AC", "RR", "RO", "PA")) &
uf_sigla %in% c("SP", "RJ", "ES", "MG") ~ "Saiu do norte e foi para o sudeste",
(uf_destino %in% c("AM", "AP", "TO", "AC", "RR", "RO", "PA")) &
uf_sigla %in% c("GO", "MT", "MS", "DF") ~ "Saiu do norte e foi para o centro-oeste",
(uf_destino %in% c("AM", "AP", "TO", "AC", "RR", "RO", "PA")) &
uf_sigla %in% c("AM", "TO", "AP", "RR", "PA", "RO", "AC") ~ "Permaneceu no norte",
(uf_destino %in% c("AM", "AP", "TO", "AC", "RR", "RO", "PA")) &
uf_sigla %in% c("BA", "AL", "RN", "SE", "PI", "PB", "CE", "MA", "PE") ~ "Saiu do norte e foi para o nordeste",
# Do Nordeste para outras regiões
(uf_destino %in% c("BA", "AL", "RN", "SE", "PI", "PB", "CE", "MA", "PE")) &
uf_sigla %in% c("SC", "RS", "PR") ~ "Saiu do nordeste para o sul",
(uf_destino %in% c("BA", "AL", "RN", "SE", "PI", "PB", "CE", "MA", "PE")) &
uf_sigla %in% c("SP", "RJ", "ES", "MG") ~ "Saiu do nordeste e foi para o sudeste",
(uf_destino %in% c("BA", "AL", "RN", "SE", "PI", "PB", "CE", "MA", "PE")) &
uf_sigla %in% c("GO", "MT", "MS", "DF") ~ "Saiu do nordeste e foi para o centro-oeste",
(uf_destino %in% c("BA", "AL", "RN", "SE", "PI", "PB", "CE", "MA", "PE")) &
uf_sigla %in% c("BA", "AL", "RN", "SE", "PI", "PB", "CE", "MA", "PE") ~ "Permaneceu no nordeste",
(uf_destino %in% c("BA", "AL", "RN", "SE", "PI", "PB", "CE", "MA", "PE")) &
uf_sigla %in% c("AM", "AP", "TO", "AC", "RR", "RO", "PA") ~ "Saiu do nordeste e foi para o norte",
# Do Centro-Oeste para outras regiões
(uf_destino %in% c("GO", "MT", "MS", "DF")) &
uf_sigla %in% c("SC", "RS", "PR") ~ "Saiu do centro-oeste e foi para o sul",
(uf_destino %in% c("GO", "MT", "MS", "DF")) &
uf_sigla %in% c("SP", "RJ", "ES", "MG") ~ "Saiu do centro-oeste e foi para o sudeste",
(uf_destino %in% c("GO", "MT", "MS", "DF")) &
uf_sigla %in% c("BA", "AL", "RN", "SE", "PI", "PB", "CE", "MA", "PE") ~ "Saiu do centro-oeste e foi para o nordeste",
(uf_destino %in% c("GO", "MT", "MS", "DF")) &
uf_sigla %in% c("AM", "AP", "TO", "AC", "RR", "RO", "PA") ~ "Saiu do centro-oeste e foi para o norte",
(uf_destino %in% c("GO", "MT", "MS", "DF")) &
uf_sigla %in% c("GO", "MT", "MS", "DF") ~ "Permaneceu no centro-oeste",
# Do Sul para outras regiões
(uf_destino %in% c("SC", "RS", "PR")) &
uf_sigla %in% c("SP", "RJ", "ES", "MG") ~ "Saiu do sul e foi para o sudeste",
(uf_destino %in% c("SC", "RS", "PR")) &
uf_sigla %in% c("GO", "MT", "MS", "DF") ~ "Saiu do sul e foi para o centro-oeste",
(uf_destino %in% c("SC", "RS", "PR")) &
uf_sigla %in% c("AM", "AP", "TO", "AC", "RR", "RO", "PA") ~ "Saiu do sul e foi para o norte",
(uf_destino %in% c("SC", "RS", "PR")) &
uf_sigla %in% c("BA", "AL", "RN", "SE", "PI", "PB", "CE", "MA", "PE") ~ "Saiu do sul e foi para o nordeste",
(uf_destino %in% c("SC", "RS", "PR")) &
uf_sigla %in% c("SC", "RS", "PR") ~ "Permaneceu no sul",
# Do Sudeste para outras regiões
(uf_destino %in% c("SP", "RJ", "ES", "MG")) &
uf_sigla %in% c("GO", "MT", "MS", "DF") ~ "Saiu do sudeste e foi para o centro-oeste",
(uf_destino %in% c("SP", "RJ", "ES", "MG")) &
uf_sigla %in% c("AM", "AP", "TO", "AC", "RR", "RO", "PA") ~ "Saiu do sudeste e foi para o norte",
(uf_destino %in% c("SP", "RJ", "ES", "MG")) &
uf_sigla %in% c("SC", "RS", "PR") ~ "Saiu do sudeste e foi para o sul",
(uf_destino %in% c("SP", "RJ", "ES", "MG")) &
uf_sigla %in% c("BA", "AL", "RN", "SE", "PI", "PB", "CE", "MA", "PE") ~ "Saiu do sudeste e foi para o nordeste",
(uf_destino %in% c("SP", "RJ", "ES", "MG")) &
uf_sigla %in% c("SP", "RJ", "ES", "MG") ~ "Permaneceu no sudeste",
TRUE ~ "outros casos"
))
base_tratada |>
filter(ano == '2024') |>
group_by(NOMEPROF, mesmo_estado) |>
count() |>
ungroup() |>
group_by(mesmo_estado) |>
count() |>
ggplot(aes(x = mesmo_estado, y = n)) + geom_col()
base_tratada |>
filter(ano == '2024') |>
group_by(NOMEPROF, migracao) |>
count() |>
ungroup() |>
group_by(migracao) |>
count() |>
ggplot(aes(x = migracao, y = n)) + geom_col()
base_tratada |>
filter(ano == '2024') |>
group_by(NOMEPROF, migracao) |>
count() |>
ungroup() |>
group_by(migracao) |>
count() |>
ggplot(aes(x = migracao, y = n)) + geom_col() +
coord_flip()
library(tidyverse)
library(readxl)
library(geosphere)
library(TraMineR)
library(TraMineRextras)
library(factoextra)
library(genderBR)
library(lubridate)
library(writexl)
library(RODBC)
library(estimatr)
library(plm)
#install.packages("plm")
cns_inscricao <-
read_excel("~/GitHub/sa_maismedicos/01_dados/Editais/2019/Edital_11_2019_resultado_cns.xlsx") |>
select(nome, uf_aloc,
municipio_aloc, ibge_aloc,
participou_pmmb, data_nascimento,
data_formacao, fase, resultado) |>
rename(cns = resultado) |>
rename(municipio_destino = municipio_aloc) |>
rename(uf_destino = uf_aloc) |>
mutate(cns = as.character(cns)) |>
filter(!is.na(cns))
cns_inscricao <- cns_inscricao |>
mutate(sexo = get_gender(cns_inscricao$nome)) |>
filter(!is.na(sexo))
cns_inscricao <-
read_excel("~/GitHub/sa_maismedicos/01_dados/Editais/2019/Edital_11_2019_resultado_cns.xlsx") |>
select(nome, uf_aloc,
municipio_aloc, ibge_aloc,
participou_pmmb, data_nascimento,
data_formacao, fase, resultado) |>
rename(cns = resultado) |>
rename(municipio_destino = municipio_aloc) |>
rename(uf_destino = uf_aloc) |>
mutate(cns = as.character(cns)) |>
filter(!is.na(cns))
cns_inscricao <- cns_inscricao |>
mutate(sexo = get_gender(cns_inscricao$nome)) |>
filter(!is.na(sexo))
# codigo para acessar dados de datalake proprio
dremio_host <- Sys.getenv("endereco")
dremio_port <- Sys.getenv("port")
dremio_uid <- Sys.getenv("uid")
dremio_pwd <- Sys.getenv("datalake")
channel <- odbcDriverConnect(sprintf("DRIVER=Dremio Connector;
HOST=%s;
PORT=%s;
UID=%s;
PWD=%s;
AUTHENTICATIONTYPE=Basic Authentication;
CONNECTIONTYPE=Direct",
dremio_host,
dremio_port,
dremio_uid,
dremio_pwd))
query <- 'SELECT * FROM "@alef_santos"."Consulta_maismedicos_2019_cns"'
CNES_cns <- sqlQuery(channel, query,
as.is = TRUE)
cns_inscricao <-
read_excel("~/GitHub/sa_maismedicos/01_dados/Editais/2019/Edital_11_2019_resultado_cns.xlsx") |>
select(nome, uf_aloc,
municipio_aloc, ibge_aloc,
participou_pmmb, data_nascimento,
data_formacao, fase, resultado) |>
rename(cns = resultado) |>
rename(municipio_destino = municipio_aloc) |>
rename(uf_destino = uf_aloc) |>
mutate(cns = as.character(cns)) |>
filter(!is.na(cns))
cns_inscricao <- cns_inscricao |>
mutate(sexo = get_gender(cns_inscricao$nome)) |>
filter(!is.na(sexo))
# codigo para acessar dados de datalake proprio
dremio_host <- Sys.getenv("endereco")
dremio_port <- Sys.getenv("port")
dremio_uid <- Sys.getenv("uid")
dremio_pwd <- Sys.getenv("datalake")
channel <- odbcDriverConnect(sprintf("DRIVER=Dremio Connector;
HOST=%s;
PORT=%s;
UID=%s;
PWD=%s;
AUTHENTICATIONTYPE=Basic Authentication;
CONNECTIONTYPE=Direct",
dremio_host,
dremio_port,
dremio_uid,
dremio_pwd))
query <- 'SELECT * FROM "@alef_santos"."Consulta_maismedicos_2019_cns"'
CNES_cns <- sqlQuery(channel, query,
as.is = TRUE)
#identificando os CPF
lista_cpf <- CNES_cns |>
filter(COMPETEN >= 201901) |>
mutate(CNS_PROF = as.character(CNS_PROF)) |>
select(CPF_PROF, CNS_PROF, NOMEPROF) |>
distinct(CPF_PROF)
# codigo para acessar dados de datalake proprio
dremio_host <- Sys.getenv("endereco")
dremio_port <- Sys.getenv("port")
dremio_uid <- Sys.getenv("uid")
dremio_pwd <- Sys.getenv("datalake")
channel <- odbcDriverConnect(sprintf("DRIVER=Dremio Connector;
HOST=%s;
PORT=%s;
UID=%s;
PWD=%s;
AUTHENTICATIONTYPE=Basic Authentication;
CONNECTIONTYPE=Direct",
dremio_host,
dremio_port,
dremio_uid,
dremio_pwd))
query <- 'SELECT * FROM "@alef_santos"."Consulta_maismedicos_2019"'
CNES_cpf <- sqlQuery(channel, query,
as.is = TRUE)
lista_cns_cpf <- CNES_cns |>
filter(COMPETEN >= 201901) |>
mutate(CNS_PROF = as.character(CNS_PROF)) |>
select(CPF_PROF, CNS_PROF) |>
distinct(CPF_PROF, CNS_PROF)
cns_inscricao <- cns_inscricao |>
left_join(lista_cns_cpf, by = c("cns" = "CNS_PROF"))
base_tratada <-
CNES_cpf |>
left_join(cns_inscricao,
by = c("CPF_PROF" = "CPF_PROF"))
lista_cns_cpf <-
CNES_cns |>
filter(COMPETEN >= 201901) |>
mutate(CNS_PROF = as.character(CNS_PROF)) |>
select(CPF_PROF, CNS_PROF) |>
distinct(CPF_PROF, CNS_PROF)
cns_inscricao <-
cns_inscricao |>
left_join(lista_cns_cpf,
by = c("cns" = "CNS_PROF"))
base_tratada <- CNES_cpf |>
left_join(cns_inscricao,
by = c("CPF_PROF" = "CPF_PROF"))
lista_cns_cpf <-
CNES_cns |>
filter(COMPETEN >= 201901) |>
mutate(CNS_PROF = as.character(CNS_PROF)) |>
select(CPF_PROF, CNS_PROF) |>
distinct(CPF_PROF, CNS_PROF)
cns_inscricao <-
cns_inscricao |>
left_join(lista_cns_cpf,
by = c("cns" = "CNS_PROF"))
base_tratada <- CNES_cpf |>
left_join(cns_inscricao,
by = c("CPF_PROF" = "CPF_PROF"))
prorrogacao_ciclo18 <-
read_excel("~/GitHub/sa_maismedicos/01_dados/Editais/2019/prorrogacao_ciclo18.xlsx")
base_tratada <-
base_tratada |>
left_join(prorrogacao_ciclo18,
by = c("NOMEPROF" = "NOME")) |>
mutate(Prorrogado = ifelse(is.na(Prorrogado),
"NÃO", Prorrogado))
compet_inicio <-
base_tratada |>
filter(CODUFMUN == ibge_aloc,
TP_UNID == "02") |>
group_by(COMPETEN,
CNS_PROF) |>
ungroup(CNS_PROF) |>
distinct(CNS_PROF) |>
summarise(competencia_inicio = n())
base_tratada$COMPETEN <-
as.Date(paste0(base_tratada$COMPETEN, "01"),
format = "%Y%m%d")
# Convertendo a data de referência (competência) para o formato Date
competencia <- as.Date("2019-11-01")
# Calculando a idade em anos
base_tratada$idade <- trunc(as.numeric(interval(base_tratada$data_nascimento, competencia) / years(1)))
base_tratada$data_formacao <-
as.Date(paste("01",
base_tratada$data_formacao,
sep = "/"), format = "%d/%m/%Y")
# Calculando o tempo de formação
base_tratada$tempo_formacao <- trunc(as.numeric(interval(base_tratada$data_formacao, competencia) / years(1)))
base_tratada$data_formacao <-
as.Date(paste("01",
base_tratada$data_formacao,
sep = "/"), format = "%d/%m/%Y")
# Calculando o tempo de formação
base_tratada$tempo_formacao <- trunc(as.numeric(interval(base_tratada$data_formacao, competencia) / years(1)))
base_tratada$COMPETEN <-
as.Date(paste0(base_tratada$COMPETEN, "01"),
format = "%Y%m%d")
# Convertendo a data de referência (competência) para o formato Date
competencia <- as.Date("2019-11-01")
# Calculando a idade em anos
base_tratada$idade <- trunc(as.numeric(interval(base_tratada$data_nascimento, competencia) / years(1)))
base_tratada$data_formacao <-
as.Date(paste("01",
base_tratada$data_formacao,
sep = "/"), format = "%d/%m/%Y")
# Calculando o tempo de formação
base_tratada$tempo_formacao <- trunc(as.numeric(interval(base_tratada$data_formacao, competencia) / years(1)))
base_tratada$COMPETEN <-
as.Date(paste0(base_tratada$COMPETEN, "01"),
format = "%Y%m%d")
# Convertendo a data de referência (competência) para o formato Date
competencia <- as.Date("2019-11-01")
# Calculando a idade em anos
base_tratada$idade <- trunc(as.numeric(interval(base_tratada$data_nascimento, competencia) / years(1)))
base_tratada$data_formacao <-
as.Date(paste("01",
base_tratada$data_formacao,
sep = "/"), format = "%d/%m/%Y")
# Calculando o tempo de formação
base_tratada$tempo_formacao <- trunc(as.numeric(interval(base_tratada$data_formacao, competencia) / years(1)))
base_tratada <-
base_tratada |>
mutate(estava_na_cidade =
ifelse(COMPETEN ==
as.Date("2019-04-01") &
CODUFMUN == ibge_aloc,
"Sim",
"Não"))
cns_inscricao <-
cns_inscricao |>
mutate(sexo = get_gender(nome)) |>
filter(!is.na(sexo))
View(cns_inscricao)
View(cns_inscricao)
View(lista_cpf)
View(CNES_cns)
cns_inscricao <-
read_excel("~/GitHub/sa_maismedicos/01_dados/Editais/2019/Edital_11_2019_resultado_cns.xlsx") |>
select(nome,
uf_aloc,
municipio_aloc,
ibge_aloc,
participou_pmmb,
data_nascimento,
data_formacao,
fase,
resultado) |>
rename(cns = resultado) |>
rename(municipio_destino = municipio_aloc) |>
rename(uf_destino = uf_aloc) |>
mutate(cns = as.character(cns)) |>
filter(!is.na(cns))
cns_inscricao <-
cns_inscricao |>
mutate(sexo = get_gender(nome)) |>
filter(!is.na(sexo))
View(cns_inscricao)
View(base_tratada)
base_tratada <- CNES_cpf |>
left_join(cns_inscricao,
by = c("CPF_PROF" = "CPF_PROF"))
lista_cns_cpf <-
CNES_cns |>
filter(COMPETEN >= 201901) |>
mutate(CNS_PROF = as.character(CNS_PROF)) |>
select(CPF_PROF, CNS_PROF) |>
distinct(CPF_PROF, CNS_PROF)
cns_inscricao <-
cns_inscricao |>
left_join(lista_cns_cpf,
by = c("cns" = "CNS_PROF"))
base_tratada <- CNES_cpf |>
left_join(cns_inscricao,
by = c("CPF_PROF" = "CPF_PROF"))
prorrogacao_ciclo18 <-
read_excel("~/GitHub/sa_maismedicos/01_dados/Editais/2019/prorrogacao_ciclo18.xlsx")
base_tratada <-
base_tratada |>
left_join(prorrogacao_ciclo18,
by = c("NOMEPROF" = "NOME")) |>
mutate(Prorrogado = ifelse(is.na(Prorrogado),
"NÃO", Prorrogado))
View(base_tratada)
View(prorrogacao_ciclo18)
library(tidyverse)
library(readxl)
library(geosphere)
library(TraMineR)
library(TraMineRextras)
library(factoextra)
library(genderBR)
library(lubridate)
library(writexl)
library(RODBC)
library(estimatr)
library(plm)
#install.packages("plm")
cns_inscricao <-
read_excel("~/GitHub/sa_maismedicos/01_dados/Editais/2019/Edital_11_2019_resultado_cns.xlsx") |>
select(nome,
uf_aloc,
municipio_aloc,
ibge_aloc,
participou_pmmb,
data_nascimento,
data_formacao,
fase,
resultado) |>
rename(cns = resultado) |>
rename(municipio_destino = municipio_aloc) |>
rename(uf_destino = uf_aloc) |>
mutate(cns = as.character(cns)) |>
filter(!is.na(cns))
cns_inscricao <-
cns_inscricao |>
mutate(sexo = get_gender(nome)) |>
filter(!is.na(sexo))
# codigo para acessar dados de datalake proprio
dremio_host <- Sys.getenv("endereco")
dremio_port <- Sys.getenv("port")
dremio_uid <- Sys.getenv("uid")
dremio_pwd <- Sys.getenv("datalake")
channel <- odbcDriverConnect(
sprintf("DRIVER=Dremio Connector;
HOST=%s;
PORT=%s;
UID=%s;
PWD=%s;
AUTHENTICATIONTYPE=Basic Authentication;
CONNECTIONTYPE=Direct",
dremio_host,
dremio_port,
dremio_uid,
dremio_pwd))
query <- 'SELECT * FROM "@alef_santos"."Consulta_maismedicos_2019_cns"'
CNES_cns <- sqlQuery(channel, query,
as.is = TRUE)
#identificando os CPF
lista_cpf <- CNES_cns |>
filter(COMPETEN >= 201901) |>
mutate(CNS_PROF = as.character(CNS_PROF)) |>
select(CPF_PROF, CNS_PROF, NOMEPROF) |>
distinct(CPF_PROF)
# codigo para acessar dados de datalake proprio
dremio_host <- Sys.getenv("endereco")
dremio_port <- Sys.getenv("port")
dremio_uid <- Sys.getenv("uid")
dremio_pwd <- Sys.getenv("datalake")
channel <- odbcDriverConnect(
sprintf("DRIVER=Dremio Connector;
HOST=%s;
PORT=%s;
UID=%s;
PWD=%s;
AUTHENTICATIONTYPE=Basic Authentication;
CONNECTIONTYPE=Direct",
dremio_host,
dremio_port,
dremio_uid,
dremio_pwd))
query <- 'SELECT * FROM "@alef_santos"."Consulta_maismedicos_2019"'
CNES_cpf <- sqlQuery(channel,
query,
as.is = TRUE)
lista_cns_cpf <-
CNES_cns |>
filter(COMPETEN >= 201901) |>
mutate(CNS_PROF = as.character(CNS_PROF)) |>
select(CPF_PROF, CNS_PROF) |>
distinct(CPF_PROF, CNS_PROF)
cns_inscricao <-
cns_inscricao |>
left_join(lista_cns_cpf,
by = c("cns" = "CNS_PROF"))
base_tratada <- CNES_cpf |>
left_join(cns_inscricao,
by = c("CPF_PROF" = "CPF_PROF"))
prorrogacao_ciclo18 <-
read_excel("~/GitHub/sa_maismedicos/01_dados/Editais/2019/prorrogacao_ciclo18.xlsx")
base_tratada <-
base_tratada |>
left_join(prorrogacao_ciclo18,
by = c("NOMEPROF" = "NOME")) |>
mutate(Prorrogado = ifelse(is.na(Prorrogado),
"NÃO",
Prorrogado))
compet_inicio <-
base_tratada |>
filter(CODUFMUN == ibge_aloc,
TP_UNID == "02") |>
group_by(COMPETEN,
CNS_PROF) |>
ungroup(CNS_PROF) |>
distinct(CNS_PROF) |>
summarise(competencia_inicio = n())
base_tratada$COMPETEN <-
as.Date(paste0(base_tratada$COMPETEN, "01"),
format = "%Y%m%d")
# Convertendo a data de referência (competência) para o formato Date
competencia <- as.Date("2019-11-01")
# Calculando a idade em anos
base_tratada$idade <- trunc(as.numeric(interval(base_tratada$data_nascimento, competencia) / years(1)))
base_tratada$data_formacao <-
as.Date(paste("01",
base_tratada$data_formacao,
sep = "/"), format = "%d/%m/%Y")
# Calculando o tempo de formação
base_tratada$tempo_formacao <- trunc(as.numeric(interval(base_tratada$data_formacao, competencia) / years(1)))
base_tratada <-
base_tratada |>
mutate(estava_na_cidade =
ifelse(COMPETEN ==
as.Date("2019-04-01") &
CODUFMUN == ibge_aloc,
"Sim",
"Não"))
lista_cnes <- base_tratada |>
distinct(CNES)
lista_municipios <- base_tratada |>
distinct(CODUFMUN)
#Carregando a base de contigente populacional
pop_mun <- read_excel("C:/Users/alefs/OneDrive/Documentos/GitHub/sa_maismedicos/01_dados/pop_municipios.xlsx") |>
mutate(cod_mun = substr(cod_mun, 1, 6)) |>
mutate(populacao = as.numeric(populacao))
