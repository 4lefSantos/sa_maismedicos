dremio_port <- Sys.getenv("port")
dremio_uid <- Sys.getenv("uid")
dremio_pwd <- Sys.getenv("datalake")
channel <- odbcDriverConnect(sprintf("DRIVER=Dremio Connector;
HOST=%s;
PORT=%s;
UID=%s;
PWD=%s;
AUTHENTICATIONTYPE=Basic Authentication;
CONNECTIONTYPE=Direct",
dremio_host,
dremio_port,
dremio_uid,
dremio_pwd))
query <- 'SELECT * FROM "@alef_santos"."pmmb_equipe_cnes"'
leitos <- sqlQuery(channel, query,
as.is = TRUE)
# codigo para acessar dados de datalake proprio
dremio_host <- Sys.getenv("endereco")
dremio_port <- Sys.getenv("port")
dremio_uid <- Sys.getenv("uid")
dremio_pwd <- Sys.getenv("datalake")
channel <- odbcDriverConnect(sprintf("DRIVER=Dremio Connector;
HOST=%s;
PORT=%s;
UID=%s;
PWD=%s;
AUTHENTICATIONTYPE=Basic Authentication;
CONNECTIONTYPE=Direct",
dremio_host,
dremio_port,
dremio_uid,
dremio_pwd))
query <- 'SELECT * FROM "@alef_santos"."pmmb_equipe_cnes"'
equipe_saude <- sqlQuery(channel, query,
as.is = TRUE)
View(equipe_saude)
teste <- equipe_saude |>
select(CNES, ano, FTE_40)
View(teste)
teste <- equipe_saude |>
select(CNES, ano, categoria, FTE_40)
View(teste)
aux <- equipe_saude |>
distinct(categoria)
View(aux)
teste <- equipe_saude |>
select(CNES, ano, categoria, FTE_40) |>
mutate(categoria = case_when(categoria =
"Técnico ou Auxiliar de Enfermagem" ~ "tec_aux_enf",
categoria = "Cirurgião Dentista" ~ "dentista",
categoria = "Agente Comunitário de Saúde" ~ "agente_saude",
categoria = "Enfermeiro" ~ "enfermeiro",
TRUE ~ NA))
teste <- equipe_saude |>
select(CNES, ano, categoria, FTE_40) |>
mutate(categoria = case_when(categoria ==
"Técnico ou Auxiliar de Enfermagem" ~ "tec_aux_enf",
categoria == "Cirurgião Dentista" ~ "dentista",
categoria == "Agente Comunitário de Saúde" ~ "agente_saude",
categoria == "Enfermeiro" ~ "enfermeiro",
TRUE ~ NA))
View(teste)
equipe_saude <- equipe_saude |>
select(CNES, ano, categoria, FTE_40) |>
mutate(categoria = case_when(categoria ==
"Técnico ou Auxiliar de Enfermagem" ~ "tec_aux_enf",
categoria == "Cirurgião Dentista" ~ "dentista",
categoria == "Agente Comunitário de Saúde" ~ "agente_saude",
categoria == "Enfermeiro" ~ "enfermeiro",
TRUE ~ NA))
View(equipe_saude)
teste <- equipe_saude |>
pivot_longer(cols = -c(CNES, ano),
names_to = categoria,
values_to = FTE_40)
View(equipe_saude)
teste <- equipe_saude |>
pivot_longer(equipe_saude, cols = -c(CNES, ano),
names_to = categoria,
values_to = FTE_40)
teste <- equipe_saude |>
pivot_longer(cols = -c(CNES, ano),
names_to = categoria,
values_to = FTE_40)
teste <- equipe_saude |>
pivot_longer(cols = -c(CNES, ano),
names_to = "categoria",
values_to = "FTE_40")
teste <- equipe_saude |>
pivot_longer(cols = -c(CNES, ano),
names_to = "categoria",
values_to = FTE_40)
teste <- equipe_saude |>
pivot_longer(cols = -c(CNES, ano),
names_to = "categoria",
values_to = "FTE_40")
teste <- equipe_saude |>
pivot_longer(
cols = where(is.numeric) & -c(CNES, ano),
names_to = "categoria",
values_to = "FTE_40"
)
teste <- equipe_saude |>
pivot_longer(
cols = where(is.numeric) & -c(CNES, ano),
names_to = "categoria_long",
values_to = "FTE_40"
)
View(teste)
teste <- equipe_saude |>
gather(key = "categoria", value = "FTE_40", -CNES, -ano)
View(teste)
teste <- equipe_saude |>
gather(key = "categoria", value = "FTE_40")
View(teste)
teste <- equipe_saude |>
spread(key = categoria, value = FTE_40)
View(equipe_saude)
teste <- equipe_saude |>
pivot_wider(names_from = categoria, values_from =  = FTE_40)
teste <- equipe_saude |>
pivot_wider(names_from = categoria, values_from = FTE_40)
View(teste)
View(teste)
View(equipe_saude)
# codigo para acessar dados de datalake proprio
dremio_host <- Sys.getenv("endereco")
dremio_port <- Sys.getenv("port")
dremio_uid <- Sys.getenv("uid")
dremio_pwd <- Sys.getenv("datalake")
channel <- odbcDriverConnect(sprintf("DRIVER=Dremio Connector;
HOST=%s;
PORT=%s;
UID=%s;
PWD=%s;
AUTHENTICATIONTYPE=Basic Authentication;
CONNECTIONTYPE=Direct",
dremio_host,
dremio_port,
dremio_uid,
dremio_pwd))
query <- 'SELECT * FROM "@alef_santos"."pmmb_equipe_cnes"'
equipe_saude <- sqlQuery(channel, query,
as.is = TRUE)
View(equipe_saude)
pop_ocupada_mun <- read_excel("01_dados/Editais/2019/pop_ocupada_mun.xlsx")
pop_ocupada_mun <- read_excel("C:/Users/alefs/OneDrive/Documentos/GitHub/sa_maismedicos/01_dados/Editais/2019/pop_ocupada_mun.xlsx")
View(pop_ocupada_mun)
teste <-  pop_ocupada_mun |>
select(-municipio) |>
pivot_longer(cols = -cod_ibge,
names_to = "ano",
values_to = "pop_ocupada")
teste <- pop_ocupada_mun |>
select(-municipio) |>
mutate(across(-cod_ibge, as.character)) |>  # Converte todas as colunas, exceto cod_ibge, para "character"
pivot_longer(
cols = -cod_ibge,
names_to = "ano",
values_to = "pop_ocupada"
)
View(teste)
teste <- pop_ocupada_mun |>
select(-municipio) |>
mutate(across(-cod_ibge, as.numeric)) |>  # Converte todas as colunas, exceto cod_ibge, para "character"
pivot_longer(
cols = -cod_ibge,
names_to = "ano",
values_to = "pop_ocupada"
)
View(teste)
pop_ocupada_mun <- read_excel("C:/Users/alefs/OneDrive/Documentos/GitHub/sa_maismedicos/01_dados/Editais/2019/pop_ocupada_mun.xlsx") |>
select(-municipio) |>
mutate(across(-cod_ibge, as.numeric)) |>  # Converte todas as colunas, exceto cod_ibge, para "character"
pivot_longer(
cols = -cod_ibge,
names_to = "ano",
values_to = "pop_ocupada"
)
View(pop_ocupada_mun)
View(base_tratada)
pop_ocupada_mun <- read_excel("C:/Users/alefs/OneDrive/Documentos/GitHub/sa_maismedicos/01_dados/Editais/2019/pop_ocupada_mun.xlsx") |>
select(-municipio) |>
mutate(across(-cod_ibge, as.numeric)) |>  # Converte todas as colunas, exceto cod_ibge, para "character"
pivot_longer(
cols = -cod_ibge,
names_to = "ano",
values_to = "pop_ocupada"
) |>
mutate(ano = as.numeric(ano))
View(pop_ocupada_mun)
pop_ocupada_mun <- read_excel("C:/Users/alefs/OneDrive/Documentos/GitHub/sa_maismedicos/01_dados/Editais/2019/pop_ocupada_mun.xlsx") |>
select(-municipio) |>
mutate(across(-cod_ibge, as.numeric)) |>  # Converte todas as colunas, exceto cod_ibge, para "character"
pivot_longer(
cols = -cod_ibge,
names_to = "ano",
values_to = "pop_ocupada"
) |>
mutate(ano = as.numeric(ano))
View(pop_ocupada_mun)
teste <- base_tratada |>
left_join(pop_ocupada_mun, by = c("CODUFMUN" = "cod_ibge", "ano_competencia" = "ano"))
View(teste)
pop_ocupada_mun <- read_excel("C:/Users/alefs/OneDrive/Documentos/GitHub/sa_maismedicos/01_dados/Editais/2019/pop_ocupada_mun.xlsx") |>
select(-municipio) |>
mutate(across(-cod_ibge, as.numeric)) |>  # Converte todas as colunas, exceto cod_ibge, para "character"
pivot_longer(
cols = -cod_ibge,
names_to = "ano",
values_to = "pop_ocupada"
) |>
mutate(ano = as.numeric(ano)) |>
mutate(cod_ibge = substring(cod_ibge,1,6))
teste <- base_tratada |>
left_join(pop_ocupada_mun, by = c("CODUFMUN" = "cod_ibge", "ano_competencia" = "ano"))
View(teste)
teste <- base_tratada |>
left_join(pop_ocupada_mun, by = c("CODUFMUN" = "cod_ibge", "ano_competencia" = "ano")) |>
mutate(tx_pop_ocupada = pop_ocupada/populacao)
View(teste)
base_tratada <- base_tratada |>
left_join(pop_ocupada_mun, by = c("CODUFMUN" = "cod_ibge", "ano_competencia" = "ano")) |>
mutate(tx_pop_ocupada = pop_ocupada/populacao)
View(base_tratada)
library(tidyverse)
library(readxl)
library(geosphere)
library(TraMineR)
library(TraMineRextras)
library(factoextra)
library(genderBR)
library(lubridate)
library(writexl)
library(RODBC)
#install.packages("lubridate")
# codigo para acessar dados de datalake proprio
dremio_host <- Sys.getenv("endereco")
dremio_port <- Sys.getenv("port")
dremio_uid <- Sys.getenv("uid")
dremio_pwd <- Sys.getenv("datalake")
channel <- odbcDriverConnect(sprintf("DRIVER=Dremio Connector;
HOST=%s;
PORT=%s;
UID=%s;
PWD=%s;
AUTHENTICATIONTYPE=Basic Authentication;
CONNECTIONTYPE=Direct",
dremio_host,
dremio_port,
dremio_uid,
dremio_pwd))
query <- 'SELECT * FROM "@alef_santos"."pmmb_equipe_cnes"'
equipe_saude <- sqlQuery(channel, query,
as.is = TRUE)
View(equipe_saude)
equipe_saude <- equipe_saude |>
select(CNES, ano, categoria, FTE_40) |>
mutate(categoria = case_when(categoria ==
"Técnico ou Auxiliar de Enfermagem" ~ "tec_aux_enf",
categoria == "Cirurgião Dentista" ~ "dentista",
categoria == "Agente Comunitário de Saúde" ~ "agente_saude",
categoria == "Enfermeiro" ~ "enfermeiro",
TRUE ~ NA))
equipe_saude <- equipe_saude |>
select(CNES, ANO, categoria, FTE_40) |>
mutate(categoria = case_when(categoria ==
"Técnico ou Auxiliar de Enfermagem" ~ "tec_aux_enf",
categoria == "Cirurgião Dentista" ~ "dentista",
categoria == "Agente Comunitário de Saúde" ~ "agente_saude",
categoria == "Enfermeiro" ~ "enfermeiro",
TRUE ~ NA))
equipe_saude <- equipe_saude |>
select(CNES, ANO, categoria, FTE40) |>
mutate(categoria = case_when(categoria ==
"Técnico ou Auxiliar de Enfermagem" ~ "tec_aux_enf",
categoria == "Cirurgião Dentista" ~ "dentista",
categoria == "Agente Comunitário de Saúde" ~ "agente_saude",
categoria == "Enfermeiro" ~ "enfermeiro",
TRUE ~ NA))
teste <- equipe_saude |>
pivot_wider(names_from = categoria, values_from = FTE_40)
teste <- equipe_saude |>
pivot_wider(names_from = categoria, values_from = FTE40)
View(teste)
equipe_saude <- equipe_saude |>
select(CNES, ANO, categoria, FTE40) |>
mutate(categoria = case_when(categoria ==
"Técnico ou Auxiliar de Enfermagem" ~ "tec_aux_enf",
categoria == "Cirurgião Dentista" ~ "dentista",
categoria == "Agente Comunitário de Saúde" ~ "agente_saude",
categoria == "Enfermeiro" ~ "enfermeiro",
TRUE ~ NA)) |>
mutate(categoria == ifelse(is.na(categoria), 0, categoria))
teste <- equipe_saude |>
pivot_wider(names_from = categoria, values_from = FTE40)
# codigo para acessar dados de datalake proprio
dremio_host <- Sys.getenv("endereco")
dremio_port <- Sys.getenv("port")
dremio_uid <- Sys.getenv("uid")
dremio_pwd <- Sys.getenv("datalake")
channel <- odbcDriverConnect(sprintf("DRIVER=Dremio Connector;
HOST=%s;
PORT=%s;
UID=%s;
PWD=%s;
AUTHENTICATIONTYPE=Basic Authentication;
CONNECTIONTYPE=Direct",
dremio_host,
dremio_port,
dremio_uid,
dremio_pwd))
query <- 'SELECT * FROM "@alef_santos"."pmmb_equipe_cnes"'
equipe_saude <- sqlQuery(channel, query,
as.is = TRUE)
equipe_saude <- equipe_saude |>
select(CNES, ANO, categoria, FTE40) |>
mutate(categoria = case_when(categoria ==
"Técnico ou Auxiliar de Enfermagem" ~ "tec_aux_enf",
categoria == "Cirurgião Dentista" ~ "dentista",
categoria == "Agente Comunitário de Saúde" ~ "agente_saude",
categoria == "Enfermeiro" ~ "enfermeiro",
TRUE ~ NA)) |>
mutate(categoria == ifelse(is.na(categoria), 0, categoria))
teste <- equipe_saude |>
pivot_wider(names_from = categoria, values_from = FTE40)
View(teste)
View(equipe_saude)
# codigo para acessar dados de datalake proprio
dremio_host <- Sys.getenv("endereco")
dremio_port <- Sys.getenv("port")
dremio_uid <- Sys.getenv("uid")
dremio_pwd <- Sys.getenv("datalake")
channel <- odbcDriverConnect(sprintf("DRIVER=Dremio Connector;
HOST=%s;
PORT=%s;
UID=%s;
PWD=%s;
AUTHENTICATIONTYPE=Basic Authentication;
CONNECTIONTYPE=Direct",
dremio_host,
dremio_port,
dremio_uid,
dremio_pwd))
query <- 'SELECT * FROM "@alef_santos"."pmmb_equipe_cnes"'
equipe_saude <- sqlQuery(channel, query,
as.is = TRUE)
equipe_saude <- equipe_saude |>
select(CNES, ANO, categoria, FTE40) |>
mutate(categoria = case_when(categoria ==
"Técnico ou Auxiliar de Enfermagem" ~ "tec_aux_enf",
categoria == "Cirurgião Dentista" ~ "dentista",
categoria == "Agente Comunitário de Saúde" ~ "agente_saude",
categoria == "Enfermeiro" ~ "enfermeiro",
TRUE ~ NA)) |>
mutate(categoria = ifelse(is.na(categoria), 0, categoria))
teste <- equipe_saude |>
pivot_wider(names_from = categoria, values_from = FTE40)
# codigo para acessar dados de datalake proprio
dremio_host <- Sys.getenv("endereco")
dremio_port <- Sys.getenv("port")
dremio_uid <- Sys.getenv("uid")
dremio_pwd <- Sys.getenv("datalake")
channel <- odbcDriverConnect(sprintf("DRIVER=Dremio Connector;
HOST=%s;
PORT=%s;
UID=%s;
PWD=%s;
AUTHENTICATIONTYPE=Basic Authentication;
CONNECTIONTYPE=Direct",
dremio_host,
dremio_port,
dremio_uid,
dremio_pwd))
query <- 'SELECT * FROM "@alef_santos"."pmmb_equipe_cnes"'
equipe_saude <- sqlQuery(channel, query,
as.is = TRUE)
equipe_saude <- equipe_saude |>
select(CNES, ANO, categoria, FTE40) |>
mutate(categoria = case_when(categoria ==
"Técnico ou Auxiliar de Enfermagem" ~ "tec_aux_enf",
categoria == "Cirurgião Dentista" ~ "dentista",
categoria == "Agente Comunitário de Saúde" ~ "agente_saude",
categoria == "Enfermeiro" ~ "enfermeiro",
TRUE ~ NA)) |>
mutate(FTE40 = ifelse(is.na(FTE40), 0, FTE40))
teste <- equipe_saude |>
pivot_wider(names_from = categoria, values_from = FTE40)
View(teste)
View(equipe_saude)
# codigo para acessar dados de datalake proprio
dremio_host <- Sys.getenv("endereco")
dremio_port <- Sys.getenv("port")
dremio_uid <- Sys.getenv("uid")
dremio_pwd <- Sys.getenv("datalake")
channel <- odbcDriverConnect(sprintf("DRIVER=Dremio Connector;
HOST=%s;
PORT=%s;
UID=%s;
PWD=%s;
AUTHENTICATIONTYPE=Basic Authentication;
CONNECTIONTYPE=Direct",
dremio_host,
dremio_port,
dremio_uid,
dremio_pwd))
query <- 'SELECT * FROM "@alef_santos"."pmmb_equipe_cnes"'
equipe_saude <- sqlQuery(channel, query,
as.is = TRUE)
equipe_saude <- equipe_saude |>
select(CNES, ANO, categoria, FTE40) |>
mutate(categoria = case_when(categoria ==
"Técnico ou Auxiliar de Enfermagem" ~ "tec_aux_enf",
categoria == "Cirurgião Dentista" ~ "dentista",
categoria == "Agente Comunitário de Saúde" ~ "agente_saude",
categoria == "Enfermeiro" ~ "enfermeiro",
TRUE ~ NA)) |>
mutate(FTE40 = ifelse(is.na(FTE40), 0, FTE40))
teste <- equipe_saude |>
pivot_wider(names_from = categoria, values_from = FTE40)
teste <- equipe_saude |>
pivot_wider(names_from = categoria, values_from = FTE40) |>
mutate(across(3:6) = ifelse(is.na(across(3:6)), 0, across(3:6)))
teste <- equipe_saude |>
pivot_wider(names_from = categoria, values_from = FTE40) |>
mutate(across(3:6) == ifelse(is.na(across(3:6)), 0, across(3:6)))
teste <- equipe_saude |>
pivot_wider(names_from = categoria, values_from = FTE40) |>
mutate(across(3:6, ~ ifelse(is.na(.), 0, .)))
View(teste)
teste <- equipe_saude |>
pivot_wider(names_from = categoria, values_from = FTE40) |>
mutate(across(3:6, ~ ifelse(is.na(.), 0, .)))
View(teste)
equipe_saude <- equipe_saude |>
pivot_wider(names_from = categoria, values_from = FTE40) |>
mutate(across(3:6, ~ ifelse(is.na(.), 0, .)))
View(base_tratada)
equipe_saude$ANO <- as.numeric(equipe_saude$ANO)
teste <- base_tratada |>
left_join(equipe_saude, by  = c("CNES" = "CNES", "ano_competencia" = "ANO"))
View(teste)
equipe_saude <- equipe_saude |>
mutate(CNES = substring(CNES, 1, 6))
teste <- base_tratada |>
left_join(equipe_saude, by  = c("CNES" = "CNES", "ano_competencia" = "ANO"))
View(teste)
View(equipe_saude)
View(base_tratada)
teste <- base_tratada |>
left_join(equipe_saude, by  = c("CNES" = "CNES", "ano_competencia" = "ANO"))
View(teste)
# codigo para acessar dados de datalake proprio
dremio_host <- Sys.getenv("endereco")
dremio_port <- Sys.getenv("port")
dremio_uid <- Sys.getenv("uid")
dremio_pwd <- Sys.getenv("datalake")
channel <- odbcDriverConnect(sprintf("DRIVER=Dremio Connector;
HOST=%s;
PORT=%s;
UID=%s;
PWD=%s;
AUTHENTICATIONTYPE=Basic Authentication;
CONNECTIONTYPE=Direct",
dremio_host,
dremio_port,
dremio_uid,
dremio_pwd))
query <- 'SELECT * FROM "@alef_santos"."pmmb_equipe_cnes"'
equipe_saude <- sqlQuery(channel, query,
as.is = TRUE)
equipe_saude <- equipe_saude |>
select(CNES, ANO, categoria, FTE40) |>
mutate(categoria = case_when(categoria ==
"Técnico ou Auxiliar de Enfermagem" ~ "tec_aux_enf",
categoria == "Cirurgião Dentista" ~ "dentista",
categoria == "Agente Comunitário de Saúde" ~ "agente_saude",
categoria == "Enfermeiro" ~ "enfermeiro",
TRUE ~ NA)) |>
mutate(FTE40 = ifelse(is.na(FTE40), 0, FTE40))
View(base_tratada)
equipe_saude <- equipe_saude |>
pivot_wider(names_from = categoria, values_from = FTE40) |>
mutate(across(3:6, ~ ifelse(is.na(.), 0, .))) |>
mutate(ANO = as.numeric(ANO))
teste <- base_tratada |>
left_join(equipe_saude, by  = c("CNES" = "CNES", "ano_competencia" = "ANO"))
View(teste)
base_tratada <- base_tratada |>
left_join(equipe_saude, by  = c("CNES" = "CNES", "ano_competencia" = "ANO"))
View(compet_inicio)
teste <- base_tratada |>
filter(ano_competencia >= 2019)
cpf_validos <- base_tratada |>
filter(CODUFMUN == ibge_aloc & COMPETEN == as.Date("2019-11-01")) |>
select(CPF_PROF)
View(cpf_validos)
cpf_validos <- base_tratada |>
filter(CODUFMUN == ibge_aloc & COMPETEN == as.Date("2019-11-01")) |>
distinct(CPF_PROF)
View(cpf_validos)
base_tratada <- base_tratada |>
filter(ano_competencia >= 2019)
teste <- base_tratada |>
filter(CPF_PROF %in% cpf_validos$CPF_PROF)
View(teste)
View(equipe_saude)
View(teste)
base_tratada <- base_tratada |>
filter(CPF_PROF %in% cpf_validos$CPF_PROF)
View(base_tratada)
