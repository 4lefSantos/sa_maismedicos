count() %>%
pivot_wider(names_from = COMPETEN, values_from = n) %>%
mutate(percentual_female = `202406`/`201906`)
teste <- tabela_porte_male %>%
left_join(tabela_porte_female, by = c("porte"))
tabela_comparativa <- tabela_porte_male %>%
left_join(tabela_porte_female, by = c("porte"))
View(tabela_comparativa)
#Selecionando variaveis de interesse
base_final <- base_final |>
select(CNS_PROF, COMPETEN, porte, sexo)
#Transformando em dados largo
base_final_male <- base_final |>
filter(sexo == "Male") %>%
select(-sexo) %>%
pivot_wider(names_from = COMPETEN, values_from = porte)
#Renomeando os NA como SR
base_final_male <- base_final_male |>
mutate(across(2:64, ~ ifelse(is.na(.), "SR", .)))
tabela_porte_male <- base_final %>%
filter(sexo == "Male", COMPETEN %in% c(201906, 202406)) %>%
group_by(porte, COMPETEN) %>%
count() %>%
pivot_wider(names_from = COMPETEN, values_from = n) %>%
mutate(percentual_male = `202406`/`201906`)
View(tabela_porte_male)
tabela_porte_male <- base_final %>%
filter(sexo == "Male", COMPETEN %in% c(201906, 202406)) %>%
group_by(porte, COMPETEN) %>%
count() %>%
pivot_wider(names_from = COMPETEN, values_from = n) %>%
mutate(tx_retencao_male = `202406`/`201906`)
View(tabela_porte_female)
View(tabela_porte_male)
seq_male <- seqdef(base_final_male, var = 2:64)
seqtab(seq_male, idx=0) |>
nrow()
# Gráfico de estado
seqdplot(seq_male,
cex.legend=0.9,
main = "Gráfico de estados",
with.legend = "right")
# Gráfico de índices
seqIplot(seq_male,
main = "Gráficos de índices",
with.legend = "right")
seqtab(seq_male,
idxs = 1:40)
seq_female <- seqdef(base_final_female, var = 2:64)
seqtab(seq_male, idx=0) |>
nrow()
# Gráfico de estado
seqdplot(seq_female,
cex.legend=0.9,
main = "Gráfico de estados",
with.legend = "right")
# Gráfico de índices
seqIplot(seq_female,
main = "Gráficos de índices",
with.legend = "right")
seqtab(seq_female,
idxs = 1:40)
#|warning: false
# Definindo a matriz de dissimilaridades
couts <- seqsubm(seq_male,
method="CONSTANT",
cval=2)
dissim <- seqdist(seq_male,
method="OM",
sm=couts,
indel=1.5)
#|warning: false
# Definindo a matriz de dissimilaridades
couts <- seqsubm(seq_female,
method="CONSTANT",
cval=2)
dissim <- seqdist(seq_female,
method="OM",
sm=couts,
indel=1.5)
#|warning: false
# Definindo a matriz de dissimilaridades
couts_male <- seqsubm(seq_male,
method="CONSTANT",
cval=2)
dissim <- seqdist(seq_male,
method="OM",
sm=couts_male,
indel=1.5)
#|warning: false
# Definindo a matriz de dissimilaridades
couts_female <- seqsubm(seq_female,
method="CONSTANT",
cval=2)
dissim_female <- seqdist(seq_female,
method="OM",
sm=couts_female,
indel=1.5)
# aplicando PCA
mds_male <- cmdscale(dissim_male, k=2)  # Redução para 2 dimensões
#|warning: false
# Definindo a matriz de dissimilaridades
couts_male <- seqsubm(seq_male,
method="CONSTANT",
cval=2)
dissim <- seqdist(seq_male,
method="OM",
sm=couts_male,
indel=1.5)
# aplicando PCA
mds_male <- cmdscale(dissim_male, k=2)  # Redução para 2 dimensões
#|warning: false
# Definindo a matriz de dissimilaridades
couts_male <- seqsubm(seq_male,
method="CONSTANT",
cval=2)
dissim_male <- seqdist(seq_male,
method="OM",
sm=couts_male,
indel=1.5)
# aplicando PCA
mds_male <- cmdscale(dissim_male, k=2)  # Redução para 2 dimensões
mds_df_kmeans_male <- as.data.frame(mds_male)
colnames(mds_df_kmeans_male) <- c("Dim1",
"Dim2")
fviz_nbclust(mds_df_kmeans_male,
kmeans,
method = "wss")
set.seed(123)
mds_df_kmeans_male$sequencia_id <- 1:nrow(mds_df_kmeans_male)
kmeans_result_male <- kmeans(mds_df_kmeans_male[, c("Dim1", "Dim2")],
centers=5)
# 5. Adicione os resultados do cluster ao data frame
mds_df_kmeans_male$cluster <- as.factor(kmeans_result_male$cluster)
ggplot(mds_df_kmeans_male, aes(x=Dim1,
y=Dim2,
color=cluster)) +
geom_point(size=3) +
geom_label(aes(label=sequencia_id),
vjust=-1,
hjust=0.5,
size=3) +
labs(title="Gráfico de Dispersão com 3 Clusters",
x="Dimensão 1",
y="Dimensão 2") +
theme_minimal()
seqIplot(seq_male,
group = kmeans_result_male$cluster,
border = NA,
cex.axis = 1.5,
cex.lab = 1.5,
sortv = dissim_male)
# Carregando o pacote cluster (se ainda não estiver carregado)
library(cluster)
# Passo 1: Realizando o agrupamento hierárquico com agnes
agnes_male <- agnes(as.dist(dissim_male), method = "ward")
# Passo 2: Convertendo o resultado de agnes em hclust para plotar o dendrograma
dendrogram_male <- as.hclust(agnes_male)
# Passo 3: Configuração do layout para combinar o dendrograma e o gráfico de estados
layout(matrix(c(1,2), 1, 2), widths = c(1.5, 2))  # Dividindo a janela em duas partes: dendrograma e gráfico de estados
# Passo 4: Plotando o dendrograma na primeira parte
par(mar=c(5, 5, 2, 1))  # Ajuste das margens para o dendrograma
seqdplot(seq_male,
cex.legend = 0.9,
main = "Gráfico de Estados",
with.legend = "right")
par(mar=c(5, 4, 2, 2))  # Ajuste das margens para o gráfico de estados
seqIplot(seq_male,
cex.legend = 0.9,
main = "Gráfico de Estados",
with.legend = "right")
# Carregando o pacote cluster (se ainda não estiver carregado)
library(cluster)
# Passo 1: Realizando o agrupamento hierárquico com agnes
agnes_male <- agnes(as.dist(dissim_male), method = "ward")
# Passo 2: Convertendo o resultado de agnes em hclust para plotar o dendrograma
dendrogram_male <- as.hclust(agnes_male)
# Passo 3: Configuração do layout para combinar o dendrograma e o gráfico de estados
layout(matrix(c(1,2), 1, 2), widths = c(1.5, 2))  # Dividindo a janela em duas partes: dendrograma e gráfico de estados
# Passo 4: Plotando o dendrograma na primeira parte
par(mar=c(5, 5, 2, 1))  # Ajuste das margens para o dendrograma
plot(dendrogram_male, labels = FALSE, main = "Dendrograma", xlab = "Indivíduos", sub = "", cex = 0.6)
# Passo 5: Plotando o gráfico de estados na segunda parte
par(mar=c(5, 4, 2, 2))  # Ajuste das margens para o gráfico de estados
seqIplot(seq_male,
cex.legend = 0.9,
main = "Gráfico de Estados",
with.legend = "right")
plot(dendrogram_male, labels = FALSE, main = "Dendrograma", xlab = "Indivíduos", sub = "", cex = 0.6)
# Passo 2: Aplicar o agrupamento hierárquico
clust_male <- hclust(as.dist(diss_male), method = "ward.D2")
# Passo 1: Calcular a matriz de dissimilaridade
diss_male <- seqdist(seq_male, method = "OM")  # Exemplo com Optimal Matching
# Passo 1: Calcular a matriz de dissimilaridade
diss_male <- seqdist(seq_male, method = "OM")  # Exemplo com Optimal Matching
#|warning: false
# Definindo a matriz de dissimilaridades
couts_female <- seqsubm(seq_female,
method="CONSTANT",
cval=2)
dissim_female <- seqdist(seq_female,
method="OM",
sm=couts_female,
indel=1.5)
# Definindo a matriz de dissimilaridades
couts_female <- seqsubm(seq_female,
method="CONSTANT",
cval=2)
dissim_female <- seqdist(seq_female,
method="OM",
sm=couts_female,
indel=1.5)
# Definindo a matriz de dissimilaridades
couts_female <- seqsubm(seq_female,
method="CONSTANT",
cval=2)
dissim_female <- seqdist(seq_female,
method="OM",
sm=couts_female,
indel=1.5)
# aplicando PCA
mds_female <- cmdscale(dissim_female, k=2)  # Redução para 2 dimensões
mds_df_kmeans_female <- as.data.frame(mds_female)
colnames(mds_df_kmeans_female) <- c("Dim1",
"Dim2")
fviz_nbclust(mds_df_kmeans_female,
kmeans,
method = "wss")
set.seed(123)
mds_df_kmeans_female$sequencia_id <- 1:nrow(mds_df_kmeans_female)
kmeans_result_female <- kmeans(mds_df_kmeans_female[, c("Dim1", "Dim2")],
centers=5)
# 5. Adicione os resultados do cluster ao data frame
mds_df_kmeans_female$cluster <- as.factor(kmeans_result_female$cluster)
ggplot(mds_df_kmeans_female, aes(x=Dim1,
y=Dim2,
color=cluster)) +
geom_point(size=3) +
geom_label(aes(label=sequencia_id),
vjust=-1,
hjust=0.5,
size=3) +
labs(title="Gráfico de Dispersão com 3 Clusters",
x="Dimensão 1",
y="Dimensão 2") +
theme_minimal()
seqIplot(seq_female,
group = kmeans_result_female$cluster,
border = NA,
cex.axis = 1.5,
cex.lab = 1.5,
sortv = dissim)
library(readxl)
library(tidyverse)
library(RSelenium)
library(wdman)
library(netstat)
library(writexl)
edital <- read_excel("C:/Users/alefs/OneDrive/Documentos/GitHub/sa_maismedicos/01_dados/edital_maismedicos_2016.xlsx")
edital <- read_excel("C:/Users/alefs/OneDrive/Documentos/GitHub/sa_maismedicos/01_dados/edital_maismedicos_2016.xlsx")
View(edital)
edital <- read_excel("C:/Users/alefs/OneDrive/Documentos/GitHub/sa_maismedicos/01_dados/edital_maismedicos_2016.xlsx")
View(edital)
binman::list_versions("chromedriver")
Sys.setlocale("LC_ALL", "C")
driver <- rsDriver(browser = "chrome",
chromever = "129.0.6668.70",
verbose = FALSE,
port = free_port())
remdr <- driver$client
remdr$maxWindowSize()
# Inicializando o dataframe com uma coluna para resultados
edital$resultado <- NA  # Cria a coluna de resultado inicialmente com NA
# Loop atrav??s dos nomes na coluna "nome"
for (i in 1:nrow(edital)) {
# Abrindo o site
remdr$navigate('https://cnes.datasus.gov.br/pages/profissionais/consulta.jsp')
# Realizando a pesquisa
campo_pesquisa <- remdr$findElement(using = "css selector", value = "#pesquisaValue")
campo_pesquisa$sendKeysToElement(list(edital$nome[i], key = 'enter'))
# Aguardando o carregamento da p??gina
Sys.sleep(2)  # Aguarde um momento para garantir que a p??gina carregue
# Verificando se existe o elemento na segunda linha da tabela
existe_segunda_linha <- tryCatch({
remdr$findElement(using = "xpath", value = "/html/body/div[2]/main/div/div[2]/div/div[4]/table/tbody/tr[2]/td[1]")
}, error = function(e) {
NULL  # Retorna NULL se o elemento n??o for encontrado
})
# Se a segunda linha for encontrada, armazena NA e pula para o pr??ximo nome
if (!is.null(existe_segunda_linha)) {
edital$resultado[i] <- NA
print(paste("Nome:", edital$nome[i], "- Encontrado mais de um resultado, armazenando como NA."))
next  # Pula para o pr??ximo item do loop
}
# Tentando capturar o CNS da primeira linha com tryCatch para evitar erros se n??o for encontrado
CNS <- tryCatch({
remdr$findElement(using = "xpath", value = "/html/body/div[2]/main/div/div[2]/div/div[4]/table/tbody/tr/td[1]")
}, error = function(e) {
NULL  # Retorna NULL se ocorrer um erro
})
# Verifique se o elemento CNS foi encontrado
if (!is.null(CNS)) {
resultado <- CNS$getElementText()[[1]]  # Captura o texto do elemento
edital$resultado[i] <- resultado
print(paste("Nome:", edital$nome[i], "- Resultado encontrado:", resultado))
} else {
edital$resultado[i] <- NA  # Caso n??o haja resultados ou elemento n??o seja encontrado
print(paste("Nome:", edital$nome[i], "- Resultado n??o encontrado."))
}
}
View(edital)
write_xlsx(edital, "C:/Users/alefs/OneDrive/Documentos/GitHub/sa_maismedicos/dados/edital_maismedicos_2016_parte1_cns.xlsx")
write_xlsx(edital, "C:/Users/alefs/OneDrive/Documentos/edital_maismedicos_2016_parte1_cns.xlsx")
edital <- read_excel("C:/Users/alefs/OneDrive/Documentos/GitHub/sa_maismedicos/01_dados/edital_maismedicos_2016_parte2.xlsx")
edital <- read_excel("C:/Users/alefs/OneDrive/Documentos/GitHub/sa_maismedicos/01_dados/edital_maismedicos_2016_parte2.xlsx")
edital
# Inicializando o dataframe com uma coluna para resultados
edital$resultado <- NA  # Cria a coluna de resultado inicialmente com NA
# Loop atrav??s dos nomes na coluna "nome"
for (i in 1:nrow(edital)) {
# Abrindo o site
remdr$navigate('https://cnes.datasus.gov.br/pages/profissionais/consulta.jsp')
# Realizando a pesquisa
campo_pesquisa <- remdr$findElement(using = "css selector", value = "#pesquisaValue")
campo_pesquisa$sendKeysToElement(list(edital$nome[i], key = 'enter'))
# Aguardando o carregamento da p??gina
Sys.sleep(2)  # Aguarde um momento para garantir que a p??gina carregue
# Verificando se existe o elemento na segunda linha da tabela
existe_segunda_linha <- tryCatch({
remdr$findElement(using = "xpath", value = "/html/body/div[2]/main/div/div[2]/div/div[4]/table/tbody/tr[2]/td[1]")
}, error = function(e) {
NULL  # Retorna NULL se o elemento n??o for encontrado
})
# Se a segunda linha for encontrada, armazena NA e pula para o pr??ximo nome
if (!is.null(existe_segunda_linha)) {
edital$resultado[i] <- NA
print(paste("Nome:", edital$nome[i], "- Encontrado mais de um resultado, armazenando como NA."))
next  # Pula para o pr??ximo item do loop
}
# Tentando capturar o CNS da primeira linha com tryCatch para evitar erros se n??o for encontrado
CNS <- tryCatch({
remdr$findElement(using = "xpath", value = "/html/body/div[2]/main/div/div[2]/div/div[4]/table/tbody/tr/td[1]")
}, error = function(e) {
NULL  # Retorna NULL se ocorrer um erro
})
# Verifique se o elemento CNS foi encontrado
if (!is.null(CNS)) {
resultado <- CNS$getElementText()[[1]]  # Captura o texto do elemento
edital$resultado[i] <- resultado
print(paste("Nome:", edital$nome[i], "- Resultado encontrado:", resultado))
} else {
edital$resultado[i] <- NA  # Caso n??o haja resultados ou elemento n??o seja encontrado
print(paste("Nome:", edital$nome[i], "- Resultado n??o encontrado."))
}
}
View(edital)
# Loop atrav??s dos nomes na coluna "nome"
for (i in 1:nrow(edital)) {
# Abrindo o site
remdr$navigate('https://cnes.datasus.gov.br/pages/profissionais/consulta.jsp')
# Realizando a pesquisa
campo_pesquisa <- remdr$findElement(using = "css selector", value = "#pesquisaValue")
campo_pesquisa$sendKeysToElement(list(edital$nome[i], key = 'enter'))
# Aguardando o carregamento da p??gina
Sys.sleep(2)  # Aguarde um momento para garantir que a p??gina carregue
# Verificando se existe o elemento na segunda linha da tabela
existe_segunda_linha <- tryCatch({
remdr$findElement(using = "xpath", value = "/html/body/div[2]/main/div/div[2]/div/div[4]/table/tbody/tr[2]/td[1]")
}, error = function(e) {
NULL  # Retorna NULL se o elemento n??o for encontrado
})
# Se a segunda linha for encontrada, armazena NA e pula para o pr??ximo nome
if (!is.null(existe_segunda_linha)) {
edital$resultado[i] <- NA
print(paste("Nome:", edital$nome[i], "- Encontrado mais de um resultado, armazenando como NA."))
next  # Pula para o pr??ximo item do loop
}
# Tentando capturar o CNS da primeira linha com tryCatch para evitar erros se n??o for encontrado
CNS <- tryCatch({
remdr$findElement(using = "xpath", value = "/html/body/div[2]/main/div/div[2]/div/div[4]/table/tbody/tr/td[1]")
}, error = function(e) {
NULL  # Retorna NULL se ocorrer um erro
})
# Verifique se o elemento CNS foi encontrado
if (!is.null(CNS)) {
resultado <- CNS$getElementText()[[1]]  # Captura o texto do elemento
edital$resultado[i] <- resultado
print(paste("Nome:", edital$nome[i], "- Resultado encontrado:", resultado))
} else {
edital$resultado[i] <- NA  # Caso n??o haja resultados ou elemento n??o seja encontrado
print(paste("Nome:", edital$nome[i], "- Resultado n??o encontrado."))
}
}
edital <- read_excel("C:/Users/alefs/OneDrive/Documentos/GitHub/sa_maismedicos/01_dados/edital_maismedicos_2016_parte2.xlsx")
# Inicializando o dataframe com uma coluna para resultados
edital$resultado <- NA  # Cria a coluna de resultado inicialmente com NA
for (i in 1:nrow(edital)) {
# Abrindo o site
remdr$navigate('https://cnes.datasus.gov.br/pages/profissionais/consulta.jsp')
# Realizando a pesquisa
campo_pesquisa <- remdr$findElement(using = "css selector", value = "#pesquisaValue")
campo_pesquisa$sendKeysToElement(list(edital$nome[i], key = 'enter'))
# Aguardando o carregamento da p??gina
Sys.sleep(2)  # Aguarde um momento para garantir que a p??gina carregue
# Verificando se existe o elemento na segunda linha da tabela
existe_segunda_linha <- tryCatch({
remdr$findElement(using = "xpath", value = "/html/body/div[2]/main/div/div[2]/div/div[4]/table/tbody/tr[2]/td[1]")
}, error = function(e) {
NULL  # Retorna NULL se o elemento n??o for encontrado
})
# Se a segunda linha for encontrada, armazena NA e pula para o pr??ximo nome
if (!is.null(existe_segunda_linha)) {
edital$resultado[i] <- NA
print(paste("Nome:", edital$nome[i], "- Encontrado mais de um resultado, armazenando como NA."))
next  # Pula para o pr??ximo item do loop
}
# Tentando capturar o CNS da primeira linha com tryCatch para evitar erros se n??o for encontrado
CNS <- tryCatch({
remdr$findElement(using = "xpath", value = "/html/body/div[2]/main/div/div[2]/div/div[4]/table/tbody/tr/td[1]")
}, error = function(e) {
NULL  # Retorna NULL se ocorrer um erro
})
# Verifique se o elemento CNS foi encontrado
if (!is.null(CNS)) {
resultado <- CNS$getElementText()[[1]]  # Captura o texto do elemento
edital$resultado[i] <- resultado
print(paste("Nome:", edital$nome[i], "- Resultado encontrado:", resultado))
} else {
edital$resultado[i] <- NA  # Caso n??o haja resultados ou elemento n??o seja encontrado
print(paste("Nome:", edital$nome[i], "- Resultado n??o encontrado."))
}
}
#Abrindo dataframe
edital <- read_excel("C:/Users/alefs/OneDrive/Documentos/GitHub/sa_maismedicos/01_dados/edital_maismedicos_2016_parte2.xlsx")
#Abrindo dataframe
edital <- read_excel("C:/Users/alefs/OneDrive/Documentos/GitHub/sa_maismedicos/01_dados/edital_maismedicos_2016_parte2.xlsx")
# Inicializando o dataframe com uma coluna para resultados
edital$resultado <- NA  # Cria a coluna de resultado inicialmente com NA
for (i in 1:nrow(edital)) {
# Abrindo o site
remdr$navigate('https://cnes.datasus.gov.br/pages/profissionais/consulta.jsp')
# Realizando a pesquisa
campo_pesquisa <- remdr$findElement(using = "css selector", value = "#pesquisaValue")
campo_pesquisa$sendKeysToElement(list(edital$nome[i], key = 'enter'))
# Aguardando o carregamento da p??gina
Sys.sleep(2)  # Aguarde um momento para garantir que a p??gina carregue
# Verificando se existe o elemento na segunda linha da tabela
existe_segunda_linha <- tryCatch({
remdr$findElement(using = "xpath", value = "/html/body/div[2]/main/div/div[2]/div/div[4]/table/tbody/tr[2]/td[1]")
}, error = function(e) {
NULL  # Retorna NULL se o elemento n??o for encontrado
})
# Se a segunda linha for encontrada, armazena NA e pula para o pr??ximo nome
if (!is.null(existe_segunda_linha)) {
edital$resultado[i] <- NA
print(paste("Nome:", edital$nome[i], "- Encontrado mais de um resultado, armazenando como NA."))
next  # Pula para o pr??ximo item do loop
}
# Tentando capturar o CNS da primeira linha com tryCatch para evitar erros se n??o for encontrado
CNS <- tryCatch({
remdr$findElement(using = "xpath", value = "/html/body/div[2]/main/div/div[2]/div/div[4]/table/tbody/tr/td[1]")
}, error = function(e) {
NULL  # Retorna NULL se ocorrer um erro
})
# Verifique se o elemento CNS foi encontrado
if (!is.null(CNS)) {
resultado <- CNS$getElementText()[[1]]  # Captura o texto do elemento
edital$resultado[i] <- resultado
print(paste("Nome:", edital$nome[i], "- Resultado encontrado:", resultado))
} else {
edital$resultado[i] <- NA  # Caso n??o haja resultados ou elemento n??o seja encontrado
print(paste("Nome:", edital$nome[i], "- Resultado n??o encontrado."))
}
}
for (i in 1:nrow(edital)) {
# Abrindo o site
remdr$navigate('https://cnes.datasus.gov.br/pages/profissionais/consulta.jsp')
# Realizando a pesquisa
campo_pesquisa <- remdr$findElement(using = "css selector", value = "#pesquisaValue")
campo_pesquisa$sendKeysToElement(list(edital$nome[i], key = 'enter'))
# Aguardando o carregamento da p??gina
Sys.sleep(2)  # Aguarde um momento para garantir que a p??gina carregue
# Verificando se existe o elemento na segunda linha da tabela
existe_segunda_linha <- tryCatch({
remdr$findElement(using = "xpath", value = "/html/body/div[2]/main/div/div[2]/div/div[4]/table/tbody/tr[2]/td[1]")
}, error = function(e) {
NULL  # Retorna NULL se o elemento n??o for encontrado
})
# Se a segunda linha for encontrada, armazena NA e pula para o pr??ximo nome
if (!is.null(existe_segunda_linha)) {
edital$resultado[i] <- NA
print(paste("Nome:", edital$nome[i], "- Encontrado mais de um resultado, armazenando como NA."))
next  # Pula para o pr??ximo item do loop
}
# Tentando capturar o CNS da primeira linha com tryCatch para evitar erros se n??o for encontrado
CNS <- tryCatch({
remdr$findElement(using = "xpath", value = "/html/body/div[2]/main/div/div[2]/div/div[4]/table/tbody/tr/td[1]")
}, error = function(e) {
NULL  # Retorna NULL se ocorrer um erro
})
# Verifique se o elemento CNS foi encontrado
if (!is.null(CNS)) {
resultado <- CNS$getElementText()[[1]]  # Captura o texto do elemento
edital$resultado[i] <- resultado
print(paste("Nome:", edital$nome[i], "- Resultado encontrado:", resultado))
} else {
edital$resultado[i] <- NA  # Caso n??o haja resultados ou elemento n??o seja encontrado
print(paste("Nome:", edital$nome[i], "- Resultado n??o encontrado."))
}
}
View(edital)
write_xlsx(edital, "C:/Users/alefs/OneDrive/Documentos/edital_maismedicos_2016_parte2_cns.xlsx")
