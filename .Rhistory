seqIplot(seq_male,
cex.legend = 0.9,
main = "Gráfico de Estados",
with.legend = "right")
# Carregando o pacote cluster (se ainda não estiver carregado)
library(cluster)
# Passo 1: Realizando o agrupamento hierárquico com agnes
agnes_male <- agnes(as.dist(dissim_male), method = "ward")
# Passo 2: Convertendo o resultado de agnes em hclust para plotar o dendrograma
dendrogram_male <- as.hclust(agnes_male)
# Passo 3: Configuração do layout para combinar o dendrograma e o gráfico de estados
layout(matrix(c(1,2), 1, 2), widths = c(1.5, 2))  # Dividindo a janela em duas partes: dendrograma e gráfico de estados
# Passo 4: Plotando o dendrograma na primeira parte
par(mar=c(5, 5, 2, 1))  # Ajuste das margens para o dendrograma
plot(dendrogram_male, labels = FALSE, main = "Dendrograma", xlab = "Indivíduos", sub = "", cex = 0.6)
# Passo 5: Plotando o gráfico de estados na segunda parte
par(mar=c(5, 4, 2, 2))  # Ajuste das margens para o gráfico de estados
seqIplot(seq_male,
cex.legend = 0.9,
main = "Gráfico de Estados",
with.legend = "right")
plot(dendrogram_male, labels = FALSE, main = "Dendrograma", xlab = "Indivíduos", sub = "", cex = 0.6)
# Passo 2: Aplicar o agrupamento hierárquico
clust_male <- hclust(as.dist(diss_male), method = "ward.D2")
# Passo 1: Calcular a matriz de dissimilaridade
diss_male <- seqdist(seq_male, method = "OM")  # Exemplo com Optimal Matching
# Passo 1: Calcular a matriz de dissimilaridade
diss_male <- seqdist(seq_male, method = "OM")  # Exemplo com Optimal Matching
#|warning: false
# Definindo a matriz de dissimilaridades
couts_female <- seqsubm(seq_female,
method="CONSTANT",
cval=2)
dissim_female <- seqdist(seq_female,
method="OM",
sm=couts_female,
indel=1.5)
# Definindo a matriz de dissimilaridades
couts_female <- seqsubm(seq_female,
method="CONSTANT",
cval=2)
dissim_female <- seqdist(seq_female,
method="OM",
sm=couts_female,
indel=1.5)
# Definindo a matriz de dissimilaridades
couts_female <- seqsubm(seq_female,
method="CONSTANT",
cval=2)
dissim_female <- seqdist(seq_female,
method="OM",
sm=couts_female,
indel=1.5)
# aplicando PCA
mds_female <- cmdscale(dissim_female, k=2)  # Redução para 2 dimensões
mds_df_kmeans_female <- as.data.frame(mds_female)
colnames(mds_df_kmeans_female) <- c("Dim1",
"Dim2")
fviz_nbclust(mds_df_kmeans_female,
kmeans,
method = "wss")
set.seed(123)
mds_df_kmeans_female$sequencia_id <- 1:nrow(mds_df_kmeans_female)
kmeans_result_female <- kmeans(mds_df_kmeans_female[, c("Dim1", "Dim2")],
centers=5)
# 5. Adicione os resultados do cluster ao data frame
mds_df_kmeans_female$cluster <- as.factor(kmeans_result_female$cluster)
ggplot(mds_df_kmeans_female, aes(x=Dim1,
y=Dim2,
color=cluster)) +
geom_point(size=3) +
geom_label(aes(label=sequencia_id),
vjust=-1,
hjust=0.5,
size=3) +
labs(title="Gráfico de Dispersão com 3 Clusters",
x="Dimensão 1",
y="Dimensão 2") +
theme_minimal()
seqIplot(seq_female,
group = kmeans_result_female$cluster,
border = NA,
cex.axis = 1.5,
cex.lab = 1.5,
sortv = dissim)
library(readxl)
library(tidyverse)
library(RSelenium)
library(wdman)
library(netstat)
library(writexl)
edital <- read_excel("C:/Users/alefs/OneDrive/Documentos/GitHub/sa_maismedicos/01_dados/edital_maismedicos_2016.xlsx")
edital <- read_excel("C:/Users/alefs/OneDrive/Documentos/GitHub/sa_maismedicos/01_dados/edital_maismedicos_2016.xlsx")
View(edital)
edital <- read_excel("C:/Users/alefs/OneDrive/Documentos/GitHub/sa_maismedicos/01_dados/edital_maismedicos_2016.xlsx")
View(edital)
binman::list_versions("chromedriver")
Sys.setlocale("LC_ALL", "C")
driver <- rsDriver(browser = "chrome",
chromever = "129.0.6668.70",
verbose = FALSE,
port = free_port())
remdr <- driver$client
remdr$maxWindowSize()
# Inicializando o dataframe com uma coluna para resultados
edital$resultado <- NA  # Cria a coluna de resultado inicialmente com NA
# Loop atrav??s dos nomes na coluna "nome"
for (i in 1:nrow(edital)) {
# Abrindo o site
remdr$navigate('https://cnes.datasus.gov.br/pages/profissionais/consulta.jsp')
# Realizando a pesquisa
campo_pesquisa <- remdr$findElement(using = "css selector", value = "#pesquisaValue")
campo_pesquisa$sendKeysToElement(list(edital$nome[i], key = 'enter'))
# Aguardando o carregamento da p??gina
Sys.sleep(2)  # Aguarde um momento para garantir que a p??gina carregue
# Verificando se existe o elemento na segunda linha da tabela
existe_segunda_linha <- tryCatch({
remdr$findElement(using = "xpath", value = "/html/body/div[2]/main/div/div[2]/div/div[4]/table/tbody/tr[2]/td[1]")
}, error = function(e) {
NULL  # Retorna NULL se o elemento n??o for encontrado
})
# Se a segunda linha for encontrada, armazena NA e pula para o pr??ximo nome
if (!is.null(existe_segunda_linha)) {
edital$resultado[i] <- NA
print(paste("Nome:", edital$nome[i], "- Encontrado mais de um resultado, armazenando como NA."))
next  # Pula para o pr??ximo item do loop
}
# Tentando capturar o CNS da primeira linha com tryCatch para evitar erros se n??o for encontrado
CNS <- tryCatch({
remdr$findElement(using = "xpath", value = "/html/body/div[2]/main/div/div[2]/div/div[4]/table/tbody/tr/td[1]")
}, error = function(e) {
NULL  # Retorna NULL se ocorrer um erro
})
# Verifique se o elemento CNS foi encontrado
if (!is.null(CNS)) {
resultado <- CNS$getElementText()[[1]]  # Captura o texto do elemento
edital$resultado[i] <- resultado
print(paste("Nome:", edital$nome[i], "- Resultado encontrado:", resultado))
} else {
edital$resultado[i] <- NA  # Caso n??o haja resultados ou elemento n??o seja encontrado
print(paste("Nome:", edital$nome[i], "- Resultado n??o encontrado."))
}
}
View(edital)
write_xlsx(edital, "C:/Users/alefs/OneDrive/Documentos/GitHub/sa_maismedicos/dados/edital_maismedicos_2016_parte1_cns.xlsx")
write_xlsx(edital, "C:/Users/alefs/OneDrive/Documentos/edital_maismedicos_2016_parte1_cns.xlsx")
edital <- read_excel("C:/Users/alefs/OneDrive/Documentos/GitHub/sa_maismedicos/01_dados/edital_maismedicos_2016_parte2.xlsx")
edital <- read_excel("C:/Users/alefs/OneDrive/Documentos/GitHub/sa_maismedicos/01_dados/edital_maismedicos_2016_parte2.xlsx")
edital
# Inicializando o dataframe com uma coluna para resultados
edital$resultado <- NA  # Cria a coluna de resultado inicialmente com NA
# Loop atrav??s dos nomes na coluna "nome"
for (i in 1:nrow(edital)) {
# Abrindo o site
remdr$navigate('https://cnes.datasus.gov.br/pages/profissionais/consulta.jsp')
# Realizando a pesquisa
campo_pesquisa <- remdr$findElement(using = "css selector", value = "#pesquisaValue")
campo_pesquisa$sendKeysToElement(list(edital$nome[i], key = 'enter'))
# Aguardando o carregamento da p??gina
Sys.sleep(2)  # Aguarde um momento para garantir que a p??gina carregue
# Verificando se existe o elemento na segunda linha da tabela
existe_segunda_linha <- tryCatch({
remdr$findElement(using = "xpath", value = "/html/body/div[2]/main/div/div[2]/div/div[4]/table/tbody/tr[2]/td[1]")
}, error = function(e) {
NULL  # Retorna NULL se o elemento n??o for encontrado
})
# Se a segunda linha for encontrada, armazena NA e pula para o pr??ximo nome
if (!is.null(existe_segunda_linha)) {
edital$resultado[i] <- NA
print(paste("Nome:", edital$nome[i], "- Encontrado mais de um resultado, armazenando como NA."))
next  # Pula para o pr??ximo item do loop
}
# Tentando capturar o CNS da primeira linha com tryCatch para evitar erros se n??o for encontrado
CNS <- tryCatch({
remdr$findElement(using = "xpath", value = "/html/body/div[2]/main/div/div[2]/div/div[4]/table/tbody/tr/td[1]")
}, error = function(e) {
NULL  # Retorna NULL se ocorrer um erro
})
# Verifique se o elemento CNS foi encontrado
if (!is.null(CNS)) {
resultado <- CNS$getElementText()[[1]]  # Captura o texto do elemento
edital$resultado[i] <- resultado
print(paste("Nome:", edital$nome[i], "- Resultado encontrado:", resultado))
} else {
edital$resultado[i] <- NA  # Caso n??o haja resultados ou elemento n??o seja encontrado
print(paste("Nome:", edital$nome[i], "- Resultado n??o encontrado."))
}
}
View(edital)
# Loop atrav??s dos nomes na coluna "nome"
for (i in 1:nrow(edital)) {
# Abrindo o site
remdr$navigate('https://cnes.datasus.gov.br/pages/profissionais/consulta.jsp')
# Realizando a pesquisa
campo_pesquisa <- remdr$findElement(using = "css selector", value = "#pesquisaValue")
campo_pesquisa$sendKeysToElement(list(edital$nome[i], key = 'enter'))
# Aguardando o carregamento da p??gina
Sys.sleep(2)  # Aguarde um momento para garantir que a p??gina carregue
# Verificando se existe o elemento na segunda linha da tabela
existe_segunda_linha <- tryCatch({
remdr$findElement(using = "xpath", value = "/html/body/div[2]/main/div/div[2]/div/div[4]/table/tbody/tr[2]/td[1]")
}, error = function(e) {
NULL  # Retorna NULL se o elemento n??o for encontrado
})
# Se a segunda linha for encontrada, armazena NA e pula para o pr??ximo nome
if (!is.null(existe_segunda_linha)) {
edital$resultado[i] <- NA
print(paste("Nome:", edital$nome[i], "- Encontrado mais de um resultado, armazenando como NA."))
next  # Pula para o pr??ximo item do loop
}
# Tentando capturar o CNS da primeira linha com tryCatch para evitar erros se n??o for encontrado
CNS <- tryCatch({
remdr$findElement(using = "xpath", value = "/html/body/div[2]/main/div/div[2]/div/div[4]/table/tbody/tr/td[1]")
}, error = function(e) {
NULL  # Retorna NULL se ocorrer um erro
})
# Verifique se o elemento CNS foi encontrado
if (!is.null(CNS)) {
resultado <- CNS$getElementText()[[1]]  # Captura o texto do elemento
edital$resultado[i] <- resultado
print(paste("Nome:", edital$nome[i], "- Resultado encontrado:", resultado))
} else {
edital$resultado[i] <- NA  # Caso n??o haja resultados ou elemento n??o seja encontrado
print(paste("Nome:", edital$nome[i], "- Resultado n??o encontrado."))
}
}
edital <- read_excel("C:/Users/alefs/OneDrive/Documentos/GitHub/sa_maismedicos/01_dados/edital_maismedicos_2016_parte2.xlsx")
# Inicializando o dataframe com uma coluna para resultados
edital$resultado <- NA  # Cria a coluna de resultado inicialmente com NA
for (i in 1:nrow(edital)) {
# Abrindo o site
remdr$navigate('https://cnes.datasus.gov.br/pages/profissionais/consulta.jsp')
# Realizando a pesquisa
campo_pesquisa <- remdr$findElement(using = "css selector", value = "#pesquisaValue")
campo_pesquisa$sendKeysToElement(list(edital$nome[i], key = 'enter'))
# Aguardando o carregamento da p??gina
Sys.sleep(2)  # Aguarde um momento para garantir que a p??gina carregue
# Verificando se existe o elemento na segunda linha da tabela
existe_segunda_linha <- tryCatch({
remdr$findElement(using = "xpath", value = "/html/body/div[2]/main/div/div[2]/div/div[4]/table/tbody/tr[2]/td[1]")
}, error = function(e) {
NULL  # Retorna NULL se o elemento n??o for encontrado
})
# Se a segunda linha for encontrada, armazena NA e pula para o pr??ximo nome
if (!is.null(existe_segunda_linha)) {
edital$resultado[i] <- NA
print(paste("Nome:", edital$nome[i], "- Encontrado mais de um resultado, armazenando como NA."))
next  # Pula para o pr??ximo item do loop
}
# Tentando capturar o CNS da primeira linha com tryCatch para evitar erros se n??o for encontrado
CNS <- tryCatch({
remdr$findElement(using = "xpath", value = "/html/body/div[2]/main/div/div[2]/div/div[4]/table/tbody/tr/td[1]")
}, error = function(e) {
NULL  # Retorna NULL se ocorrer um erro
})
# Verifique se o elemento CNS foi encontrado
if (!is.null(CNS)) {
resultado <- CNS$getElementText()[[1]]  # Captura o texto do elemento
edital$resultado[i] <- resultado
print(paste("Nome:", edital$nome[i], "- Resultado encontrado:", resultado))
} else {
edital$resultado[i] <- NA  # Caso n??o haja resultados ou elemento n??o seja encontrado
print(paste("Nome:", edital$nome[i], "- Resultado n??o encontrado."))
}
}
#Abrindo dataframe
edital <- read_excel("C:/Users/alefs/OneDrive/Documentos/GitHub/sa_maismedicos/01_dados/edital_maismedicos_2016_parte2.xlsx")
#Abrindo dataframe
edital <- read_excel("C:/Users/alefs/OneDrive/Documentos/GitHub/sa_maismedicos/01_dados/edital_maismedicos_2016_parte2.xlsx")
# Inicializando o dataframe com uma coluna para resultados
edital$resultado <- NA  # Cria a coluna de resultado inicialmente com NA
for (i in 1:nrow(edital)) {
# Abrindo o site
remdr$navigate('https://cnes.datasus.gov.br/pages/profissionais/consulta.jsp')
# Realizando a pesquisa
campo_pesquisa <- remdr$findElement(using = "css selector", value = "#pesquisaValue")
campo_pesquisa$sendKeysToElement(list(edital$nome[i], key = 'enter'))
# Aguardando o carregamento da p??gina
Sys.sleep(2)  # Aguarde um momento para garantir que a p??gina carregue
# Verificando se existe o elemento na segunda linha da tabela
existe_segunda_linha <- tryCatch({
remdr$findElement(using = "xpath", value = "/html/body/div[2]/main/div/div[2]/div/div[4]/table/tbody/tr[2]/td[1]")
}, error = function(e) {
NULL  # Retorna NULL se o elemento n??o for encontrado
})
# Se a segunda linha for encontrada, armazena NA e pula para o pr??ximo nome
if (!is.null(existe_segunda_linha)) {
edital$resultado[i] <- NA
print(paste("Nome:", edital$nome[i], "- Encontrado mais de um resultado, armazenando como NA."))
next  # Pula para o pr??ximo item do loop
}
# Tentando capturar o CNS da primeira linha com tryCatch para evitar erros se n??o for encontrado
CNS <- tryCatch({
remdr$findElement(using = "xpath", value = "/html/body/div[2]/main/div/div[2]/div/div[4]/table/tbody/tr/td[1]")
}, error = function(e) {
NULL  # Retorna NULL se ocorrer um erro
})
# Verifique se o elemento CNS foi encontrado
if (!is.null(CNS)) {
resultado <- CNS$getElementText()[[1]]  # Captura o texto do elemento
edital$resultado[i] <- resultado
print(paste("Nome:", edital$nome[i], "- Resultado encontrado:", resultado))
} else {
edital$resultado[i] <- NA  # Caso n??o haja resultados ou elemento n??o seja encontrado
print(paste("Nome:", edital$nome[i], "- Resultado n??o encontrado."))
}
}
for (i in 1:nrow(edital)) {
# Abrindo o site
remdr$navigate('https://cnes.datasus.gov.br/pages/profissionais/consulta.jsp')
# Realizando a pesquisa
campo_pesquisa <- remdr$findElement(using = "css selector", value = "#pesquisaValue")
campo_pesquisa$sendKeysToElement(list(edital$nome[i], key = 'enter'))
# Aguardando o carregamento da p??gina
Sys.sleep(2)  # Aguarde um momento para garantir que a p??gina carregue
# Verificando se existe o elemento na segunda linha da tabela
existe_segunda_linha <- tryCatch({
remdr$findElement(using = "xpath", value = "/html/body/div[2]/main/div/div[2]/div/div[4]/table/tbody/tr[2]/td[1]")
}, error = function(e) {
NULL  # Retorna NULL se o elemento n??o for encontrado
})
# Se a segunda linha for encontrada, armazena NA e pula para o pr??ximo nome
if (!is.null(existe_segunda_linha)) {
edital$resultado[i] <- NA
print(paste("Nome:", edital$nome[i], "- Encontrado mais de um resultado, armazenando como NA."))
next  # Pula para o pr??ximo item do loop
}
# Tentando capturar o CNS da primeira linha com tryCatch para evitar erros se n??o for encontrado
CNS <- tryCatch({
remdr$findElement(using = "xpath", value = "/html/body/div[2]/main/div/div[2]/div/div[4]/table/tbody/tr/td[1]")
}, error = function(e) {
NULL  # Retorna NULL se ocorrer um erro
})
# Verifique se o elemento CNS foi encontrado
if (!is.null(CNS)) {
resultado <- CNS$getElementText()[[1]]  # Captura o texto do elemento
edital$resultado[i] <- resultado
print(paste("Nome:", edital$nome[i], "- Resultado encontrado:", resultado))
} else {
edital$resultado[i] <- NA  # Caso n??o haja resultados ou elemento n??o seja encontrado
print(paste("Nome:", edital$nome[i], "- Resultado n??o encontrado."))
}
}
View(edital)
write_xlsx(edital, "C:/Users/alefs/OneDrive/Documentos/edital_maismedicos_2016_parte2_cns.xlsx")
library(tidyverse)
library(readxl)
library(geosphere)
library(TraMineR)
library(TraMineRextras)
library(factoextra)
library(genderBR)
# install.packages("genderBR")
edital_1 <- read_excel("01_dados/Editais/2019/Edital N° 11 Maio de 2019 - PRIMEIRA FASE- CICLO 18 - RESULTADO.xlsx")
library(readxl)
(
edital_1 <- read_excel("01_dados/Editais/2019/Edital N° 11 Maio de 2019 - PRIMEIRA FASE- CICLO 18 - RESULTADO.xlsx")
edital_1 <- read_excel("01_dados/Editais/2019/Edital_11_maio_2019_primeira_fase_ciclo_18_resultado.xlsx")
edital_1 <- read_excel("01_dados/Editais/2019/Edital_11_maio_2019_primeira_fase_ciclo_18_resultado.xlsx")
View(edital_1)
edital_2_preliminar <- read_excel("01_dados/Editais/2019/Edital_11_maio_2019_segunda_fase_ciclo_18_preliminar.xlsx")
edital_2_resultado <- read_excel("01_dados/Editais/2019/Edital_11_maio_2019_segunda_fase_ciclo_18_resultado.xlsx")
View(edital_2_resultado)
View(edital_2_preliminar)
library(tidyverse)
edital_2_resultado <- read_excel("01_dados/Editais/2019/Edital_11_maio_2019_segunda_fase_ciclo_18_resultado.xlsx") |>
mutate(homolog = "Homologado")
View(edital_2_resultado)
edital_2_resultado <- read_excel("01_dados/Editais/2019/Edital_11_maio_2019_segunda_fase_ciclo_18_resultado.xlsx") |>
mutate(homolog = "Homologado") |>
select(NOME, homolog)
edital_2 <- edital_2_preliminar |>
left_join(edital_2_resultado, by = c("nome" == "NOME"))
edital_2 <- edital_2_preliminar |>
left_join(edital_2_resultado, by = c("nome" = "NOME"))
View(edital_2)
edital_2 <- edital_2_preliminar |>
left_join(edital_2_resultado, by = c("nome" = "NOME")) |>
filter(homolog == is.na())
edital_2 <- edital_2_preliminar |>
left_join(edital_2_resultado, by = c("nome" = "NOME")) |>
filter(is.na(homolog))
View(edital_2)
edital_2 <- edital_2_preliminar |>
left_join(edital_2_resultado, by = c("nome" = "NOME")) |>
filter(!is.na(homolog))
View(edital_2)
edital_1 <- read_excel("01_dados/Editais/2019/Edital_11_maio_2019_primeira_fase_ciclo_18_resultado.xlsx") |>
mutate(fase == "1")
edital_1 <- read_excel("01_dados/Editais/2019/Edital_11_maio_2019_primeira_fase_ciclo_18_resultado.xlsx") |>
mutate(fase = "1")
View(edital_1)
edital_2 <- edital_2_preliminar |>
left_join(edital_2_resultado, by = c("nome" = "NOME")) |>
filter(!is.na(homolog)) |>
mutate(fase = "2")
View(edital_2)
edital_2 <- edital_2 |>
select(-homolog)
edital <- bind_rows(edital_1, edital_2)
edital_2$ibge_2 <- as.character(edital_2$ibge_2)
edital_2$ibge_3 <- as.character(edital_2$ibge_3)
edital_2$ibge_4 <- as.character(edital_2$ibge_4)
edital <- bind_rows(edital_1, edital_2)
View(edital)
View(edital)
edital_1 <- read_excel("01_dados/Editais/2019/Edital_11_maio_2019_primeira_fase_ciclo_18_resultado.xlsx") |>
mutate(fase = "1")
edital_2_preliminar <- read_excel("01_dados/Editais/2019/Edital_11_maio_2019_segunda_fase_ciclo_18_preliminar.xlsx")
edital_2_resultado <- read_excel("01_dados/Editais/2019/Edital_11_maio_2019_segunda_fase_ciclo_18_resultado.xlsx") |>
mutate(homolog = "Homologado") |>
select(NOME, homolog)
edital_2 <- edital_2_preliminar |>
left_join(edital_2_resultado, by = c("nome" = "NOME")) |>
filter(!is.na(homolog)) |>
mutate(fase = "2")
edital_2 <- edital_2 |>
select(-homolog)
edital_2$ibge_2 <- as.character(edital_2$ibge_2)
edital_2$ibge_3 <- as.character(edital_2$ibge_3)
edital_2$ibge_4 <- as.character(edital_2$ibge_4)
edital <- bind_rows(edital_1, edital_2)
View(edital)
edital <- bind_rows(edital_1, edital_2) |>
select(-atendido)
View(edital)
library(writexl)
write_xlsx(edital, "01_dados/Editais/2019/Edital_11_2019_resultado.xlsx")
library(readxl)
library(tidyverse)
library(RSelenium)
library(wdman)
library(netstat)
library(writexl)
#Abrindo dataframe
edital <- read_excel("01_dados/Editais/2019/Edital_11_2019_resultado.xlsx")
binman::list_versions("chromedriver")
Sys.setlocale("LC_ALL", "C")
driver <- rsDriver(browser = "chrome",
chromever = "129.0.6668.70",
verbose = FALSE,
port = free_port())
remdr <- driver$client
remdr$maxWindowSize()
edital$resultado <- NA  # Cria a coluna de resultado inicialmente com NA
# Inicializando o dataframe com uma coluna para resultados
edital$resultado <- NA  # Cria a coluna de resultado inicialmente com NA
View(edital)
View(edital)
for (i in 1:nrow(edital)) {
# Abrindo o site
remdr$navigate('https://cnes.datasus.gov.br/pages/profissionais/consulta.jsp')
# Realizando a pesquisa
campo_pesquisa <- remdr$findElement(using = "css selector", value = "#pesquisaValue")
campo_pesquisa$sendKeysToElement(list(edital$nome[i], key = 'enter'))
# Aguardando o carregamento da p??gina
Sys.sleep(1)  # Aguarde um momento para garantir que a p??gina carregue
# Verificando se existe o elemento na segunda linha da tabela
existe_segunda_linha <- tryCatch({
remdr$findElement(using = "xpath", value = "/html/body/div[2]/main/div/div[2]/div/div[4]/table/tbody/tr[2]/td[1]")
}, error = function(e) {
NULL  # Retorna NULL se o elemento n??o for encontrado
})
# Se a segunda linha for encontrada, armazena NA e pula para o pr??ximo nome
if (!is.null(existe_segunda_linha)) {
edital$resultado[i] <- NA
print(paste("Nome:", edital$nome[i], "- Encontrado mais de um resultado, armazenando como NA."))
next  # Pula para o pr??ximo item do loop
}
# Tentando capturar o CNS da primeira linha com tryCatch para evitar erros se n??o for encontrado
CNS <- tryCatch({
remdr$findElement(using = "xpath", value = "/html/body/div[2]/main/div/div[2]/div/div[4]/table/tbody/tr/td[1]")
}, error = function(e) {
NULL  # Retorna NULL se ocorrer um erro
})
# Verifique se o elemento CNS foi encontrado
if (!is.null(CNS)) {
resultado <- CNS$getElementText()[[1]]  # Captura o texto do elemento
edital$resultado[i] <- resultado
print(paste("Nome:", edital$nome[i], "- Resultado encontrado:", resultado))
} else {
edital$resultado[i] <- NA  # Caso n??o haja resultados ou elemento n??o seja encontrado
print(paste("Nome:", edital$nome[i], "- Resultado n??o encontrado."))
}
}
View(edital)
write_xlsx(edital, "01_dados/Editais/2019/Edital_11_2019_resultado_cns.xlsx")
string_vetor <- edital$cns
# Exemplo de vetor no formato atual
string_vetor <- edital$resultado
string_vetor_sem_aspas_duplas <- gsub('^"|"$', '', string_vetor)
vetor <- unlist(strsplit(string_vetor_sem_aspas_duplas, ","))
vetor_com_aspas_simples <- paste0("'", vetor, "'")
resultado_final <- paste(vetor_com_aspas_simples, collapse = ",")
# Exibir o resultado
resultado_final (editado)
resultado_final(editado)
resultado_final
edital <- edital |>
filter(!is.na(resultado))
string_vetor <- edital$resultado
# Remover as aspas duplas do início e do fim
string_vetor_sem_aspas_duplas <- gsub('^"|"$', '', string_vetor)
# Dividir a string em um vetor de elementos separados por vírgula
vetor <- unlist(strsplit(string_vetor_sem_aspas_duplas, ","))
# Adicionar aspas simples em cada elemento
vetor_com_aspas_simples <- paste0("'", vetor, "'")
# Colapsar em uma única string separada por vírgulas
resultado_final <- paste(vetor_com_aspas_simples, collapse = ",")
# Exibir o resultado
resultado_final
View(edital)
