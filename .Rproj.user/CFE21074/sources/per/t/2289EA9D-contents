---
title: "sa_fluxo_migratorio"
format: html
editor: visual
---

## Sequence Analysis: Mais Médicos

O objetivo do presente trabalho é aplicar uma Análise de Sequência para compreender a trajetório profissional de médicos convocados no programa Mais Médicos através da PORTARIA Nº 30, DE 18 DE FEVEREIRO DE 2019 que prevê:

"Divulga a relação dos médicos brasileiros formados em instituições de educação superior estrangeiras com habilitação para o exercício da medicina no exterior, que obtiveram êxito na escolha de vagas com respectivas alocações, no âmbito do Projeto Mais Médicos para o Brasil, na chamada pública do Edital SGTES/MS nº 22, de 7 de dezembro de 2018, nos termos do subitem 4.5.11 e 9.1."

Na primeira seção será realizada o tratamento da base de dados.

```{r}

library(tidyverse)
library(readxl)
library(geosphere)
library(TraMineR)
library(TraMineRextras)
library(factoextra)
library(genderBR)
# install.packages("genderBR")


```

### 1. Tratamento de dados.

Primeiramente, carregaremos os profissionais convocados pela portaria. Utilizaremos a função `get_gender` para identificação do gênero.

```{r}

cns_inscricao <- read_excel("C:/Users/alefs/OneDrive/Documentos/GitHub/sa_maismedicos/01_dados/edital_maismedicos_cns.xlsx") |> 
  select(cod_ibge, nome, resultado, uf) |> 
  rename(cns = resultado) |> 
  rename(municipio_destino = cod_ibge) |> 
  rename(uf_destino = uf) |> 
  mutate(cns = as.numeric(cns)) %>% 
  mutate(sexo = get_gender(cns_inscricao$nome))


```

Identificado a lista de nome dos profissionais convocados, foi realizado um web scraping (disponível em outro script) no site do Cadastro Nacional de Estabelecimentos de Saúde (CNES) para identificar os respectivos CNS, identificando 1218 médicos.

Através dos CNS's, foram coletados através de consulta SQL no datalake, o histórico profissional, também da fonte de dados CNES, que será carregado abaixo.

Integraremos a informação do municipio e unidade federativa para quais os profissionais foram chamados no mesmo dataframe.

Filtraremos a competência posterior ao ano de 2019, que se refere a competência de início de exercício no programa Mais Médicos.

```{r}

maismedicos_completo <- read_csv("C:/Users/alefs/OneDrive/Documentos/GitHub/sa_maismedicos/01_dados/maismedicos_completo.csv")

base_tratada <- 
  maismedicos_completo |> 
  left_join(cns_inscricao, by = c("CNS_PROF" = "cns"))

base_tratada <- base_tratada |> 
  filter(COMPETEN >= 201901)

base_tratada$CNS_PROF <- as.character(base_tratada$CNS_PROF)
```

No entanto, os profissionais começaram a atuar nos municípios onde foram convocados em diferentes períodos. Para identificar esses períodos, realizamos uma contagem por competência.

Por decisão dos analistas, delimitamos os profissionais que iniciaram até a competência 06-2019 (893 médicos), aqueles que iniciaram posteriormente, por simplicidade, não foram agregados na análise. Filtraremos apenas as competências posterior a 06-2019.

Foi aplicado filtro para retirar os profissionais nos quais a função não conseguiu identificar o gênero (62 médicos). Permanecendo 831 médicos para análise.

```{r}

compet_inicio <- base_tratada |> 
  filter(CODUFMUN == municipio_destino) |> 
  group_by(COMPETEN, CNS_PROF) |> 
  ungroup(CNS_PROF) |> 
  distinct(CNS_PROF) |> 
  summarise(competencia_inicio = n())

cns_validos <- base_tratada |> 
  filter(CODUFMUN == municipio_destino, COMPETEN == 201906) |> 
    filter(!is.na(sexo)) %>% 
  select(CNS_PROF) |> 
  distinct()

base_tratada <- base_tratada |> 
  filter(CNS_PROF %in% cns_validos$CNS_PROF, COMPETEN >= 201906)

```

Agora, criaremos uma variável identificando a região do Brasil em que o profissional está em exercício.

```{r}

base_tratada <- base_tratada %>% 
  mutate(regiao_brasil_exercicio = case_when(
    (uf_sigla %in% c("AM", "AP", "TO", "AC", "RR", "RO", "PA")) ~ "Norte",
    (uf_sigla %in% c("BA", "AL", "RN", "SE", "PI", "PB", "CE", "MA", "PE")) ~ "Nordeste",
    (uf_sigla %in% c("GO", "MT", "MS", "DF")) ~ "Centro-oeste",
    (uf_sigla %in% c("SC", "RS", "PR")) ~ "Sul",
    (uf_sigla %in% c("SP", "RJ", "ES", "MG")) ~ "Sudeste",
    TRUE ~ "Outro"))

```

A seguir, selecionaremos apenas as variáveis de interesse (CNS_PROF, COMPETEN, CODUFMUN, sexo). Filtraremos as duplicatas de profissionais que possuem mais de um vínculo dentro do mesmo município.

Foram filtrados os multivínculos dentro de um mesmo munícipio com a remoção de duplicatas.

Identificamos 455 profissionais que exerceram mais de um vínculo em municípios distintos.

Adicionamos a informação do contigente populacional do muncípio em que o profissional atua. E classificamos por porte: Pequeno Porte I, Pequeno Porte II, Médio Porte, Grande Porte e Metrópole.

Removemos as duplicatas de profissionais que atuam em diferentes municípios, mas de mesmo porte. E consideramos o municipio de maior porte, para aqueles que possuem multivínculo em municipios de diferentes porte.

```{r}
#Selecionando variáveis de interesse.
base_final <- base_tratada |> 
  select(CNS_PROF, COMPETEN, CODUFMUN, sexo) |> 
  arrange(COMPETEN)

#removendo vinculos duplicados dentro de um mesmo municipio
base_final <- base_final[!duplicated(base_final),]

#Contagem de profissionais com multivínculos
contagem_multmunicipios <- base_final |> 
  group_by(CNS_PROF, COMPETEN) |> 
  summarise(n = n(), .groups = "drop") |>  # Usa .groups = "drop" para desagrupar automaticamente
  filter(n > 1) |> 
  group_by(CNS_PROF) |> 
  count() |> 
  distinct()

#Carregando a base de contigente populacional
pop_mun <- read_excel("C:/Users/alefs/OneDrive/Documentos/GitHub/sa_maismedicos/01_dados/pop_municipios.xlsx") |> 
  mutate(cod_mun = substr(cod_mun, 1, 6)) |> 
  mutate(populacao = as.numeric(populacao))


base_final$CODUFMUN <- as.character(base_final$CODUFMUN)

base_final <- base_final |> 
  left_join(pop_mun, by = c("CODUFMUN" = "cod_mun")) |> 
  select(-mun)

#Classificando o porte dos municípios
base_final <- base_final |> 
  mutate(porte = case_when((populacao < 20000) ~ "PP-I",
                           (populacao >= 20000 & populacao < 50000) ~ "PP-II",
                           (populacao >= 50000 & populacao < 100000) ~ "MP",
                           (populacao >= 100000 & populacao < 900000) ~ "GP",
                           (populacao >= 900000) ~ "Metrópole",
                           TRUE ~ "Outros casos"))


#Removendo duplicados com municipios do mesmo porte
base_final <- base_final |> 
  distinct(CNS_PROF, COMPETEN, porte, .keep_all = TRUE)

#Matendo o município de maior porte nos multivínculos
base_final <- base_final |>
  group_by(CNS_PROF, COMPETEN) |>
  mutate(duplicados = n() > 1) |>  # Verifica se há mais de uma observação para a mesma COMPETEN
  filter(!duplicados | populacao == max(populacao)) |>  # Mantém a observação com maior populacao
  ungroup() |>  # Desfaz o agrupamento
  select(-duplicados)  # Remove a coluna auxiliar 'duplicados'




```

### 2. Codificação das narrativas ou processos em sequências

Nesta etapa, os processos são codificados em sequências. Precisamos deixar os dados em um formato para rodar a análise de sequências.

#### 2.1. Homens.

A seguir, filtraremos um dataframe apenas com homens (490 médicos),. transformaremos em dados largo e renomearemos os valores ausentes como SR (Sem Registro).

Também será criado uma tabela comparativa das competências 201906 e 202406 da quantidade de profissionais por porte de cidade.

```{r}
#Selecionando variaveis de interesse
base_final <- base_final |>
  select(CNS_PROF, COMPETEN, porte, sexo)

#Transformando em dados largo
base_final_male <- base_final |> 
  filter(sexo == "Male") %>% 
  select(-sexo) %>% 
  pivot_wider(names_from = COMPETEN, values_from = porte)

#Renomeando os NA como SR
base_final_male <- base_final_male |> 
  mutate(across(2:64, ~ ifelse(is.na(.), "SR", .)))

#Criando tabela
tabela_porte_male <- base_final %>% 
  filter(sexo == "Male", COMPETEN %in% c(201906, 202406)) %>% 
  group_by(porte, COMPETEN) %>% 
  count() %>% 
  pivot_wider(names_from = COMPETEN, values_from = n) %>% 
  mutate(tx_retencao_male = `202406`/`201906`)

```

Abaixo será criando o objeto de sequência (codificação das narrativas) através da função `seqdef` que gerou 285 sequências únicas. E em seguida serão gerados os gráficos da análise de sequências.

```{r}

seq_male <- seqdef(base_final_male, var = 2:64)

seqtab(seq_male, idx=0) |> 
  nrow()
```

```{r}
# Gráfico de estado
seqdplot(seq_male, 
         cex.legend=0.9, 
         main = "Gráfico de estados",
         with.legend = "right")
```

```{r}
# Gráfico de índices
seqIplot(seq_male, 
         main = "Gráficos de índices", 
         with.legend = "right")
```

```{r}

seqtab(seq_male, 
       idxs = 1:40) 

```

#### 2.1. Mulheres.

A seguir, filtraremos um dataframe apenas com mulheres (341 médicoa), transformaremos em dados largo e renomearemos os valores ausentes como SR (Sem Registro).

Também será criado uma tabela comparativa das competências 201906 e 202406 da quantidade de profissionais por porte de cidade.

```{r}

#Transformando em dados largo
base_final_female <- base_final |> 
  filter(sexo == "Female") %>% 
  select(-sexo) %>% 
  pivot_wider(names_from = COMPETEN, values_from = porte)

#Renomeando os NA como SR
base_final_female <- base_final_female |> 
  mutate(across(2:64, ~ ifelse(is.na(.), "SR", .)))

#Criando tabela
tabela_porte_female <- base_final %>% 
  filter(sexo == "Female", COMPETEN %in% c(201906, 202406)) %>% 
  group_by(porte, COMPETEN) %>% 
  count() %>% 
  pivot_wider(names_from = COMPETEN, values_from = n) %>% 
  mutate(percentual_female = `202406`/`201906`)
```

Abaixo será criando o objeto de sequência (codificação das narrativas) através da função `seqdef` que gerou 285 sequências únicas. E em seguida serão gerados os gráficos da análise de sequências.

```{r}
seq_female <- seqdef(base_final_female, var = 2:64)

seqtab(seq_male, idx=0) |> 
  nrow()
```

```{r}
# Gráfico de estado
seqdplot(seq_female, 
         cex.legend=0.9, 
         main = "Gráfico de estados",
         with.legend = "right")
```

```{r}

# Gráfico de índices
seqIplot(seq_female, 
         main = "Gráficos de índices", 
         with.legend = "right")
```

```{r}
seqtab(seq_female, 
       idxs = 1:40) 
```

### 3. Mensuração das dissimilaridades de par a par de indivíduos

Para gerar agrupamentos, primeiramente definiremos a matriz de dissimilaridades através da função seqdist, usando método Optimal Matching (OM). A matriz de dissimilaridades mostra, par a par, o quanto que uma observação está distante da outra.

#### 3.1. Homens

```{r}
#|warning: false

# Definindo a matriz de dissimilaridades

couts_male <- seqsubm(seq_male, 
                 method="CONSTANT", 
                 cval=2)

dissim_male <- seqdist(seq_male, 
                  method="OM", 
                  sm=couts_male, 
                  indel=1.5)


```

#### 3.1. Mulheres

```{r}

#|warning: false

# Definindo a matriz de dissimilaridades

couts_female <- seqsubm(seq_female, 
                 method="CONSTANT", 
                 cval=2)

dissim_female <- seqdist(seq_female, 
                  method="OM", 
                  sm=couts_female, 
                  indel=1.5)
```

### 4. Aplicação de técnica de redução de dimensionalidade para agrupar sequências similares

O próximo passo consiste na aplicação da técnica de clusterização. Existem diversas técnicas e procedimentos que podem ser usados. Para nosso caso, aplicamos uma clusterização pelo método de k-means.

Antes de iniciar a clusterização, aplicamos a técnica de principal components analysis para reduzir o número de atributos em apenas duas dimensões. Isso é útil para visualizar os clusters, depois de formados, em duas dimensões.

É possível fazer a clusterização sem a PCA? Sim, aplicamos e o resultado não foi muito diferente. Então vamos manter a PCA, especialmente por facilitar a visualização em duas dimensões e por aprimorar o desempenho do processamento da clusterização.

#### 4.1. Homens

```{r}

# aplicando PCA
mds_male <- cmdscale(dissim_male, k=2)  # Redução para 2 dimensões

mds_df_kmeans_male <- as.data.frame(mds_male)

colnames(mds_df_kmeans_male) <- c("Dim1", 
                             "Dim2")
```

```{r}
fviz_nbclust(mds_df_kmeans_male, 
             kmeans, 
             method = "wss")
```

##### 4.1.1. Testando com 5 clusters.

```{r}
set.seed(123) 
mds_df_kmeans_male$sequencia_id <- 1:nrow(mds_df_kmeans_male)


kmeans_result_male <- kmeans(mds_df_kmeans_male[, c("Dim1", "Dim2")], 
                        centers=5) 

# 5. Adicione os resultados do cluster ao data frame
mds_df_kmeans_male$cluster <- as.factor(kmeans_result_male$cluster)


ggplot(mds_df_kmeans_male, aes(x=Dim1, 
                          y=Dim2, 
                          color=cluster)) +
  geom_point(size=3) +
  geom_label(aes(label=sequencia_id), 
             vjust=-1, 
             hjust=0.5, 
             size=3) +  
  labs(title="Gráfico de Dispersão com 3 Clusters", 
       x="Dimensão 1", 
       y="Dimensão 2") +
  theme_minimal()
```

Os gráficos de índices dos cluster, indicam três grupos de pessoas que tendem a permanecer em cidades do mesmo porte em que foram alocados: Pequeno Porte II, Médio Porte e

```{r}
seqIplot(seq_male, 
        group = kmeans_result_male$cluster,
        border = NA, 
        cex.axis = 1.5, 
        cex.lab = 1.5,
        sortv = dissim_male)
```

#### 4.2. Mulheres

```{r}

# Definindo a matriz de dissimilaridades

couts_female <- seqsubm(seq_female, 
                 method="CONSTANT", 
                 cval=2)

dissim_female <- seqdist(seq_female, 
                  method="OM", 
                  sm=couts_female, 
                  indel=1.5)
```

```{r}
# aplicando PCA
mds_female <- cmdscale(dissim_female, k=2)  # Redução para 2 dimensões

mds_df_kmeans_female <- as.data.frame(mds_female)

colnames(mds_df_kmeans_female) <- c("Dim1", 
                             "Dim2")
```

```{r}
fviz_nbclust(mds_df_kmeans_female, 
             kmeans, 
             method = "wss")
```

```{r}
set.seed(123) 
mds_df_kmeans_female$sequencia_id <- 1:nrow(mds_df_kmeans_female)


kmeans_result_female <- kmeans(mds_df_kmeans_female[, c("Dim1", "Dim2")], 
                        centers=5) 

# 5. Adicione os resultados do cluster ao data frame
mds_df_kmeans_female$cluster <- as.factor(kmeans_result_female$cluster)


ggplot(mds_df_kmeans_female, aes(x=Dim1, 
                          y=Dim2, 
                          color=cluster)) +
  geom_point(size=3) +
  geom_label(aes(label=sequencia_id), 
             vjust=-1, 
             hjust=0.5, 
             size=3) +  
  labs(title="Gráfico de Dispersão com 3 Clusters", 
       x="Dimensão 1", 
       y="Dimensão 2") +
  theme_minimal()
```

```{r}
seqIplot(seq_female, 
        group = kmeans_result_female$cluster,
        border = NA, 
        cex.axis = 1.5, 
        cex.lab = 1.5,
        sortv = dissim)
```
