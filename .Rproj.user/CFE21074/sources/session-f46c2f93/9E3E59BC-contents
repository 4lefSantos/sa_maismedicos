---
title: "sa_fluxo_migratorio"
format: html
editor: visual
---

## Sequence Analysis: Mais Médicos

O objetivo do presente trabalho é aplicar uma Análise de Sequência para compreender a trajetório profissional de médicos convocados no Programa Mais Médicos para o Brasil referente ao 18º Ciclo (EDITAL Nº 11, DE 10 DE MAIO DE 2019).

O programa prevê vigência de três anos e a seleção é estruturada em duas fases:

1ª. Destinado a formados e revalidados em instituições em brasileiras.\
2ª. Destinação das vagas remanescentes para habilitados médicos no exterior (médico intercambista).

Na primeira seção será realizada o tratamento da base de dados.

```{r}

library(tidyverse)
library(readxl)
library(geosphere)
library(TraMineR)
library(TraMineRextras)
library(factoextra)
library(genderBR)
<<<<<<< HEAD:.Rproj.user/CFE21074/sources/session-2f3f084d/9E3E59BC-contents
library(lubridate)
library(writexl)
library(RODBC)


#install.packages("lubridate")
=======
# install.packages("genderBR")
>>>>>>> parent of 4eb6311 (UPDATE):.Rproj.user/CFE21074/sources/per/t/2289EA9D-contents


```

Após a transformação em planilha dos resultados do edital e a identificação do CNS dos profissionais através de webscrapping. Abriremos essa planilha, aplicando alguns filtros.

```{r}
cns_inscricao <- read_excel("C:/Users/alefs/OneDrive/Documentos/GitHub/sa_maismedicos/01_dados/Editais/2019/Edital_11_2019_resultado_cns.xlsx") |> 
  select(nome,uf_aloc, municipio_aloc, ibge_aloc,participou_pmmb, data_nascimento, data_formacao, fase ,resultado) |> 
  rename(cns = resultado) |> 
  rename(municipio_destino = municipio_aloc) |> 
  rename(uf_destino = uf_aloc) |> 
  mutate(cns = as.character(cns)) %>% 
  filter(!is.na(cns)) |> 
  mutate(sexo = get_gender(cns_inscricao$nome)) |> 
  filter(!is.na(sexo))
```

Com base neste resultado final, retiramos todos os CNS em um vetor para rodar uma consulta em datalake de forma a identificar os respectivos CPF.

Essa consulta gerou a base identificada como CNES_cns.

Filtrarando a base a partir da competência 201901. E identificaremos os CPF únicos e realizaremos uma nova consulta com o CPF, para trazer dados completos.

``` sql
SELECT a.CNES, 
       b.uf,
       b.uf_sigla, 
       a.CODUFMUN, 
       b.municipio,
       b.latitude,
       b.longitude,
       a.CPF_PROF, 
       a.CBO, 
       a.NOMEPROF, 
       a.CNS_PROF,
       a.VINCULAC, 
       a.HORAOUTR, 
       a.HORAHOSP, 
       a.HORA_AMB, 
       a.COMPETEN
FROM Dados.cnes.PF a
    LEFT JOIN "Analytics Layer".Territorial."Municípios - Hierarquia Completa" b
        ON a.CODUFMUN = CAST(b.cod_municipio AS CHARACTER)
WHERE CNS_PROF IN (lista)
```

```{r}
# codigo para acessar dados de datalake proprio 

dremio_host <- Sys.getenv("endereco")
dremio_port <- Sys.getenv("port")
dremio_uid <- Sys.getenv("uid")
dremio_pwd <- Sys.getenv("datalake")


channel <- odbcDriverConnect(sprintf("DRIVER=Dremio Connector;
                                     HOST=%s;
                                     PORT=%s;
                                     UID=%s;
                                     PWD=%s;
                                     AUTHENTICATIONTYPE=Basic Authentication;
                                     CONNECTIONTYPE=Direct", 
                         dremio_host, 
                         dremio_port, 
                         dremio_uid, 
                         dremio_pwd))

query <- 'SELECT * FROM "@alef_santos"."Consulta_maismedicos_2019_cns"'



CNES_cns <- sqlQuery(channel, query, 
                     as.is = TRUE)
```

```{r}

lista_cpf <- CNES_cns |> 
  filter(COMPETEN >= 201901) |> 
  mutate(CNS_PROF = as.character(CNS_PROF)) |> 
  select(CPF_PROF, CNS_PROF, NOMEPROF) |> 
  distinct(CPF_PROF)
```

Agora já identificado os CPF, rodaremos a consulta abaixo para baixar os dados completos dos profissionais pelos respectivos CPF.

``` sql
SELECT a.CNES, 
       b.uf,
       b.uf_sigla, 
       a.CODUFMUN, 
       b.municipio,
       b.latitude,
       b.longitude,
       a.CPF_PROF, 
       a.CBO, 
       a.NOMEPROF, 
       a.CNS_PROF,
       a.VINCULAC, 
       a.HORAOUTR, 
       a.HORAHOSP, 
       a.HORA_AMB, 
       a.COMPETEN
FROM Dados.cnes.PF a
    LEFT JOIN "Analytics Layer".Territorial."Municípios - Hierarquia Completa" b
        ON a.CODUFMUN = CAST(b.cod_municipio AS CHARACTER)
WHERE CPF_PROF IN (lista)
```

```{r}
# codigo para acessar dados de datalake proprio 

dremio_host <- Sys.getenv("endereco")
dremio_port <- Sys.getenv("port")
dremio_uid <- Sys.getenv("uid")
dremio_pwd <- Sys.getenv("datalake")


channel <- odbcDriverConnect(sprintf("DRIVER=Dremio Connector;
                                     HOST=%s;
                                     PORT=%s;
                                     UID=%s;
                                     PWD=%s;
                                     AUTHENTICATIONTYPE=Basic Authentication;
                                     CONNECTIONTYPE=Direct", 
                         dremio_host, 
                         dremio_port, 
                         dremio_uid, 
                         dremio_pwd))

query <- 'SELECT * FROM "@alef_santos"."Consulta_maismedicos_2019"'



CNES_cpf <- sqlQuery(channel, query, 
                     as.is = TRUE)
```

O próximo passo seria juntar as duas bases: a de inscrição com os resultados gerados pela consulta. No entanto, a base de inscrição não tem CPF, com isso será necessário primeiro colocar a variável CPF na base de inscrição para depois fazer um left_join com a base criada a partir do datalake.

```{r}

lista_cns_cpf <- CNES_cns |> 
  filter(COMPETEN >= 201901) |> 
  mutate(CNS_PROF = as.character(CNS_PROF)) |> 
  select(CPF_PROF, CNS_PROF) |> 
  distinct(CPF_PROF, CNS_PROF)

cns_inscricao <- cns_inscricao |> 
  left_join(lista_cns_cpf, by = c("cns" = "CNS_PROF"))
```

Agora adicionada a coluna de CPF na base cns_inscricao, faremos um left join entre ela e a base CNES_cns.

```{r}

base_tratada <- 
  CNES_cpf |> 
  left_join(cns_inscricao, by = c("CPF_PROF" = "CPF_PROF"))


```

A próxima etapa será identificar aqueles que tiveram permanência no programa prorrogada. Como a única informação nos resultados da prorrogação que identifica o médio é o nome, faremos o left join através dessa variável.

```{r}

prorrogacao_ciclo18 <- read_excel("C:/Users/alefs/OneDrive/Documentos/GitHub/sa_maismedicos/01_dados/Editais/2019/prorrogacao_ciclo18.xlsx") |> 
  select(-CPF, -Ciclo)

base_tratada <- base_tratada |>   
  left_join(prorrogacao_ciclo18, by = c("NOMEPROF" = "NOME")) |>   
  mutate(Prorrogado = ifelse(is.na(Prorrogado), "NÃO", Prorrogado))

```

```{r}
lista_cnes <- base_tratada |> 
  distinct(CNES)

lista_municipios <- base_tratada |> 
  distinct(CODUFMUN)
```

```{r}

base_tratada$COMPETEN <- as.Date(paste0(base_tratada$COMPETEN, "01"), format = "%Y%m%d")


# Convertendo a data de referência (competência) para o formato Date
competencia <- as.Date("2019-11-01")

# Calculando a idade em anos
base_tratada$idade <- trunc(as.numeric(interval(base_tratada$data_nascimento, competencia) / years(1)))



base_tratada$data_formacao <- as.Date(paste("01", base_tratada$data_formacao, sep = "/"), format = "%d/%m/%Y")

base_tratada$tempo_formacao <- trunc(as.numeric(interval(base_tratada$data_formacao, competencia) / years(1)))
```

```{r}

base_tratada <-base_tratada |> 
  mutate(estava_na_cidade = ifelse(COMPETEN == as.Date("2019-04-01") & CODUFMUN == ibge_aloc, "Sim", "Não"))
```

```{r}
#Carregando a base de contigente populacional
pop_mun <- read_excel("C:/Users/alefs/OneDrive/Documentos/GitHub/sa_maismedicos/01_dados/pop_municipios.xlsx") |> 
  mutate(cod_mun = substr(cod_mun, 1, 6)) |> 
  mutate(populacao = as.numeric(populacao))


base_tratada$CODUFMUN <- as.character(base_tratada$CODUFMUN)

base_tratada <- base_tratada |> 
  left_join(pop_mun, by = c("CODUFMUN" = "cod_mun")) |> 
  select(-mun)

#Classificando o porte dos municípios
base_tratada <- base_tratada |> 
  mutate(porte = case_when((populacao < 20000) ~ "PP-I",
                           (populacao >= 20000 & populacao < 50000) ~ "PP-II",
                           (populacao >= 50000 & populacao < 100000) ~ "MP",
                           (populacao >= 100000 & populacao < 900000) ~ "GP",
                           (populacao >= 900000) ~ "Metrópole",
                           TRUE ~ "Outros casos"))
```

``` sql

SELECT cod_ibge, taxa FROM "Open Analytics Layer".Infraestrutura."Cobertura Plano de Saúde"
```

```{r}

# codigo para acessar dados de datalake proprio 

dremio_host <- Sys.getenv("endereco")
dremio_port <- Sys.getenv("port")
dremio_uid <- Sys.getenv("uid")
dremio_pwd <- Sys.getenv("datalake")


channel <- odbcDriverConnect(sprintf("DRIVER=Dremio Connector;
                                     HOST=%s;
                                     PORT=%s;
                                     UID=%s;
                                     PWD=%s;
                                     AUTHENTICATIONTYPE=Basic Authentication;
                                     CONNECTIONTYPE=Direct", 
                         dremio_host, 
                         dremio_port, 
                         dremio_uid, 
                         dremio_pwd))

query <- 'SELECT * FROM "@alef_santos"."pmmb_cobertura_plano_saude"'



cobertura_saude <- sqlQuery(channel, query, 
                     as.is = TRUE)


```

```{r}
cobertura_saude <- cobertura_saude |> 
  rename(cobertura_saude = taxa) |> 
  mutate(cobertura_saude = as.numeric(cobertura_saude))
```

```{r}
base_tratada <- base_tratada |> 
  left_join(cobertura_saude, by = c("CODUFMUN" = "cod_ibge"))
```

``` sql
SELECT cod_ibge, 
       SUM(qtd_ies_cursos) 
       
FROM "Open Analytics Layer"."Educação"."Quantidade de IES com cursos de saúde por município"

GROUP BY cod_ibge
```

```{r}
# codigo para acessar dados de datalake proprio 

dremio_host <- Sys.getenv("endereco")
dremio_port <- Sys.getenv("port")
dremio_uid <- Sys.getenv("uid")
dremio_pwd <- Sys.getenv("datalake")


channel <- odbcDriverConnect(sprintf("DRIVER=Dremio Connector;
                                     HOST=%s;
                                     PORT=%s;
                                     UID=%s;
                                     PWD=%s;
                                     AUTHENTICATIONTYPE=Basic Authentication;
                                     CONNECTIONTYPE=Direct", 
                         dremio_host, 
                         dremio_port, 
                         dremio_uid, 
                         dremio_pwd))

query <- 'SELECT * FROM "@alef_santos"."pmmb_cursos_saude"'



cursos_saude <- sqlQuery(channel, query, 
                     as.is = TRUE)
```

```{r}

base_tratada <- base_tratada |> 
  left_join(cursos_saude, by = c("CODUFMUN" = "cod_ibge"))

base_tratada <- base_tratada |>
  rename(cursos_saude = `EXPR$1`) |> 
  mutate(cursos_saude = as.numeric(cursos_saude)) |> 
  mutate(tx_cursos_saude = (cursos_saude/populacao)*1000)
```

### 1. Tratamento de dados.

Primeiramente, carregaremos os profissionais convocados pela portaria. Utilizaremos a função `get_gender` para identificação do gênero.

```{r}

cns_inscricao <- read_excel("C:/Users/alefs/OneDrive/Documentos/GitHub/sa_maismedicos/01_dados/edital_maismedicos_cns.xlsx") |> 
  select(cod_ibge, nome, resultado, uf) |> 
  rename(cns = resultado) |> 
  rename(municipio_destino = cod_ibge) |> 
  rename(uf_destino = uf) |> 
  mutate(cns = as.numeric(cns)) %>% 
  mutate(sexo = get_gender(cns_inscricao$nome))



cns_inscricao$nome <-  iconv(cns_inscricao$nome, from = "UTF-8", to = "ASCII//TRANSLIT")

```

Identificado a lista de nome dos profissionais convocados, foi realizado um web scraping (disponível em outro script) no site do Cadastro Nacional de Estabelecimentos de Saúde (CNES) para identificar os respectivos CNS, identificando 1218 médicos.

Através dos CNS's, foram coletados através de consulta SQL no datalake, o histórico profissional, também da fonte de dados CNES, que será carregado abaixo.

Integraremos a informação do municipio e unidade federativa para quais os profissionais foram chamados no mesmo dataframe.

Filtraremos a competência posterior ao ano de 2019, que se refere a competência de início de exercício no programa Mais Médicos.

```{r}

<<<<<<< HEAD:.Rproj.user/CFE21074/sources/session-2f3f084d/9E3E59BC-contents
maismedicos_cnes <- read_csv("C:/Users/alefs/OneDrive/Documentos/GitHub/sa_maismedicos/01_dados/Editais/2019/edital_11_2019_datalake_CPF.csv") |> 
  select(-HORAOUTR, -HORAHOSP, -HORA_AMB, -VINCULAC, -latitude, -longitude, -CNES, -uf) |> 
  mutate(CNS_PROF = as.character(CNS_PROF))
=======
maismedicos_completo <- read_csv("C:/Users/alefs/OneDrive/Documentos/GitHub/sa_maismedicos/01_dados/maismedicos_completo.csv")
>>>>>>> parent of 4eb6311 (UPDATE):.Rproj.user/CFE21074/sources/per/t/2289EA9D-contents


base_tratada <- 
<<<<<<< HEAD:.Rproj.user/CFE21074/sources/session-2f3f084d/9E3E59BC-contents
  maismedicos_cnes |> 
  left_join(cns_inscricao, by = c("CPF_PROF" = "CPF_PROF"))


lista_nomes <- base_tratada |> 
  distinct(CPF_PROF)

nomes_naoencontrados <- cns_inscricao |> 
  filter(!nome %in% lista_nomes$NOMEPROF)

=======
  maismedicos_completo |> 
  left_join(cns_inscricao, by = c("CNS_PROF" = "cns"))
>>>>>>> parent of 4eb6311 (UPDATE):.Rproj.user/CFE21074/sources/per/t/2289EA9D-contents

base_tratada <- base_tratada |> 
  filter(COMPETEN >= 201901)

<<<<<<< HEAD:.Rproj.user/CFE21074/sources/session-2f3f084d/9E3E59BC-contents
base_tratada$COMPETEN <- as.Date(paste0(base_tratada$COMPETEN, "01"), format = "%Y%m%d")


# Convertendo a data de referência (competência) para o formato Date
competencia <- as.Date("2019-09-01")

# Calculando a idade em anos
base_tratada$idade <- trunc(as.numeric(interval(base_tratada$data_nascimento, competencia) / years(1)))



```

Abaixo será identificado através do Edital SAPS/MS nº 10, de 20 de Junho de 2022, os médicos que tiveram sua permanência no programa prorrogada por mais um ano.

```{r}

prorrogacao_ciclo18 <- read_excel("C:/Users/alefs/OneDrive/Documentos/GitHub/sa_maismedicos/01_dados/Editais/2019/prorrogacao_ciclo18.xlsx") |> 
  select(-CPF, -Ciclo)

base_tratada <- base_tratada |>   
  left_join(prorrogacao_ciclo18, by = c("NOMEPROF" = "NOME")) |>   
  mutate(Prorrogado = ifelse(is.na(Prorrogado), "Não", Prorrogado))

=======
base_tratada$CNS_PROF <- as.character(base_tratada$CNS_PROF)
>>>>>>> parent of 4eb6311 (UPDATE):.Rproj.user/CFE21074/sources/per/t/2289EA9D-contents
```

No entanto, os profissionais começaram a atuar nos municípios onde foram convocados em diferentes períodos. Para identificar esses períodos, realizamos uma contagem por competência.

Por decisão dos analistas, delimitamos os profissionais que iniciaram até a competência 06-2019 (893 médicos), aqueles que iniciaram posteriormente, por simplicidade, não foram agregados na análise. Filtraremos apenas as competências posterior a 06-2019.

Foi aplicado filtro para retirar os profissionais nos quais a função não conseguiu identificar o gênero (62 médicos). Permanecendo 831 médicos para análise.

```{r}

compet_inicio <- base_tratada |> 
  filter(CODUFMUN == municipio_destino) |> 
  group_by(COMPETEN, CNS_PROF) |> 
  ungroup(CNS_PROF) |> 
  distinct(CNS_PROF) |> 
  summarise(competencia_inicio = n())

cns_validos <- base_tratada |> 
<<<<<<< HEAD:.Rproj.user/CFE21074/sources/session-2f3f084d/9E3E59BC-contents
  filter(CODUFMUN == ibge_aloc, COMPETEN == as.Date('2019-11-01')) |>
=======
  filter(CODUFMUN == municipio_destino, COMPETEN == 201906) |> 
    filter(!is.na(sexo)) %>% 
>>>>>>> parent of 4eb6311 (UPDATE):.Rproj.user/CFE21074/sources/per/t/2289EA9D-contents
  select(CNS_PROF) |> 
  distinct()

base_tratada <- base_tratada |> 
<<<<<<< HEAD:.Rproj.user/CFE21074/sources/session-2f3f084d/9E3E59BC-contents
  filter(CNS_PROF %in% cns_validos$CNS_PROF, COMPETEN >= as.Date('2019-11-01'))


=======
  filter(CNS_PROF %in% cns_validos$CNS_PROF, COMPETEN >= 201906)
>>>>>>> parent of 4eb6311 (UPDATE):.Rproj.user/CFE21074/sources/per/t/2289EA9D-contents

```

Agora, criaremos uma variável identificando a região do Brasil em que o profissional está em exercício.

```{r}

base_tratada <- base_tratada %>% 
  mutate(regiao_brasil_exercicio = case_when(
    (uf_sigla %in% c("AM", "AP", "TO", "AC", "RR", "RO", "PA")) ~ "Norte",
    (uf_sigla %in% c("BA", "AL", "RN", "SE", "PI", "PB", "CE", "MA", "PE")) ~ "Nordeste",
    (uf_sigla %in% c("GO", "MT", "MS", "DF")) ~ "Centro-oeste",
    (uf_sigla %in% c("SC", "RS", "PR")) ~ "Sul",
    (uf_sigla %in% c("SP", "RJ", "ES", "MG")) ~ "Sudeste",
    TRUE ~ "Outro"))

base_tratada <- base_tratada %>% 
  mutate(regiao_brasil_destino = case_when(
    (uf_destino %in% c("AM", "AP", "TO", "AC", "RR", "RO", "PA")) ~ "Norte",
    (uf_destino %in% c("BA", "AL", "RN", "SE", "PI", "PB", "CE", "MA", "PE")) ~ "Nordeste",
    (uf_destino %in% c("GO", "MT", "MS", "DF")) ~ "Centro-oeste",
    (uf_destino %in% c("SC", "RS", "PR")) ~ "Sul",
    (uf_destino %in% c("SP", "RJ", "ES", "MG")) ~ "Sudeste",
    TRUE ~ "Outro"))

```

A seguir, selecionaremos apenas as variáveis de interesse (CNS_PROF, COMPETEN, CODUFMUN, sexo). Filtraremos as duplicatas de profissionais que possuem mais de um vínculo dentro do mesmo município.

Foram filtrados os multivínculos dentro de um mesmo munícipio com a remoção de duplicatas.

Identificamos 455 profissionais que exerceram mais de um vínculo em municípios distintos.

Adicionamos a informação do contigente populacional do muncípio em que o profissional atua. E classificamos por porte: Pequeno Porte I, Pequeno Porte II, Médio Porte, Grande Porte e Metrópole.

Removemos as duplicatas de profissionais que atuam em diferentes municípios, mas de mesmo porte. E consideramos o municipio de maior porte, para aqueles que possuem multivínculo em municipios de diferentes porte.

```{r}
#Selecionando variáveis de interesse.
base_final <- base_tratada |> 
  select(CNS_PROF, COMPETEN, CODUFMUN, sexo) |> 
  arrange(COMPETEN)

#removendo vinculos duplicados dentro de um mesmo municipio
base_final <- base_final[!duplicated(base_final),]

#Contagem de profissionais com multivínculos
contagem_multmunicipios <- base_final |> 
  group_by(CNS_PROF, COMPETEN) |> 
  summarise(n = n(), .groups = "drop") |>  # Usa .groups = "drop" para desagrupar automaticamente
  filter(n > 1) |> 
  group_by(CNS_PROF) |> 
  count() |> 
  distinct()

#Carregando a base de contigente populacional
pop_mun <- read_excel("C:/Users/alefs/OneDrive/Documentos/GitHub/sa_maismedicos/01_dados/pop_municipios.xlsx") |> 
  mutate(cod_mun = substr(cod_mun, 1, 6)) |> 
  mutate(populacao = as.numeric(populacao))


base_final$CODUFMUN <- as.character(base_final$CODUFMUN)

base_final <- base_final |> 
  left_join(pop_mun, by = c("CODUFMUN" = "cod_mun")) |> 
  select(-mun)

#Classificando o porte dos municípios
base_final <- base_final |> 
  mutate(porte = case_when((populacao < 20000) ~ "PP-I",
                           (populacao >= 20000 & populacao < 50000) ~ "PP-II",
                           (populacao >= 50000 & populacao < 100000) ~ "MP",
                           (populacao >= 100000 & populacao < 900000) ~ "GP",
                           (populacao >= 900000) ~ "Metrópole",
                           TRUE ~ "Outros casos"))


#Removendo duplicados com municipios do mesmo porte
base_final <- base_final |> 
  distinct(CNS_PROF, COMPETEN, porte, .keep_all = TRUE)

#Matendo o município de maior porte nos multivínculos
base_final <- base_final |>
  group_by(CNS_PROF, COMPETEN) |>
  mutate(duplicados = n() > 1) |>  # Verifica se há mais de uma observação para a mesma COMPETEN
  filter(!duplicados | populacao == max(populacao)) |>  # Mantém a observação com maior populacao
  ungroup() |>  # Desfaz o agrupamento
  select(-duplicados)  # Remove a coluna auxiliar 'duplicados'




```

### 2. Codificação das narrativas ou processos em sequências

Nesta etapa, os processos são codificados em sequências. Precisamos deixar os dados em um formato para rodar a análise de sequências.

#### 2.1. Homens.

A seguir, filtraremos um dataframe apenas com homens (490 médicos),. transformaremos em dados largo e renomearemos os valores ausentes como SR (Sem Registro).

Também será criado uma tabela comparativa das competências 201906 e 202406 da quantidade de profissionais por porte de cidade.

```{r}
#Selecionando variaveis de interesse
base_final <- base_final |>
  select(CNS_PROF, COMPETEN, porte, sexo)

#Transformando em dados largo
base_final_male <- base_final |> 
  filter(sexo == "Male") %>% 
  select(-sexo) %>% 
  pivot_wider(names_from = COMPETEN, values_from = porte)

#Renomeando os NA como SR
base_final_male <- base_final_male |> 
  mutate(across(2:64, ~ ifelse(is.na(.), "SR", .)))

#Criando tabela
tabela_porte_male <- base_final %>% 
  filter(sexo == "Male", COMPETEN %in% c(201906, 202406)) %>% 
  group_by(porte, COMPETEN) %>% 
  count() %>% 
  pivot_wider(names_from = COMPETEN, values_from = n) %>% 
  mutate(tx_retencao_male = `202406`/`201906`)

```

Abaixo será criando o objeto de sequência (codificação das narrativas) através da função `seqdef` que gerou 285 sequências únicas. E em seguida serão gerados os gráficos da análise de sequências.

```{r}

seq_male <- seqdef(base_final_male, var = 2:64)

seqtab(seq_male, idx=0) |> 
  nrow()
```

```{r}
# Gráfico de estado
seqdplot(seq_male, 
         cex.legend=0.9, 
         main = "Gráfico de estados",
         with.legend = "right")
```

```{r}
# Gráfico de índices
seqIplot(seq_male, 
         main = "Gráficos de índices", 
         with.legend = "right")
```

```{r}

seqtab(seq_male, 
       idxs = 1:40) 

```

#### 2.1. Mulheres.

A seguir, filtraremos um dataframe apenas com mulheres (341 médicoa), transformaremos em dados largo e renomearemos os valores ausentes como SR (Sem Registro).

Também será criado uma tabela comparativa das competências 201906 e 202406 da quantidade de profissionais por porte de cidade.

```{r}

#Transformando em dados largo
base_final_female <- base_final |> 
  filter(sexo == "Female") %>% 
  select(-sexo) %>% 
  pivot_wider(names_from = COMPETEN, values_from = porte)

#Renomeando os NA como SR
base_final_female <- base_final_female |> 
  mutate(across(2:64, ~ ifelse(is.na(.), "SR", .)))

#Criando tabela
tabela_porte_female <- base_final %>% 
  filter(sexo == "Female", COMPETEN %in% c(201906, 202406)) %>% 
  group_by(porte, COMPETEN) %>% 
  count() %>% 
  pivot_wider(names_from = COMPETEN, values_from = n) %>% 
  mutate(percentual_female = `202406`/`201906`)
```

Abaixo será criando o objeto de sequência (codificação das narrativas) através da função `seqdef` que gerou 285 sequências únicas. E em seguida serão gerados os gráficos da análise de sequências.

```{r}
seq_female <- seqdef(base_final_female, var = 2:64)

seqtab(seq_male, idx=0) |> 
  nrow()
```

```{r}
# Gráfico de estado
seqdplot(seq_female, 
         cex.legend=0.9, 
         main = "Gráfico de estados",
         with.legend = "right")
```

```{r}

# Gráfico de índices
seqIplot(seq_female, 
         main = "Gráficos de índices", 
         with.legend = "right")
```

```{r}
seqtab(seq_female, 
       idxs = 1:40) 
```

### 3. Mensuração das dissimilaridades de par a par de indivíduos

Para gerar agrupamentos, primeiramente definiremos a matriz de dissimilaridades através da função seqdist, usando método Optimal Matching (OM). A matriz de dissimilaridades mostra, par a par, o quanto que uma observação está distante da outra.

#### 3.1. Homens

```{r}
#|warning: false

# Definindo a matriz de dissimilaridades

couts_male <- seqsubm(seq_male, 
                 method="CONSTANT", 
                 cval=2)

dissim_male <- seqdist(seq_male, 
                  method="OM", 
                  sm=couts_male, 
                  indel=1.5)


```

#### 3.1. Mulheres

```{r}

#|warning: false

# Definindo a matriz de dissimilaridades

couts_female <- seqsubm(seq_female, 
                 method="CONSTANT", 
                 cval=2)

dissim_female <- seqdist(seq_female, 
                  method="OM", 
                  sm=couts_female, 
                  indel=1.5)
```

### 4. Aplicação de técnica de redução de dimensionalidade para agrupar sequências similares

O próximo passo consiste na aplicação da técnica de clusterização. Existem diversas técnicas e procedimentos que podem ser usados. Para nosso caso, aplicamos uma clusterização pelo método de k-means.

Antes de iniciar a clusterização, aplicamos a técnica de principal components analysis para reduzir o número de atributos em apenas duas dimensões. Isso é útil para visualizar os clusters, depois de formados, em duas dimensões.

É possível fazer a clusterização sem a PCA? Sim, aplicamos e o resultado não foi muito diferente. Então vamos manter a PCA, especialmente por facilitar a visualização em duas dimensões e por aprimorar o desempenho do processamento da clusterização.

#### 4.1. Homens

```{r}

# aplicando PCA
mds_male <- cmdscale(dissim_male, k=2)  # Redução para 2 dimensões

mds_df_kmeans_male <- as.data.frame(mds_male)

colnames(mds_df_kmeans_male) <- c("Dim1", 
                             "Dim2")
```

```{r}
fviz_nbclust(mds_df_kmeans_male, 
             kmeans, 
             method = "wss")
```

##### 4.1.1. Testando com 5 clusters.

```{r}
set.seed(123) 
mds_df_kmeans_male$sequencia_id <- 1:nrow(mds_df_kmeans_male)


kmeans_result_male <- kmeans(mds_df_kmeans_male[, c("Dim1", "Dim2")], 
                        centers=5) 

# 5. Adicione os resultados do cluster ao data frame
mds_df_kmeans_male$cluster <- as.factor(kmeans_result_male$cluster)


ggplot(mds_df_kmeans_male, aes(x=Dim1, 
                          y=Dim2, 
                          color=cluster)) +
  geom_point(size=3) +
  geom_label(aes(label=sequencia_id), 
             vjust=-1, 
             hjust=0.5, 
             size=3) +  
  labs(title="Gráfico de Dispersão com 3 Clusters", 
       x="Dimensão 1", 
       y="Dimensão 2") +
  theme_minimal()
```

Os gráficos de índices dos cluster, indicam três grupos de pessoas que tendem a permanecer em cidades do mesmo porte em que foram alocados: Pequeno Porte II, Médio Porte e

```{r}
seqIplot(seq_male, 
        group = kmeans_result_male$cluster,
        border = NA, 
        cex.axis = 1.5, 
        cex.lab = 1.5,
        sortv = dissim_male)
```

#### 4.2. Mulheres

```{r}

# Definindo a matriz de dissimilaridades

couts_female <- seqsubm(seq_female, 
                 method="CONSTANT", 
                 cval=2)

dissim_female <- seqdist(seq_female, 
                  method="OM", 
                  sm=couts_female, 
                  indel=1.5)
```

```{r}
# aplicando PCA
mds_female <- cmdscale(dissim_female, k=2)  # Redução para 2 dimensões

mds_df_kmeans_female <- as.data.frame(mds_female)

colnames(mds_df_kmeans_female) <- c("Dim1", 
                             "Dim2")
```

```{r}
fviz_nbclust(mds_df_kmeans_female, 
             kmeans, 
             method = "wss")
```

```{r}
set.seed(123) 
mds_df_kmeans_female$sequencia_id <- 1:nrow(mds_df_kmeans_female)


kmeans_result_female <- kmeans(mds_df_kmeans_female[, c("Dim1", "Dim2")], 
                        centers=5) 

# 5. Adicione os resultados do cluster ao data frame
mds_df_kmeans_female$cluster <- as.factor(kmeans_result_female$cluster)


ggplot(mds_df_kmeans_female, aes(x=Dim1, 
                          y=Dim2, 
                          color=cluster)) +
  geom_point(size=3) +
  geom_label(aes(label=sequencia_id), 
             vjust=-1, 
             hjust=0.5, 
             size=3) +  
  labs(title="Gráfico de Dispersão com 3 Clusters", 
       x="Dimensão 1", 
       y="Dimensão 2") +
  theme_minimal()
```

```{r}
seqIplot(seq_female, 
        group = kmeans_result_female$cluster,
        border = NA, 
        cex.axis = 1.5, 
        cex.lab = 1.5,
        sortv = dissim)
```
