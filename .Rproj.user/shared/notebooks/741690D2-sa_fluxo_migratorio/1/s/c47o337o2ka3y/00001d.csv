"0","base_final <- base_tratada |> "
"0","  select(CNS_PROF, COMPETEN, CODUFMUN) |> "
"0","  arrange(COMPETEN)"
"0",""
"0","#removendo vinculos duplicados dentro de um mesmo municipio"
"0","base_final <- base_final[!duplicated(base_final),]"
"0",""
"0","contagem_multmunicipios <- base_final |> "
"0","  group_by(CNS_PROF, COMPETEN) |> "
"0","  summarise(n = n(), .groups = ""drop"") |>  # Usa .groups = ""drop"" para desagrupar automaticamente"
"0","  filter(n > 1) |> "
"0","  group_by(CNS_PROF) |> "
"0","  count() |> "
"0","  distinct()"
"0",""
"0",""
"0","pop_mun <- read_excel(""C:/Users/alefs/OneDrive/Documentos/GitHub/sa_maismedicos/01_dados/pop_municipios.xlsx"") |> "
"0","  mutate(cod_mun = substr(cod_mun, 1, 6)) |> "
"0","  mutate(populacao = as.numeric(populacao))"
"0",""
"0",""
"0","base_final$CODUFMUN <- as.character(base_final$CODUFMUN)"
"0",""
"0","base_final <- base_final |> "
"0","  left_join(pop_mun, by = c(""CODUFMUN"" = ""cod_mun"")) |> "
"0","  select(-mun)"
"0",""
"0",""
"0","base_final <- base_final |> "
"0","  mutate(porte = case_when((populacao < 20000) ~ ""PP-I"","
"0","                           (populacao >= 20000 & populacao < 50000) ~ ""PP-II"","
"0","                           (populacao >= 50000 & populacao < 100000) ~ ""MP"","
"0","                           (populacao >= 100000 & populacao < 900000) ~ ""GP"","
"0","                           (populacao >= 900000) ~ ""Metrópole"","
"0","                           TRUE ~ ""Outros casos""))"
"0",""
"0",""
"0","#Removendo duplicados com municipios do mesmo porte"
"0","base_final <- base_final |> "
"0","  distinct(CNS_PROF, COMPETEN, porte, .keep_all = TRUE)"
"0",""
"0","base_final <- base_final |>"
"0","  group_by(CNS_PROF, COMPETEN) |>"
"0","  mutate(duplicados = n() > 1) |>  # Verifica se há mais de uma observação para a mesma COMPETEN"
"0","  filter(!duplicados | populacao == max(populacao)) |>  # Mantém a observação com maior populacao"
"0","  ungroup() |>  # Desfaz o agrupamento"
"0","  select(-duplicados)  # Remove a coluna auxiliar 'duplicados'"
"0",""
"0",""
"0",""
"0",""
"0","base_final <- base_final |>"
"0","  select(CNS_PROF, COMPETEN, porte)"
"0",""
"0","base_final <- base_final |> "
"0","  pivot_wider(names_from = COMPETEN, values_from = porte)"
"0",""
"0","base_final <- base_final |> "
"0","  mutate(across(2:64, ~ ifelse(is.na(.), ""SR"", .)))"
"0",""
"0",""
