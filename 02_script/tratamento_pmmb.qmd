---
title: "sa_fluxo_migratorio"
format: html
editor: visual
---

# Analysis: Programa Mais Médicos para o Brasil (pmmb)

O objetivo do presente trabalho é realizar uma análise do Programa Mais Médicos para o Brasil referente ao 18º Ciclo (EDITAL Nº 11, DE 10 DE MAIO DE 2019), o programa é direcionado para atenção básica de saúde.

O programa prevê vigência de três anos e a seleção é estruturada em **duas fases**:

1ª. Destinado a formados e revalidados em instituições brasileiras.\
2ª. Destinação das vagas remanescentes para habilitados médicos no exterior (médico intercambista).

O médico indica **quatro localidades em ordem de preferência**. A concorrência se dará entre os profissionais que marcaram o maior grau de preferência, isto é, entre os que marcaram como primeira opção, na ausência, entre os segunda opação e assim sucessivamente.

Entre os **critérios de classificação** estão:

\- Título de Especialista e/ou Residência em Medicina da Família e Comunidade;\
- Atuação como médico em Equipe de Saúde da Família;\
- Ter sido bolsista do Programa de Educação pelo Trabalho para a Saúde (PET);\
- Ter participado como estagiário em alguma edição da Vivência e Estágio na Realidade - do SUS (VER-SUS).

**Em caso de empate**, impera os seguintes critérios conforme ordem a seguir:

\- Candidatos que já atuaram no Programa Mais Médicos para o Brasil;\
- Maior idade;\
- Data de formação.

No caso dos médicos intercambistas, além de auto-declarar conhecimento mínimo na lingua portuguesa, precisam ser aprovados no **Módulo de Acolhimento e Avaliação**. O módulo é executado em Brasília/DF, na modalidade presencial, com carga horária mínima de 160 horas. Contempla conteúdo relacionado à legislação referente ao SUS, notadamente da Atenção Básica em Saúde, aos protocolos clínicos de atendimento definidos pelo Ministério da Saúde, à Língua Portuguesa e ao Código de Ética Médica.

Após aprovação, o médico deverá se apresentar no período indicado, no município de alocação, perante o gestor municipal, portando 2 (duas) vias do Termo de Adesão e Compromisso.

Já em exercício, o médico deverá cumprir **carga horária de 40 horas** semanalmente, 8 horas em atividades acadêmicas teóricas e 32 horas em atividades nas unidades básicas de saúde no Município.

O edital não é taxativo em proibir outros vínculos profissionais, desde que seja compatível com a carga horária do programa. Veja:

2.2.5. Não possuir vínculo de serviço com carga horária incompatível com as exigências do Projeto;\
\* Mediante declaração, que ficará registrada no Termo de Aceite, quando do preenchimento do formulário de adesão.\

Abaixo os pacotes que serão necessários.

```{r}

library(tidyverse)
library(readxl)
library(geosphere)
library(TraMineR)
library(TraMineRextras)
library(factoextra)
library(genderBR)
library(lubridate)
library(writexl)
library(RODBC)


#install.packages("lubridate")


```

## 1. Montagem da base de dados.

### 1.1. Base de dados "primária".

A primeira etapa consiste na elaboração da base de dados "primária" a partir de diversas fontes.

A partir dos resultados do edital do 18º Ciclo do pmmb, identificamos os médicos e realizamos o processo de web scrapping para identificar o CNS desses profissionais no site CNES.

Após a transformação em planilha dos resultados do edital e a identificação do CNS pela raspagem, abriremos esses dados que representa 2452 médicos. No entanto, alguns médicos não foi possível identificaro o número de CNS (265 médicos).

Para identifica o sexo utilizamos a função `get_gender` a partir dos nomes. No entanto, não foi possível a identificação em 144 profissionais.

Restando o número de 2043 médicos.

```{r}
cns_inscricao <- read_excel("C:/Users/alefs/OneDrive/Documentos/GitHub/sa_maismedicos/01_dados/Editais/2019/Edital_11_2019_resultado_cns.xlsx") |> 
  select(nome,uf_aloc, municipio_aloc, ibge_aloc,participou_pmmb, data_nascimento, data_formacao, fase ,resultado) |> 
  rename(cns = resultado) |> 
  rename(municipio_destino = municipio_aloc) |> 
  rename(uf_destino = uf_aloc) |> 
  mutate(cns = as.character(cns)) |>  
  filter(!is.na(cns)) |> 
  mutate(sexo = get_gender(cns_inscricao$nome)) |> 
  filter(!is.na(sexo))
```

Com base nesse resultado final, extraímos todos os CNS em um vetor para executar uma consulta no datalake, a fim de identificar os respectivos CPFs.

Essa consulta gerou uma base denominada CNES_cns.

Filtraremos essa base a partir da competência 201901 e, em seguida, identificaremos os CPFs únicos para realizar uma nova consulta com esses CPFs, trazendo os dados completos.

``` sql
SELECT a.CNES, 
       b.uf,
       b.uf_sigla, 
       a.CODUFMUN, 
       b.municipio,
       b.latitude,
       b.longitude,
       a.CPF_PROF, 
       a.CBO, 
       a.NOMEPROF, 
       a.CNS_PROF,
       a.VINCULAC, 
       a.HORAOUTR, 
       a.HORAHOSP, 
       a.HORA_AMB, 
       a.COMPETEN
FROM Dados.cnes.PF a
    LEFT JOIN "Analytics Layer".Territorial."Municípios - Hierarquia Completa" b
        ON a.CODUFMUN = CAST(b.cod_municipio AS CHARACTER)
WHERE CNS_PROF IN (lista)
```

```{r}
# codigo para acessar dados de datalake proprio 

dremio_host <- Sys.getenv("endereco")
dremio_port <- Sys.getenv("port")
dremio_uid <- Sys.getenv("uid")
dremio_pwd <- Sys.getenv("datalake")


channel <- odbcDriverConnect(sprintf("DRIVER=Dremio Connector;
                                     HOST=%s;
                                     PORT=%s;
                                     UID=%s;
                                     PWD=%s;
                                     AUTHENTICATIONTYPE=Basic Authentication;
                                     CONNECTIONTYPE=Direct", 
                         dremio_host, 
                         dremio_port, 
                         dremio_uid, 
                         dremio_pwd))

query <- 'SELECT * FROM "@alef_santos"."Consulta_maismedicos_2019_cns"'



CNES_cns <- sqlQuery(channel, query, 
                     as.is = TRUE)
```

```{r}
#identificando os CPF
lista_cpf <- CNES_cns |> 
  filter(COMPETEN >= 201901) |> 
  mutate(CNS_PROF = as.character(CNS_PROF)) |> 
  select(CPF_PROF, CNS_PROF, NOMEPROF) |> 
  distinct(CPF_PROF)
```

Observa-se que a lista de CPF's retornou apenas 2034 observações, esse número reduzido é devido a médicos duplicados em razão de registros com letras do nomes trocadas.

Agora já identificado os CPF, executaremos a consulta abaixo para baixar os dados completos dos profissionais pelos respectivos CPF.

``` sql
SELECT a.CNES, 
       b.uf,
       b.uf_sigla, 
       a.CODUFMUN, 
       b.municipio,
       b.latitude,
       b.longitude,
       a.CPF_PROF, 
       a.CBO, 
       a.NOMEPROF, 
       a.CNS_PROF,
       a.VINCULAC, 
       a.HORAOUTR, 
       a.HORAHOSP, 
       a.HORA_AMB, 
       a.COMPETEN
FROM Dados.cnes.PF a
    LEFT JOIN "Analytics Layer".Territorial."Municípios - Hierarquia Completa" b
        ON a.CODUFMUN = CAST(b.cod_municipio AS CHARACTER)
WHERE CPF_PROF IN (lista)
```

```{r}
# codigo para acessar dados de datalake proprio 

dremio_host <- Sys.getenv("endereco")
dremio_port <- Sys.getenv("port")
dremio_uid <- Sys.getenv("uid")
dremio_pwd <- Sys.getenv("datalake")


channel <- odbcDriverConnect(sprintf("DRIVER=Dremio Connector;
                                     HOST=%s;
                                     PORT=%s;
                                     UID=%s;
                                     PWD=%s;
                                     AUTHENTICATIONTYPE=Basic Authentication;
                                     CONNECTIONTYPE=Direct", 
                         dremio_host, 
                         dremio_port, 
                         dremio_uid, 
                         dremio_pwd))

query <- 'SELECT * FROM "@alef_santos"."Consulta_maismedicos_2019"'



CNES_cpf <- sqlQuery(channel, query, 
                     as.is = TRUE)
```

O próximo passo será unir as duas bases: a de inscrição e os resultados gerados pela consulta. No entanto, como a base de inscrição não possui a variável CPF, primeiro será necessário adicioná-la a essa base para, em seguida, realizar um *left_join* com a base CNES_cpf.

```{r}

lista_cns_cpf <- CNES_cns |> 
  filter(COMPETEN >= 201901) |> 
  mutate(CNS_PROF = as.character(CNS_PROF)) |> 
  select(CPF_PROF, CNS_PROF) |> 
  distinct(CPF_PROF, CNS_PROF)

cns_inscricao <- cns_inscricao |> 
  left_join(lista_cns_cpf, by = c("cns" = "CNS_PROF"))
```

Agora adicionada a coluna de CPF na base cns_inscricao, faremos um left join entre ela e a base CNES_cns.

```{r}

base_tratada <- 
  CNES_cpf |> 
  left_join(cns_inscricao, by = c("CPF_PROF" = "CPF_PROF"))


```

A próxima etapa será identificar os profissionais que tiveram a permanência no programa prorrogada por mais um ano. Como a única informação nos resultados de prorrogação que identifica o médico é o nome, realizaremos o *left join* utilizando essa variável.

```{r}

prorrogacao_ciclo18 <- read_excel("C:/Users/alefs/OneDrive/Documentos/GitHub/sa_maismedicos/01_dados/Editais/2019/prorrogacao_ciclo18.xlsx") |> 
  select(-CPF, -Ciclo)

base_tratada <- base_tratada |>   
  left_join(prorrogacao_ciclo18, by = c("NOMEPROF" = "NOME")) |>   
  mutate(Prorrogado = ifelse(is.na(Prorrogado), "NÃO", Prorrogado))

```

Finalizada a estruturação inicial da base de dados, identificaremos em qual competência os profissionais iniciaram o exercício na cidade em que foram designados.

```{r}

compet_inicio <- base_tratada |> 
  filter(CODUFMUN == ibge_aloc) |> 
  group_by(COMPETEN, CNS_PROF) |> 
  ungroup(CNS_PROF) |> 
  distinct(CNS_PROF) |> 
  summarise(competencia_inicio = n())
```

Observa-se que a competência em que os médicos iniciam o exercício nas cidades é junho de 2019, e até novembro ainda há profissionais começando nas localidades.

Com isso, admitiremos novembro de 2019 como a competência que finaliza o inicio do programa. E a partir dessa referência, calcularemos a idade dos médicos e o seu tempo de formação.

```{r}
base_tratada$COMPETEN <- as.Date(paste0(base_tratada$COMPETEN, "01"), format = "%Y%m%d")


# Convertendo a data de referência (competência) para o formato Date
competencia <- as.Date("2019-11-01")

# Calculando a idade em anos
base_tratada$idade <- trunc(as.numeric(interval(base_tratada$data_nascimento, competencia) / years(1)))



base_tratada$data_formacao <- as.Date(paste("01", base_tratada$data_formacao, sep = "/"), format = "%d/%m/%Y")

# Calculando o tempo de formação
base_tratada$tempo_formacao <- trunc(as.numeric(interval(base_tratada$data_formacao, competencia) / years(1)))
```

A seguir identificaremos os indíviduos que já atuavam nas cidades em que foram designados antes de iniciar o programa.

```{r}
base_tratada <-base_tratada |> 
  mutate(estava_na_cidade = ifelse(COMPETEN == as.Date("2019-04-01") & CODUFMUN == ibge_aloc, "Sim", "Não"))
```

### 1.2. Integração base de dados "secundários".

A segunda etapa consiste na agregação de variáveis de outras fontes de dados. Para isso, identificaremos os municipios e CNES presentes na base de dados.

```{r}
lista_cnes <- base_tratada |> 
  distinct(CNES)

lista_municipios <- base_tratada |> 
  distinct(CODUFMUN)
```

#### 1.2.1. População e porte.

A partir de dados do Censo 2022 do IBGE identificaremos a população dos municipios, e classificaremos por porte de acordo com a população.

```{r}
#Carregando a base de contigente populacional
pop_mun <- read_excel("C:/Users/alefs/OneDrive/Documentos/GitHub/sa_maismedicos/01_dados/pop_municipios.xlsx") |> 
  mutate(cod_mun = substr(cod_mun, 1, 6)) |> 
  mutate(populacao = as.numeric(populacao))


base_tratada$CODUFMUN <- as.character(base_tratada$CODUFMUN)

base_tratada <- base_tratada |> 
  left_join(pop_mun, by = c("CODUFMUN" = "cod_mun")) |> 
  select(-mun)

#Classificando o porte dos municípios
base_tratada <- base_tratada |> 
  mutate(porte = case_when((populacao < 20000) ~ "PP-I",
                           (populacao >= 20000 & populacao < 50000) ~ "PP-II",
                           (populacao >= 50000 & populacao < 100000) ~ "MP",
                           (populacao >= 100000 & populacao < 900000) ~ "GP",
                           (populacao >= 900000) ~ "Metrópole",
                           TRUE ~ "Outros casos"))
```

#### 1.2.2. Cobertura de plano de saúde.

A partir dos dados da base XXXXX, agregaremos na nossa base a taxa de cobertura de plano de saúde que é resultado do número de planos de saúde dividido pela população.

``` sql

SELECT cod_ibge, taxa FROM "Open Analytics Layer".Infraestrutura."Cobertura Plano de Saúde"
```

```{r}

# codigo para acessar dados de datalake proprio 

dremio_host <- Sys.getenv("endereco")
dremio_port <- Sys.getenv("port")
dremio_uid <- Sys.getenv("uid")
dremio_pwd <- Sys.getenv("datalake")


channel <- odbcDriverConnect(sprintf("DRIVER=Dremio Connector;
                                     HOST=%s;
                                     PORT=%s;
                                     UID=%s;
                                     PWD=%s;
                                     AUTHENTICATIONTYPE=Basic Authentication;
                                     CONNECTIONTYPE=Direct", 
                         dremio_host, 
                         dremio_port, 
                         dremio_uid, 
                         dremio_pwd))

query <- 'SELECT * FROM "@alef_santos"."pmmb_cobertura_plano_saude"'



cobertura_saude <- sqlQuery(channel, query, 
                     as.is = TRUE)


```

```{r}
cobertura_saude <- cobertura_saude |> 
  rename(cobertura_saude = taxa) |> 
  mutate(cobertura_saude = as.numeric(cobertura_saude))

base_tratada <- base_tratada |> 
  left_join(cobertura_saude, by = c("CODUFMUN" = "cod_ibge"))
```

#### 1.2.3. Número vagas de medicina.

A seguir, adicionaremos a variável número de vagas de medicina por município da base de dados XXXXXX, e calcularemos o número de vagas por mil habitantes.

``` sql
SELECT cod_ibge, SUM(vagas) AS vagas_medicina FROM "Open Analytics Layer"."Educação"."Quantidade de vagas, matriculados, concluintes e inscritos em curso superior por município"
WHERE curso = 'Medicina'
GROUP BY(cod_ibge)
```

```{r}
# codigo para acessar dados de datalake proprio 

dremio_host <- Sys.getenv("endereco")
dremio_port <- Sys.getenv("port")
dremio_uid <- Sys.getenv("uid")
dremio_pwd <- Sys.getenv("datalake")


channel <- odbcDriverConnect(sprintf("DRIVER=Dremio Connector;
                                     HOST=%s;
                                     PORT=%s;
                                     UID=%s;
                                     PWD=%s;
                                     AUTHENTICATIONTYPE=Basic Authentication;
                                     CONNECTIONTYPE=Direct", 
                         dremio_host, 
                         dremio_port, 
                         dremio_uid, 
                         dremio_pwd))

query <- 'SELECT * FROM "@alef_santos"."pmmb_vagas_medicina"'



vagas_medicina <- sqlQuery(channel, query, 
                     as.is = TRUE)
```

```{r}

base_tratada <- base_tratada |> 
  left_join(vagas_medicina, by = c("CODUFMUN" = "cod_ibge"))

base_tratada <- base_tratada |>
  mutate(vagas_medicina = as.numeric(vagas_medicina)) |> 
  mutate(vagas_medicina_milhab = (vagas_medicina/populacao)*1000) |> 
  mutate(vagas_medicina = ifelse(is.na(vagas_medicina), 0, vagas_medicina)) |> 
  mutate(vagas_medicina_milhab = ifelse(is.na(vagas_medicina_milhab), 0, vagas_medicina_milhab))
```

#### 1.2.4. PIB per capita.

A seguir agregaremos a variável de PIB per capita, com dados entre 2010 e 2021.

``` sql
SELECT codigo_municipio, 
       ano, 
       produto_interno_bruto_capital_precos_correntes_1 AS pib_percapita
       
FROM Dados.pib."pib_2010_2021.parquet"
```

```{r}
# codigo para acessar dados de datalake proprio 

dremio_host <- Sys.getenv("endereco")
dremio_port <- Sys.getenv("port")
dremio_uid <- Sys.getenv("uid")
dremio_pwd <- Sys.getenv("datalake")


channel <- odbcDriverConnect(sprintf("DRIVER=Dremio Connector;
                                     HOST=%s;
                                     PORT=%s;
                                     UID=%s;
                                     PWD=%s;
                                     AUTHENTICATIONTYPE=Basic Authentication;
                                     CONNECTIONTYPE=Direct", 
                         dremio_host, 
                         dremio_port, 
                         dremio_uid, 
                         dremio_pwd))

query <- 'SELECT * FROM "@alef_santos"."pmmb_pibpercapita"'



pib_percapita <- sqlQuery(channel, query, 
                     as.is = TRUE)
```

```{r}
base_tratada$ano_competencia <- year(base_tratada$COMPETEN)
pib_percapita <- pib_percapita |> 
  mutate(pib_percapita = as.numeric(pib_percapita)) |> 
  mutate(codigo_municipio = substring(codigo_municipio,1,6)) |> 
  mutate(ano = as.numeric(ano))

base_tratada <- base_tratada |> 
  left_join(pib_percapita, by = c("CODUFMUN" = "codigo_municipio", "ano_competencia" = "ano"))
```

#### 1.2.5. Número de leitos por estabelecimento de saúde.

O próximo indicador é o número de leitos por estabelecimento de saúde com dados da CNES.

``` sql
SELECT 
    substr(lt.COMPETEN, 1, 4) as ano,
    lt.cnes,
    m.uf_sigla,
    CASE
        WHEN LENGTH(m.cod_municipio) = 7 THEN SUBSTR(m.cod_municipio, 1, 6)
        WHEN m.cod_municipio LIKE '53%' THEN '530010'
        ELSE m.cod_municipio
    END AS cod_ibge,    
    m.municipio,
    SUM(lt.QT_SUS) AS quantidade_sus,
    SUM(lt.QT_NSUS) AS quantidade_nao_sus,
    SUM(lt.QT_SUS) + SUM(lt.QT_NSUS) AS qt_total
FROM
    Dados.cnes.LT lt 
LEFT JOIN 
    "Open Analytics Layer".Territorial."Hierarquia completa dos municípios" m 
    ON lt.CODUFMUN = CAST(m.cod_municipio AS CHAR)
WHERE 
    substr(lt.COMPETEN, 5, 2) = '01' AND 
    substr(lt.COMPETEN, 1, 4) > 2018 AND
    cnes IN (lista)
GROUP BY
    ano,
    m.uf_sigla,
    cod_ibge,
    m.municipio,
    lt.cnes
```

```{r}
# codigo para acessar dados de datalake proprio 

dremio_host <- Sys.getenv("endereco")
dremio_port <- Sys.getenv("port")
dremio_uid <- Sys.getenv("uid")
dremio_pwd <- Sys.getenv("datalake")


channel <- odbcDriverConnect(sprintf("DRIVER=Dremio Connector;
                                     HOST=%s;
                                     PORT=%s;
                                     UID=%s;
                                     PWD=%s;
                                     AUTHENTICATIONTYPE=Basic Authentication;
                                     CONNECTIONTYPE=Direct", 
                         dremio_host, 
                         dremio_port, 
                         dremio_uid, 
                         dremio_pwd))

query <- 'SELECT * FROM "@alef_santos"."pmmb_leitos"'



leitos <- sqlQuery(channel, query, 
                     as.is = TRUE)
```

```{r}
leitos <- leitos |> 
  select(cnes, ano, qt_total) |> 
  mutate(ano = as.numeric(ano))

base_tratada <- base_tratada |>
  left_join(leitos, by = c("CNES" = "cnes", "ano_competencia" = "ano")) |> 
  rename(qt_leitos_cnes = qt_total) |> 
  mutate(qt_leitos_cnes = as.numeric(qt_leitos_cnes))
```

#### 1.2.6. Profissionais de saúde por estabelecimento de saúde.

``` sql
WITH ch_cnes_selecionados 

AS(
    SELECT CNES,
        CODUFMUN, 
        PF.NOMEPROF,
        PF.CPF_PROF,
        CBO,
        CASE 
            WHEN substr(CBO, 1, 4) = '2235' THEN 'Enfermeiro' 
            WHEN substr(CBO, 1, 4) = '3222' THEN 'Técnico ou Auxiliar de Enfermagem'
            WHEN substr(CBO, 1, 4) = '2232' THEN 'Cirurgião Dentista'
            WHEN CBO = '515105' THEN 'Agente Comunitário de Saúde'
        END AS categoria,
        substr(COMPETEN, 1, 4) AS ANO,
        CAST(PF.HORAHOSP + PF.HORAOUTR + PF.HORA_AMB AS FLOAT) AS CH_TOTAL
    FROM Dados.cnes.PF
    WHERE 
        substr(PF.COMPETEN, 5, 2) = '01' AND
        substr(PF.COMPETEN, 1, 4) > 2018 AND 
        (CBO = '515105' OR 
        substr(PF.CBO, 1, 4) = '2235' OR 
        substr(PF.CBO, 1, 4) = '2232' OR 
        PF.CBO = '322205' OR
        PF.CBO = '322210' OR
        PF.CBO = '322215' OR
        PF.CBO = '322220' OR
        PF.CBO = '322245' OR
        PF.CBO = '322230' OR
        PF.CBO = '322235' OR
        PF.CBO = '322250' ) AND 
        CNES IN (lista)) 

SELECT a.ANO, 
       a.CNES, 
       b.FANTASIA,
       c.uf_sigla,
       a.CODUFMUN,
       c.municipio, 
       a.categoria,   
       SUM(CH_TOTAL) AS CH,
       SUM(CH_TOTAL)/40 AS FTE40
FROM ch_cnes_selecionados a
    LEFT JOIN Dados.cnes.CADGER b
        ON a.CNES = b.CNES
    LEFT JOIN "Open Analytics Layer".Territorial."Hierarquia completa dos municípios" c
        ON a.CODUFMUN = CAST(c.cod_municipio AS CHARACTER)
GROUP BY 
        ANO,
        CNES, 
        fantasia,
        uf_sigla,
        CODUFMUN, 
        municipio,
        categoria
```

```{r}

# codigo para acessar dados de datalake proprio 

dremio_host <- Sys.getenv("endereco")
dremio_port <- Sys.getenv("port")
dremio_uid <- Sys.getenv("uid")
dremio_pwd <- Sys.getenv("datalake")


channel <- odbcDriverConnect(sprintf("DRIVER=Dremio Connector;
                                     HOST=%s;
                                     PORT=%s;
                                     UID=%s;
                                     PWD=%s;
                                     AUTHENTICATIONTYPE=Basic Authentication;
                                     CONNECTIONTYPE=Direct", 
                         dremio_host, 
                         dremio_port, 
                         dremio_uid, 
                         dremio_pwd))

query <- 'SELECT * FROM "@alef_santos"."pmmb_equipe_cnes"'



equipe_saude <- sqlQuery(channel, query, 
                     as.is = TRUE)
```

```{r}
equipe_saude <- equipe_saude |> 
  select(CNES, ANO, categoria, FTE40) |> 
  mutate(categoria = case_when(categoria == 	
"Técnico ou Auxiliar de Enfermagem" ~ "tec_aux_enf",
categoria == "Cirurgião Dentista" ~ "dentista",
categoria == "Agente Comunitário de Saúde" ~ "agente_saude",
categoria == "Enfermeiro" ~ "enfermeiro",
TRUE ~ NA)) |> 
  mutate(FTE40 = ifelse(is.na(FTE40), 0, FTE40))

equipe_saude <- equipe_saude |> 
  pivot_wider(names_from = categoria, values_from = FTE40) |> 
  mutate(across(3:6, ~ ifelse(is.na(.), 0, .))) |> 
  mutate(ANO = as.numeric(ANO))


base_tratada <- base_tratada |> 
  left_join(equipe_saude, by  = c("CNES" = "CNES", "ano_competencia" = "ANO"))

```

#### 1.2.6. População ocupada.

Os dados da população ocupada foram coletados da Estatísticas do Cadastro Central de Empresas (CEMPRE) do IBGE por meio do SIDRA, tabela 1685.

E calculamos o percentual da população ocupada com os dados do Censo 2022.

```{r}
pop_ocupada_mun <- read_excel("C:/Users/alefs/OneDrive/Documentos/GitHub/sa_maismedicos/01_dados/Editais/2019/pop_ocupada_mun.xlsx") |> 
  select(-municipio) |> 
  mutate(across(-cod_ibge, as.numeric)) |>  # Converte todas as colunas, exceto cod_ibge, para "character"
  pivot_longer(
    cols = -cod_ibge,
    names_to = "ano",
    values_to = "pop_ocupada"
  ) |> 
  mutate(ano = as.numeric(ano)) |> 
  mutate(cod_ibge = substring(cod_ibge,1,6))

base_tratada <- base_tratada |> 
  left_join(pop_ocupada_mun, by = c("CODUFMUN" = "cod_ibge", "ano_competencia" = "ano")) |> 
  mutate(tx_pop_ocupada = pop_ocupada/populacao)
```

### 2. Tratamento de dados.

Finalizada a montagem da base de dados, daremos início a terceira etapa: tratamento dos dados.

Primeiro filtraremos apenas os anos pesteriores a 2019, e apenas aqueles médicos que iniciaram o exercício nas cidades em que foram designados até novembro de 2019.

```{r}
base_tratada <- base_tratada |> 
  filter(ano_competencia >= 2019)

cpf_validos <- base_tratada %>%
  filter(CODUFMUN == ibge_aloc, 
         COMPETEN >= as.Date("2019-11-01"), 
         TP_UNID == "02") %>%
  group_by(CPF_PROF) %>%
  slice_min(order_by = COMPETEN, n = 1) |> 
  ungroup() |> 
  group_by(COMPETEN) |> 
  count()

base_tratada <- base_tratada |> 
  filter(CPF_PROF %in% cpf_validos$CPF_PROF)
```
